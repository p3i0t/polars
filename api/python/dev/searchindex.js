Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidAssert", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequired", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidAssert.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequired.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidAssert", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequired", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsPanicError", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "terms": {"python": [0, 37, 38, 74, 87, 117, 128, 129, 134, 136, 150, 151, 153, 169, 212, 218, 242, 243, 262, 293, 307, 384, 389, 393, 450, 528, 529, 632, 697, 710, 711, 713, 714, 756, 757, 759, 769, 775, 796, 863, 875, 955, 959, 969, 970, 971, 975, 1093, 1162, 1212, 1232, 1255], "api": [0, 117, 148, 169, 218, 293, 307, 529, 731, 769, 863, 1093, 1232, 1255], "refer": [0, 36, 87, 126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 177, 180, 307, 310, 311, 384, 417, 420, 577, 630, 642, 643, 656, 658, 659, 663, 769, 796, 875, 987, 990, 1113, 1172, 1173, 1186, 1188, 1189, 1193, 1232, 1236], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 145, 146, 147, 151, 152, 155, 156, 167, 305, 306, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 765, 769, 781, 790, 791, 793, 795, 797, 799, 801, 802, 806, 809, 813, 814, 815, 816, 818, 822, 823, 827, 830, 832, 839, 841, 846, 847, 848, 850, 853, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 949, 950, 984, 1008, 1027, 1093, 1111, 1167, 1178, 1179, 1202, 1208, 1209, 1221, 1232, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1259], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 142, 143, 144, 145, 146, 147, 148, 151, 152, 158, 175, 216, 232, 233, 255, 307, 446, 520, 748, 769, 781, 874, 881, 1240, 1243, 1245, 1256, 1257, 1259], "seri": [0, 1, 11, 25, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 151, 153, 154, 158, 182, 191, 193, 195, 197, 200, 201, 204, 205, 207, 209, 211, 220, 222, 227, 238, 240, 244, 258, 261, 264, 266, 268, 269, 287, 307, 322, 333, 356, 360, 368, 370, 414, 443, 446, 449, 453, 454, 463, 468, 470, 471, 473, 474, 475, 476, 487, 493, 495, 520, 526, 528, 529, 577, 578, 579, 580, 581, 586, 587, 598, 609, 611, 634, 656, 657, 658, 659, 663, 667, 677, 682, 692, 696, 705, 706, 710, 711, 713, 714, 719, 721, 725, 726, 729, 730, 731, 741, 743, 744, 747, 748, 751, 756, 757, 760, 769, 781, 805, 809, 831, 857, 875, 879, 1224, 1226, 1228, 1231, 1233, 1236, 1237, 1238, 1239, 1242, 1256, 1259], "express": [0, 8, 42, 43, 44, 45, 53, 54, 155, 158, 162, 171, 187, 189, 191, 199, 218, 229, 233, 241, 246, 247, 251, 254, 265, 270, 271, 281, 282, 284, 286, 293, 307, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 340, 341, 344, 355, 360, 361, 362, 363, 364, 366, 371, 372, 373, 374, 375, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 440, 442, 443, 445, 446, 450, 452, 453, 455, 456, 457, 458, 463, 466, 467, 468, 469, 470, 471, 472, 480, 481, 485, 486, 488, 489, 492, 493, 499, 501, 519, 520, 526, 527, 528, 529, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 546, 548, 550, 551, 553, 555, 557, 558, 561, 562, 564, 566, 567, 571, 572, 573, 574, 576, 580, 581, 582, 584, 585, 607, 608, 609, 612, 614, 615, 617, 619, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 646, 647, 648, 649, 657, 661, 670, 671, 674, 675, 678, 679, 680, 682, 683, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 735, 738, 741, 743, 744, 745, 746, 747, 749, 751, 753, 755, 756, 757, 759, 760, 765, 768, 781, 785, 790, 791, 800, 801, 802, 805, 808, 827, 833, 834, 837, 838, 840, 845, 851, 852, 853, 855, 856, 863, 875, 879, 881, 904, 938, 948, 955, 958, 959, 973, 1008, 1014, 1031, 1055, 1058, 1093, 1117, 1136, 1140, 1153, 1155, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1172, 1173, 1187, 1191, 1232, 1248, 1249, 1251, 1252], "selector": [0, 36, 172, 181, 183, 187, 224, 231, 233, 263, 265, 270, 273, 275, 307, 311, 440, 446, 535, 769, 781, 787, 797, 798, 801, 822, 846, 875], "function": [0, 36, 37, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 151, 152, 153, 154, 156, 165, 167, 169, 171, 177, 180, 186, 193, 218, 224, 232, 233, 237, 255, 265, 266, 267, 270, 271, 272, 275, 276, 293, 307, 311, 319, 356, 365, 366, 381, 382, 384, 415, 436, 438, 439, 461, 520, 528, 529, 541, 551, 552, 567, 571, 574, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 616, 676, 677, 678, 687, 691, 702, 704, 705, 706, 718, 719, 721, 723, 724, 727, 730, 731, 734, 736, 739, 741, 743, 745, 746, 750, 754, 758, 760, 765, 769, 781, 785, 791, 796, 802, 818, 822, 826, 829, 835, 841, 845, 848, 855, 863, 875, 879, 920, 928, 933, 948, 949, 985, 1006, 1007, 1009, 1010, 1027, 1086, 1093, 1111, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1135, 1137, 1142, 1147, 1211, 1214, 1216, 1217, 1232, 1246, 1247, 1248, 1249, 1251, 1253, 1255, 1257, 1258, 1259], "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 169, 174, 175, 184, 187, 188, 198, 199, 200, 212, 213, 214, 216, 218, 231, 232, 236, 241, 242, 243, 245, 249, 252, 260, 265, 266, 267, 270, 272, 281, 285, 305, 307, 311, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 335, 336, 337, 338, 339, 341, 344, 346, 347, 348, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 367, 368, 371, 372, 373, 374, 375, 382, 383, 384, 389, 390, 391, 392, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 442, 453, 455, 456, 457, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 485, 486, 488, 493, 499, 501, 508, 519, 521, 527, 529, 561, 562, 566, 567, 574, 576, 577, 580, 581, 582, 584, 585, 605, 607, 609, 614, 615, 616, 622, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 646, 647, 648, 649, 656, 657, 658, 659, 661, 663, 666, 674, 675, 676, 679, 680, 683, 686, 692, 702, 709, 710, 711, 712, 713, 714, 715, 725, 726, 728, 729, 730, 731, 741, 744, 755, 756, 757, 760, 765, 769, 781, 788, 789, 790, 791, 796, 799, 801, 802, 808, 809, 832, 836, 851, 875, 880, 885, 886, 897, 899, 900, 901, 902, 903, 905, 907, 908, 919, 921, 923, 924, 925, 929, 930, 937, 938, 939, 949, 950, 955, 956, 957, 958, 961, 962, 963, 964, 966, 967, 968, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1012, 1013, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1049, 1050, 1051, 1052, 1054, 1059, 1065, 1067, 1074, 1085, 1087, 1093, 1105, 1111, 1113, 1117, 1118, 1120, 1121, 1132, 1134, 1142, 1147, 1152, 1153, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1176, 1177, 1178, 1179, 1186, 1187, 1188, 1189, 1191, 1193, 1196, 1212, 1213, 1214, 1215, 1218, 1231, 1232, 1240, 1246, 1252, 1256, 1258], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 128, 129, 130, 132, 133, 137, 138, 139, 140, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 175, 184, 187, 193, 198, 200, 201, 213, 214, 218, 240, 245, 260, 265, 266, 269, 270, 273, 284, 307, 319, 321, 324, 325, 326, 327, 328, 329, 332, 337, 338, 339, 341, 344, 355, 356, 360, 361, 362, 363, 364, 367, 368, 371, 372, 373, 374, 375, 382, 383, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 442, 453, 456, 459, 466, 467, 468, 469, 470, 471, 472, 481, 485, 486, 488, 493, 499, 501, 519, 520, 528, 529, 574, 576, 580, 581, 582, 584, 585, 586, 614, 615, 622, 625, 626, 627, 629, 630, 631, 632, 634, 635, 637, 638, 639, 646, 647, 648, 649, 656, 657, 661, 674, 675, 676, 683, 692, 702, 709, 710, 711, 712, 713, 714, 715, 717, 725, 726, 728, 729, 730, 731, 741, 744, 755, 756, 757, 760, 765, 769, 781, 790, 791, 799, 800, 801, 802, 809, 813, 827, 831, 832, 838, 846, 855, 875, 880, 885, 886, 897, 899, 900, 901, 902, 903, 905, 907, 908, 919, 920, 921, 923, 924, 925, 929, 930, 938, 949, 950, 955, 956, 958, 960, 961, 962, 963, 964, 966, 967, 968, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1012, 1025, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1049, 1050, 1051, 1052, 1054, 1059, 1065, 1067, 1085, 1086, 1105, 1111, 1117, 1118, 1120, 1121, 1142, 1152, 1153, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1167, 1168, 1169, 1176, 1177, 1178, 1179, 1186, 1187, 1191, 1212, 1213, 1215, 1223, 1232, 1240, 1246, 1253, 1256], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 108, 109, 116, 118, 119, 120, 122, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 146, 147, 173, 174, 175, 184, 186, 213, 218, 225, 229, 266, 270, 307, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 396, 519, 520, 538, 552, 554, 556, 636, 686, 751, 769, 781, 788, 789, 792, 793, 799, 818, 823, 835, 850, 863, 875, 881, 939, 1166, 1232, 1240], "input": [0, 47, 53, 119, 121, 128, 129, 171, 181, 199, 218, 222, 231, 237, 246, 247, 251, 254, 258, 271, 281, 282, 286, 307, 316, 366, 371, 437, 440, 452, 466, 524, 528, 529, 539, 567, 581, 619, 634, 646, 652, 653, 654, 655, 657, 659, 670, 678, 686, 688, 690, 692, 695, 698, 699, 700, 708, 715, 717, 725, 726, 729, 730, 731, 733, 735, 738, 747, 751, 753, 759, 769, 781, 785, 797, 808, 829, 833, 834, 835, 837, 840, 845, 851, 852, 856, 875, 879, 938, 1008, 1031, 1090, 1091, 1093, 1117, 1140, 1164, 1176, 1187, 1189, 1232, 1251, 1252, 1254], "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 42, 171, 179, 212, 218, 222, 225, 231, 233, 242, 246, 248, 258, 271, 277, 281, 307, 319, 321, 344, 365, 366, 382, 499, 520, 528, 529, 538, 541, 551, 574, 622, 635, 639, 677, 678, 683, 687, 688, 689, 690, 700, 701, 730, 731, 769, 781, 785, 795, 800, 818, 822, 823, 833, 835, 845, 851, 863, 875, 885, 886, 908, 928, 949, 1065, 1093, 1111, 1152, 1165, 1169, 1217, 1221, 1232], "config": [0, 47, 179, 246, 265, 281, 307, 624, 644, 711, 714, 715, 781, 790, 795, 833, 851, 875, 1154, 1174], "extend": [0, 119, 279, 307, 443, 769, 781, 879, 887, 1014, 1232], "plugin": [0, 769, 781], "sql": [0, 34, 106, 107, 115, 130, 131, 214, 251, 307, 351, 513, 610, 728, 749, 769, 781, 837, 875, 915, 1079, 1140, 1232, 1240, 1242, 1244, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258], "interfac": [0, 106, 107, 781, 1256], "except": [0, 151, 202, 215, 217, 259, 307, 367, 634, 657, 717, 769, 781, 814, 875, 881, 929, 1026, 1048, 1164, 1187, 1204, 1213, 1232, 1255], "test": [0, 34, 92, 130, 131, 133, 139, 307, 781, 810, 817, 875], "metadata": [0, 144, 781], "These": [1, 36, 125, 130, 131, 167, 272, 307, 428, 768, 769, 879, 985, 998], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 130, 133, 142, 145, 146, 147, 148, 155, 158, 159, 162, 169, 212, 215, 216, 241, 242, 244, 266, 267, 270, 273, 285, 307, 411, 417, 420, 508, 528, 529, 535, 579, 607, 656, 658, 659, 769, 813, 814, 818, 822, 846, 853, 875, 879, 881, 981, 987, 990, 1074, 1093, 1115, 1134, 1186, 1188, 1189, 1213, 1214, 1232, 1259], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 128, 129, 130, 131, 133, 134, 137, 138, 142, 146, 148, 167, 171, 188, 200, 211, 212, 218, 229, 233, 240, 241, 242, 243, 255, 262, 265, 271, 272, 293, 307, 310, 365, 366, 389, 408, 409, 411, 414, 417, 420, 440, 446, 466, 492, 520, 528, 529, 572, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 624, 638, 642, 643, 644, 667, 677, 678, 697, 705, 715, 719, 731, 741, 744, 748, 760, 769, 785, 791, 798, 809, 810, 817, 831, 838, 841, 845, 863, 875, 879, 881, 928, 955, 978, 979, 984, 987, 990, 1013, 1031, 1058, 1093, 1115, 1154, 1168, 1172, 1173, 1174, 1211, 1217, 1232, 1236, 1245, 1259], "regist": [1, 48, 49, 50, 51, 161, 163, 255, 307, 769, 841, 875, 879, 1240, 1242, 1243, 1244, 1245, 1256], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 161, 163, 179, 218, 233, 293, 307, 356, 389, 417, 420, 520, 528, 529, 587, 683, 697, 730, 731, 769, 795, 818, 863, 875, 920, 955, 987, 990, 1086, 1093, 1122, 1221, 1232, 1259], "dedic": [1, 117, 212, 242, 307, 881], "namespac": [1, 130, 306, 307, 667, 748, 768, 781, 874, 1232, 1259], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 103, 116, 118, 119, 120, 122, 130, 131, 133, 137, 138, 140, 146, 155, 158, 162, 187, 188, 212, 213, 242, 260, 266, 307, 361, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 414, 416, 429, 430, 431, 432, 579, 605, 623, 626, 633, 769, 801, 875, 881, 924, 932, 957, 958, 959, 963, 966, 967, 968, 972, 973, 974, 976, 977, 980, 982, 983, 984, 986, 999, 1000, 1001, 1002, 1013, 1115, 1132, 1142, 1153, 1156, 1163, 1207, 1213, 1232], "polar": [1, 307, 310, 311, 768, 769, 775, 781, 875, 879, 880, 881, 1232, 1236, 1255, 1256], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 104, 155, 156, 243, 307, 756, 765, 769, 775, 781, 793, 799, 832, 850, 875, 880, 1212, 1232, 1242, 1256], "without": [1, 37, 42, 43, 44, 45, 52, 53, 54, 63, 65, 94, 123, 132, 135, 140, 141, 143, 144, 147, 148, 255, 265, 266, 270, 275, 276, 307, 311, 381, 382, 415, 461, 529, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 624, 644, 702, 745, 746, 747, 769, 790, 791, 841, 848, 875, 931, 933, 948, 949, 985, 1027, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1154, 1174, 1211, 1213, 1216, 1232, 1258], "requir": [1, 35, 36, 47, 121, 130, 131, 151, 152, 153, 154, 177, 241, 265, 266, 267, 270, 307, 357, 436, 438, 439, 521, 529, 567, 611, 656, 658, 659, 680, 744, 769, 793, 799, 840, 850, 875, 921, 1005, 1007, 1009, 1010, 1087, 1141, 1186, 1188, 1189, 1213, 1214, 1218, 1232, 1236], "subclass": [1, 307], "mixin": 1, "expr": [1, 47, 48, 49, 50, 51, 187, 189, 190, 214, 215, 229, 233, 241, 246, 247, 265, 270, 281, 282, 307, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 764, 765, 769, 770, 771, 774, 775, 776, 777, 778, 801, 803, 804, 813, 814, 828, 833, 834, 851, 852, 875, 879, 881, 948, 955, 958, 959, 973, 981, 998, 1008, 1015, 1016, 1020, 1058, 1064, 1080, 1084, 1153, 1158, 1163, 1180, 1232], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 158, 159, 160, 162, 167, 169, 171, 177, 179, 183, 186, 189, 191, 192, 193, 198, 199, 200, 212, 214, 215, 216, 218, 224, 225, 231, 233, 240, 241, 242, 243, 246, 247, 249, 251, 254, 261, 265, 266, 267, 270, 271, 276, 277, 281, 282, 285, 286, 307, 319, 321, 335, 351, 356, 365, 366, 371, 377, 379, 380, 389, 415, 428, 433, 435, 436, 437, 438, 439, 444, 446, 466, 468, 470, 471, 473, 474, 475, 476, 478, 483, 513, 520, 528, 562, 567, 574, 577, 580, 581, 582, 586, 589, 591, 593, 595, 597, 598, 600, 602, 604, 610, 613, 616, 618, 619, 632, 634, 636, 637, 640, 641, 642, 643, 646, 657, 659, 661, 666, 670, 672, 677, 678, 687, 688, 690, 695, 698, 699, 700, 701, 704, 708, 710, 711, 713, 714, 733, 735, 738, 747, 751, 753, 756, 757, 759, 761, 762, 764, 768, 769, 770, 771, 774, 775, 776, 777, 778, 781, 785, 790, 791, 795, 798, 802, 803, 805, 808, 809, 810, 813, 814, 817, 818, 822, 823, 827, 829, 831, 833, 834, 836, 837, 840, 845, 848, 851, 852, 853, 856, 875, 879, 881, 885, 886, 899, 915, 920, 928, 931, 938, 946, 947, 955, 985, 998, 1004, 1006, 1007, 1008, 1009, 1010, 1015, 1017, 1018, 1024, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1049, 1079, 1086, 1111, 1113, 1117, 1118, 1128, 1140, 1144, 1147, 1162, 1164, 1166, 1170, 1171, 1172, 1173, 1176, 1187, 1189, 1191, 1196, 1203, 1211, 1213, 1214, 1217, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239, 1242, 1245, 1249, 1259], "all": [1, 4, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 101, 104, 116, 121, 128, 129, 132, 133, 134, 136, 139, 140, 142, 145, 146, 155, 156, 159, 162, 167, 170, 172, 179, 183, 190, 202, 207, 209, 211, 212, 213, 214, 216, 217, 222, 224, 228, 229, 233, 236, 241, 242, 243, 247, 253, 254, 258, 259, 263, 265, 266, 270, 273, 275, 276, 277, 282, 284, 307, 320, 322, 344, 359, 366, 375, 381, 387, 388, 389, 390, 440, 445, 451, 458, 459, 462, 464, 468, 471, 475, 476, 481, 491, 492, 499, 517, 520, 528, 547, 550, 551, 553, 554, 555, 556, 557, 558, 565, 577, 581, 583, 587, 611, 617, 619, 625, 631, 632, 634, 637, 643, 651, 652, 653, 657, 678, 688, 697, 705, 706, 707, 708, 717, 719, 724, 725, 728, 735, 743, 751, 752, 753, 759, 769, 775, 781, 784, 787, 790, 791, 795, 798, 800, 802, 804, 813, 818, 822, 827, 834, 838, 839, 840, 846, 848, 852, 853, 855, 875, 881, 908, 948, 950, 953, 954, 955, 956, 1026, 1032, 1044, 1048, 1057, 1058, 1065, 1083, 1086, 1113, 1117, 1122, 1148, 1155, 1161, 1162, 1164, 1167, 1173, 1181, 1182, 1183, 1187, 1204, 1213, 1232, 1242, 1247, 1248, 1252, 1255, 1258, 1259], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 133, 137, 138, 139, 140, 142, 143, 144, 147, 155, 159, 162, 167, 212, 213, 214, 215, 242, 243, 253, 254, 262, 267, 270, 307, 437, 514, 567, 581, 617, 619, 634, 642, 643, 644, 646, 657, 765, 769, 775, 813, 814, 839, 840, 875, 881, 1008, 1080, 1117, 1148, 1164, 1172, 1173, 1174, 1176, 1187, 1214, 1216, 1232, 1248, 1253, 1255, 1256], "target": [1, 34, 35, 36, 52, 133, 270, 307, 630, 656, 658, 659, 881, 1160, 1186, 1188, 1189, 1252], "thi": [1, 4, 10, 12, 14, 30, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 116, 118, 119, 120, 121, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 167, 169, 170, 171, 174, 175, 177, 179, 183, 186, 188, 192, 193, 198, 199, 200, 201, 205, 207, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 225, 226, 228, 229, 231, 234, 235, 236, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 253, 255, 256, 257, 260, 262, 265, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 288, 293, 306, 307, 311, 319, 322, 323, 332, 344, 350, 351, 352, 357, 365, 366, 368, 371, 381, 382, 384, 390, 391, 402, 408, 409, 411, 414, 415, 417, 420, 431, 435, 442, 452, 459, 461, 463, 464, 466, 470, 492, 493, 499, 508, 509, 510, 511, 512, 513, 515, 520, 521, 525, 526, 528, 529, 533, 534, 535, 536, 537, 538, 539, 541, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 567, 574, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 610, 611, 612, 617, 618, 619, 622, 624, 630, 635, 636, 640, 641, 644, 651, 652, 653, 654, 655, 660, 666, 668, 670, 677, 678, 680, 681, 682, 683, 687, 691, 699, 702, 704, 705, 718, 719, 721, 723, 724, 727, 728, 731, 734, 736, 739, 741, 745, 746, 747, 750, 754, 758, 759, 760, 765, 769, 781, 784, 785, 786, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 802, 808, 809, 811, 813, 814, 818, 822, 823, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 845, 846, 848, 850, 851, 852, 853, 854, 855, 858, 863, 874, 875, 879, 881, 887, 896, 908, 914, 915, 916, 921, 928, 930, 932, 933, 938, 939, 948, 949, 956, 957, 959, 968, 978, 979, 981, 984, 985, 987, 990, 1001, 1003, 1006, 1012, 1013, 1021, 1022, 1025, 1027, 1036, 1045, 1058, 1059, 1065, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1087, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1106, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1148, 1149, 1151, 1152, 1154, 1160, 1165, 1166, 1170, 1171, 1174, 1181, 1182, 1183, 1190, 1196, 1197, 1199, 1202, 1203, 1207, 1209, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1220, 1221, 1222, 1232, 1236, 1240, 1241, 1245, 1255, 1256, 1257, 1259], "featur": [1, 41, 52, 63, 65, 265, 270, 307], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 102, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 166, 167, 170, 171, 174, 175, 179, 183, 185, 186, 188, 191, 199, 200, 201, 202, 205, 206, 210, 212, 213, 214, 215, 216, 217, 218, 224, 225, 229, 231, 232, 233, 238, 240, 241, 242, 243, 244, 247, 248, 249, 251, 253, 254, 255, 256, 259, 260, 265, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 282, 284, 285, 293, 306, 307, 311, 316, 319, 321, 322, 323, 333, 336, 343, 344, 351, 356, 365, 366, 381, 382, 387, 388, 389, 390, 393, 401, 408, 409, 411, 415, 417, 428, 436, 437, 438, 439, 442, 446, 450, 459, 461, 463, 466, 478, 484, 491, 492, 495, 497, 499, 508, 513, 514, 516, 520, 522, 525, 528, 529, 533, 535, 537, 538, 539, 541, 549, 567, 572, 574, 577, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 616, 617, 618, 619, 621, 622, 623, 624, 625, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 649, 651, 652, 653, 656, 657, 658, 659, 661, 663, 666, 670, 677, 678, 683, 684, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 713, 714, 719, 723, 724, 725, 726, 728, 729, 731, 734, 736, 739, 741, 744, 745, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 765, 769, 784, 785, 786, 789, 790, 791, 793, 795, 798, 799, 800, 802, 805, 808, 809, 812, 813, 814, 816, 818, 822, 823, 827, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 848, 849, 850, 852, 855, 863, 875, 879, 881, 885, 886, 887, 900, 907, 908, 915, 920, 928, 931, 933, 938, 939, 948, 949, 950, 953, 954, 955, 956, 959, 967, 981, 985, 987, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1024, 1025, 1026, 1027, 1031, 1033, 1043, 1045, 1046, 1048, 1050, 1057, 1058, 1061, 1063, 1065, 1074, 1079, 1080, 1086, 1093, 1111, 1113, 1115, 1117, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1144, 1147, 1148, 1151, 1152, 1153, 1154, 1155, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1179, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1191, 1193, 1196, 1204, 1207, 1211, 1213, 1214, 1216, 1217, 1221, 1222, 1232, 1240, 1245, 1249, 1252, 1253, 1256, 1257, 1259], "primarili": 1, "intend": [1, 133, 151, 152, 153, 154, 666, 1196], "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 114, 117, 119, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 170, 171, 172, 175, 179, 181, 183, 189, 190, 191, 193, 199, 200, 207, 209, 211, 212, 213, 215, 218, 224, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 249, 254, 255, 256, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 281, 282, 283, 284, 286, 293, 307, 310, 317, 319, 321, 323, 332, 333, 356, 361, 362, 366, 381, 384, 387, 388, 396, 414, 415, 417, 420, 428, 431, 433, 436, 437, 438, 439, 440, 444, 445, 446, 450, 461, 464, 465, 466, 478, 492, 508, 516, 520, 522, 528, 529, 532, 550, 553, 555, 557, 558, 567, 574, 577, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 609, 611, 616, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 638, 639, 642, 643, 644, 646, 648, 650, 652, 653, 654, 655, 656, 658, 659, 663, 666, 667, 670, 678, 684, 685, 687, 688, 689, 690, 691, 694, 695, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 721, 725, 726, 728, 729, 731, 732, 733, 735, 737, 738, 741, 744, 745, 746, 747, 748, 750, 751, 752, 753, 756, 757, 758, 759, 760, 765, 768, 769, 780, 781, 784, 785, 786, 787, 790, 791, 793, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 814, 816, 817, 822, 831, 832, 833, 834, 836, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 875, 880, 881, 885, 886, 916, 920, 924, 925, 933, 948, 950, 953, 954, 962, 970, 971, 984, 985, 987, 990, 998, 1001, 1004, 1007, 1008, 1009, 1010, 1015, 1016, 1020, 1024, 1027, 1029, 1030, 1031, 1046, 1058, 1074, 1081, 1086, 1093, 1111, 1113, 1115, 1118, 1120, 1121, 1122, 1134, 1135, 1137, 1138, 1141, 1147, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1159, 1160, 1161, 1163, 1168, 1169, 1172, 1173, 1174, 1176, 1178, 1186, 1188, 1189, 1193, 1196, 1208, 1210, 1213, 1214, 1222, 1232, 1236, 1240, 1241, 1242, 1243, 1245, 1246, 1256, 1259], "librari": [1, 103, 130, 133, 528, 769, 879, 1259], "author": 1, "domain": [1, 631, 1161], "specif": [1, 30, 35, 36, 87, 116, 118, 120, 122, 128, 131, 132, 133, 137, 138, 139, 143, 172, 212, 214, 265, 307, 417, 420, 656, 658, 659, 663, 683, 769, 787, 813, 875, 880, 881, 987, 990, 1186, 1188, 1189, 1193, 1211, 1221, 1232, 1246, 1259], "capabl": [1, 36, 307], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 128, 129, 130, 131, 132, 133, 139, 140, 142, 143, 144, 145, 147, 158, 161, 163, 171, 172, 179, 183, 188, 189, 199, 200, 205, 215, 240, 248, 265, 266, 271, 273, 277, 307, 319, 356, 389, 411, 415, 417, 428, 437, 443, 466, 468, 471, 473, 474, 475, 476, 520, 528, 529, 539, 541, 586, 589, 591, 593, 595, 597, 600, 602, 604, 661, 697, 710, 711, 713, 714, 715, 756, 757, 759, 769, 785, 787, 793, 795, 798, 799, 800, 809, 814, 831, 835, 845, 846, 850, 875, 881, 920, 955, 981, 985, 987, 998, 1008, 1013, 1014, 1031, 1034, 1037, 1039, 1040, 1041, 1042, 1086, 1137, 1191, 1211, 1213, 1232, 1246, 1256, 1259], "mai": [1, 35, 37, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 128, 129, 130, 132, 134, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 179, 186, 188, 200, 215, 218, 240, 255, 265, 267, 270, 275, 276, 277, 307, 311, 381, 382, 389, 390, 391, 402, 411, 415, 417, 420, 428, 440, 461, 495, 520, 528, 529, 538, 574, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 636, 638, 697, 705, 706, 710, 711, 713, 714, 719, 743, 745, 746, 756, 757, 769, 790, 791, 795, 802, 809, 814, 818, 831, 841, 848, 854, 855, 863, 875, 932, 933, 948, 949, 950, 955, 956, 957, 968, 981, 985, 987, 990, 998, 1006, 1013, 1027, 1061, 1093, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1166, 1168, 1211, 1214, 1216, 1232, 1259], "exist": [1, 34, 35, 36, 47, 91, 132, 143, 158, 272, 276, 281, 282, 307, 318, 360, 363, 364, 393, 414, 769, 793, 799, 829, 832, 848, 850, 851, 852, 875, 881, 959, 984, 1258], "belong": [1, 200, 307, 809, 875], "core": [1, 307, 1259], "cannot": [1, 41, 45, 93, 96, 128, 129, 133, 134, 136, 139, 140, 164, 218, 243, 244, 266, 284, 293, 307, 361, 440, 508, 529, 607, 626, 648, 669, 731, 769, 838, 855, 863, 875, 881, 924, 1074, 1093, 1134, 1156, 1178, 1213, 1232], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 128, 130, 131, 133, 137, 138, 139, 155, 156, 162, 164, 307, 875], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 158, 161, 162, 163, 167, 171, 172, 176, 179, 180, 181, 182, 183, 184, 186, 187, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 207, 209, 210, 212, 214, 215, 217, 219, 221, 223, 224, 225, 226, 228, 229, 231, 233, 235, 237, 238, 239, 240, 241, 242, 244, 248, 249, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 316, 317, 318, 339, 344, 356, 360, 361, 362, 363, 364, 366, 368, 376, 382, 384, 386, 394, 411, 414, 415, 417, 420, 428, 437, 440, 446, 448, 452, 453, 456, 463, 466, 487, 488, 497, 498, 499, 514, 518, 520, 529, 538, 540, 541, 542, 544, 551, 552, 553, 554, 555, 556, 557, 558, 564, 567, 571, 574, 580, 581, 583, 585, 586, 589, 591, 593, 595, 597, 600, 602, 604, 611, 618, 619, 667, 668, 669, 678, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 765, 769, 776, 785, 787, 790, 791, 793, 795, 796, 797, 798, 800, 801, 802, 805, 808, 809, 811, 813, 814, 822, 823, 826, 827, 829, 830, 831, 835, 836, 838, 839, 840, 841, 845, 846, 847, 848, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 879, 880, 881, 884, 903, 908, 920, 925, 929, 930, 949, 950, 960, 981, 984, 985, 987, 990, 998, 1008, 1016, 1053, 1054, 1065, 1086, 1102, 1103, 1111, 1116, 1117, 1137, 1197, 1199, 1200, 1208, 1209, 1210, 1211, 1221, 1232, 1237, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1252, 1253, 1256, 1257, 1259], "dt": [1, 47, 133, 139, 240, 307, 586, 715, 769, 778, 831, 875, 881, 1239, 1253], "attempt": [1, 384, 769, 796, 875], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 128, 142, 151, 152, 153, 154, 179, 188, 211, 214, 215, 233, 260, 272, 275, 307, 381, 389, 492, 528, 651, 652, 653, 741, 744, 760, 769, 786, 790, 791, 795, 800, 814, 818, 827, 838, 875, 881, 948, 955, 1013, 1058, 1181, 1182, 1183, 1216, 1232], "so": [1, 130, 131, 142, 164, 198, 200, 233, 240, 307, 333, 343, 384, 450, 466, 497, 520, 529, 586, 642, 643, 644, 651, 652, 653, 667, 769, 796, 809, 831, 875, 881, 907, 1063, 1172, 1173, 1174, 1181, 1182, 1183], "rais": [1, 15, 16, 20, 35, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 128, 129, 133, 139, 142, 151, 153, 169, 233, 241, 266, 307, 343, 361, 389, 414, 495, 497, 538, 572, 574, 623, 626, 633, 656, 658, 659, 661, 663, 712, 729, 769, 907, 924, 955, 984, 1061, 1063, 1111, 1153, 1156, 1163, 1186, 1188, 1189, 1191, 1193, 1213, 1232], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 92, 93, 96, 103, 106, 108, 116, 118, 119, 122, 128, 129, 130, 131, 132, 133, 135, 139, 142, 144, 145, 156, 158, 162, 172, 173, 174, 175, 186, 189, 193, 200, 211, 212, 213, 215, 218, 229, 233, 238, 240, 241, 245, 255, 260, 266, 270, 272, 275, 276, 281, 284, 293, 307, 318, 340, 343, 355, 361, 377, 378, 379, 380, 381, 382, 389, 393, 394, 411, 414, 417, 431, 437, 445, 446, 452, 453, 456, 489, 492, 495, 497, 519, 520, 528, 529, 539, 541, 550, 551, 572, 573, 574, 582, 586, 587, 588, 590, 592, 594, 596, 599, 601, 603, 622, 623, 626, 631, 633, 636, 656, 658, 659, 661, 663, 679, 687, 692, 696, 710, 711, 713, 714, 716, 718, 721, 725, 726, 727, 728, 729, 741, 743, 744, 747, 751, 756, 757, 759, 760, 765, 769, 787, 788, 789, 791, 795, 800, 802, 805, 809, 814, 818, 827, 831, 832, 838, 841, 848, 851, 853, 855, 863, 875, 879, 880, 881, 904, 907, 919, 924, 937, 939, 944, 945, 946, 947, 948, 955, 959, 987, 1001, 1006, 1008, 1045, 1055, 1058, 1061, 1063, 1085, 1093, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1135, 1137, 1152, 1153, 1156, 1161, 1163, 1166, 1186, 1188, 1189, 1191, 1193, 1213, 1232, 1248, 1249, 1252, 1253, 1255, 1256, 1258], "attributeerror": 1, "howev": [1, 119, 130, 186, 218, 266, 307, 1006, 1232], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 128, 129, 130, 133, 134, 139, 140, 142, 145, 147, 148, 156, 157, 158, 162, 164, 167, 171, 173, 183, 184, 193, 199, 200, 207, 209, 211, 218, 229, 233, 240, 242, 243, 246, 249, 254, 265, 266, 270, 271, 272, 275, 281, 284, 293, 307, 310, 319, 356, 366, 377, 380, 381, 384, 389, 408, 409, 411, 414, 417, 420, 428, 437, 443, 446, 466, 492, 520, 528, 529, 535, 538, 541, 547, 550, 551, 553, 555, 557, 558, 567, 572, 574, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 609, 611, 613, 616, 619, 624, 632, 637, 642, 643, 644, 651, 652, 653, 656, 667, 678, 695, 697, 709, 712, 719, 721, 725, 726, 731, 748, 759, 765, 768, 769, 780, 785, 786, 790, 791, 796, 798, 800, 802, 809, 831, 833, 835, 836, 838, 840, 841, 845, 851, 854, 855, 875, 881, 920, 948, 955, 978, 979, 981, 984, 985, 987, 990, 998, 1008, 1014, 1031, 1058, 1086, 1093, 1098, 1111, 1115, 1117, 1135, 1137, 1138, 1141, 1144, 1147, 1154, 1155, 1162, 1167, 1172, 1173, 1174, 1181, 1182, 1183, 1186, 1211, 1213, 1232, 1236, 1245, 1256], "other": [1, 20, 32, 36, 37, 41, 54, 127, 128, 129, 130, 133, 142, 151, 152, 153, 154, 183, 185, 188, 191, 214, 215, 224, 225, 241, 243, 246, 247, 270, 276, 279, 281, 282, 305, 307, 316, 320, 322, 332, 333, 371, 386, 434, 435, 446, 450, 455, 457, 466, 470, 480, 487, 509, 510, 511, 512, 527, 533, 537, 546, 548, 561, 562, 566, 581, 619, 670, 671, 676, 679, 686, 688, 690, 695, 698, 699, 700, 708, 715, 733, 735, 738, 747, 751, 753, 769, 781, 791, 798, 805, 813, 814, 822, 823, 833, 834, 848, 851, 852, 853, 875, 881, 887, 938, 952, 1005, 1013, 1036, 1053, 1075, 1076, 1077, 1078, 1117, 1215, 1223, 1231, 1232, 1245, 1256], "onli": [1, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 128, 129, 130, 132, 133, 134, 136, 140, 142, 143, 145, 146, 147, 148, 151, 152, 153, 154, 158, 162, 167, 183, 188, 200, 201, 212, 215, 218, 233, 240, 242, 243, 262, 264, 265, 266, 276, 277, 293, 307, 317, 319, 321, 333, 370, 371, 384, 389, 411, 418, 440, 449, 459, 528, 529, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 567, 579, 624, 644, 681, 697, 731, 769, 790, 793, 796, 798, 799, 809, 810, 814, 817, 831, 832, 848, 850, 863, 875, 879, 881, 885, 886, 887, 935, 938, 955, 981, 1013, 1019, 1025, 1093, 1115, 1154, 1174, 1207, 1210, 1213, 1232, 1240, 1242, 1256, 1257, 1259], "gener": [1, 130, 131, 149, 155, 156, 157, 158, 159, 160, 162, 169, 175, 177, 233, 244, 263, 266, 272, 307, 367, 508, 607, 612, 692, 710, 713, 725, 726, 728, 744, 756, 757, 769, 875, 929, 1074, 1134, 1143, 1208, 1232, 1259], "userwarn": 1, "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1236, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1259], "register_expr_namespac": [1, 48, 50, 51], "greet": 1, "def": [1, 46, 48, 49, 50, 51, 130, 156, 158, 162, 167, 232, 272, 307, 316, 571, 631, 653, 686, 730, 769, 791, 826, 875, 881, 1161, 1259], "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 155, 1256], "self": [1, 48, 49, 50, 51, 53, 54, 173, 174, 180, 188, 202, 204, 205, 217, 223, 224, 230, 231, 233, 235, 236, 238, 244, 252, 253, 255, 256, 259, 263, 272, 274, 277, 278, 279, 283, 284, 285, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 359, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 748, 765, 769, 784, 785, 786, 787, 789, 790, 791, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 875, 887, 929, 939, 943, 1013, 1017, 1028, 1092, 1093, 1104, 1108, 1109, 1114, 1117, 1135, 1137, 1138, 1149, 1220, 1223, 1232, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254], "_expr": [1, 49], "hello": [1, 20, 651, 652, 653, 881, 1065, 1181, 1182, 1183, 1241, 1244], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 164, 165, 171, 173, 176, 177, 178, 182, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198, 199, 200, 202, 203, 204, 208, 210, 211, 212, 213, 214, 216, 217, 218, 220, 222, 227, 228, 229, 231, 232, 233, 237, 240, 241, 242, 243, 244, 248, 255, 258, 259, 265, 266, 267, 270, 271, 272, 273, 277, 280, 281, 282, 288, 290, 292, 293, 296, 301, 307, 319, 321, 324, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 341, 343, 344, 355, 360, 361, 362, 363, 364, 365, 366, 372, 373, 374, 375, 376, 382, 383, 389, 390, 392, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 437, 442, 450, 453, 454, 456, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 485, 486, 488, 493, 495, 497, 498, 499, 501, 508, 518, 519, 526, 528, 529, 539, 541, 542, 547, 571, 574, 576, 580, 581, 582, 584, 585, 607, 608, 613, 614, 615, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 657, 661, 666, 673, 674, 675, 677, 678, 679, 681, 682, 683, 686, 687, 692, 693, 694, 695, 696, 697, 702, 704, 709, 710, 711, 712, 713, 714, 715, 718, 721, 723, 725, 726, 727, 728, 729, 730, 731, 741, 744, 747, 748, 751, 754, 755, 756, 757, 759, 760, 769, 785, 788, 790, 791, 793, 794, 795, 799, 800, 802, 807, 809, 810, 813, 816, 817, 818, 826, 827, 829, 831, 835, 838, 844, 845, 846, 850, 851, 852, 858, 860, 862, 866, 871, 875, 879, 881, 885, 886, 887, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 907, 908, 919, 921, 923, 924, 925, 928, 931, 933, 937, 943, 949, 950, 955, 956, 958, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1006, 1008, 1012, 1013, 1021, 1024, 1026, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1059, 1061, 1063, 1064, 1065, 1067, 1074, 1084, 1085, 1092, 1093, 1098, 1105, 1111, 1117, 1118, 1119, 1120, 1121, 1134, 1136, 1144, 1152, 1153, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1187, 1191, 1196, 1204, 1207, 1214, 1217, 1219, 1220, 1221, 1223, 1232, 1240, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1256, 1257, 1258, 1259], "lit": [1, 318, 360, 466, 550, 633, 705, 719, 741, 744, 760, 769, 1016, 1232], "alia": [1, 12, 47, 49, 51, 83, 175, 200, 217, 233, 240, 274, 281, 284, 307, 316, 320, 360, 361, 362, 363, 364, 365, 376, 377, 378, 379, 380, 382, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 431, 434, 435, 448, 450, 455, 457, 463, 466, 469, 472, 480, 482, 504, 516, 522, 527, 529, 533, 535, 537, 539, 543, 546, 548, 550, 561, 562, 566, 568, 572, 574, 577, 579, 606, 608, 623, 624, 625, 626, 628, 630, 631, 633, 634, 638, 639, 644, 645, 646, 647, 648, 649, 650, 654, 655, 657, 667, 668, 669, 671, 676, 677, 679, 685, 686, 692, 693, 694, 698, 699, 700, 710, 713, 715, 716, 719, 720, 725, 728, 730, 731, 743, 751, 756, 759, 769, 809, 811, 817, 831, 847, 851, 855, 875, 949, 956, 957, 960, 963, 964, 965, 966, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1048, 1111, 1116, 1160, 1161, 1178, 1179, 1232], "hi": [1, 1252], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 20, 624, 644, 651, 652, 653, 664, 881, 1065, 1154, 1174, 1181, 1182, 1183, 1194, 1241, 1244], "select": [1, 8, 34, 47, 48, 49, 50, 88, 126, 128, 129, 130, 131, 132, 134, 136, 140, 142, 148, 157, 170, 210, 211, 215, 218, 229, 232, 241, 247, 253, 255, 268, 274, 277, 284, 307, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 341, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 381, 383, 385, 386, 387, 388, 391, 393, 394, 402, 408, 409, 411, 414, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 436, 438, 439, 440, 441, 442, 443, 447, 449, 451, 454, 458, 459, 461, 462, 463, 464, 467, 468, 471, 477, 478, 479, 481, 492, 493, 520, 523, 524, 525, 526, 528, 529, 530, 531, 532, 535, 545, 547, 549, 550, 552, 554, 556, 559, 560, 564, 565, 566, 567, 569, 570, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 598, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 629, 630, 631, 632, 633, 635, 656, 667, 669, 672, 674, 675, 677, 678, 680, 681, 682, 683, 684, 687, 689, 691, 694, 695, 696, 699, 701, 702, 703, 704, 707, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 732, 734, 736, 737, 739, 740, 743, 744, 748, 749, 750, 751, 752, 754, 758, 765, 769, 784, 793, 814, 826, 834, 839, 841, 847, 853, 855, 875, 881, 984, 1020, 1058, 1135, 1137, 1148, 1167, 1186, 1232, 1240, 1241, 1242, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258], "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 110, 116, 117, 118, 119, 120, 121, 122, 123, 128, 137, 138, 142, 148, 155, 158, 162, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 244, 246, 251, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 784, 785, 787, 788, 790, 791, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 883, 884, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1104, 1105, 1107, 1108, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1141, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1202, 1204, 1205, 1206, 1208, 1209, 1210, 1215, 1217, 1218, 1219, 1220, 1221, 1223, 1232, 1240, 1241, 1242, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257], "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 93, 116, 117, 118, 119, 120, 121, 122, 123, 128, 131, 133, 137, 138, 139, 142, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 316, 317, 318, 319, 321, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 481, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 546, 547, 548, 549, 550, 551, 553, 555, 557, 558, 561, 564, 565, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 619, 620, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 658, 663, 667, 668, 669, 670, 671, 673, 677, 678, 681, 682, 683, 685, 686, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 883, 884, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 963, 965, 966, 967, 969, 970, 971, 973, 975, 976, 977, 982, 984, 985, 986, 987, 989, 990, 991, 993, 994, 996, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1172, 1173, 1174, 1175, 1176, 1180, 1187, 1188, 1193, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1240, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 128, 129, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 158, 162, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 642, 643, 648, 649, 650, 651, 652, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 765, 769, 784, 785, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1160, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1178, 1179, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1236, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 93, 116, 117, 118, 119, 120, 121, 122, 123, 128, 131, 137, 138, 142, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 315, 316, 317, 318, 320, 322, 323, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 743, 747, 748, 749, 750, 751, 752, 754, 757, 758, 759, 765, 769, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 880, 881, 883, 884, 887, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 932, 934, 935, 936, 937, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 959, 961, 962, 964, 966, 969, 970, 971, 973, 975, 976, 977, 978, 979, 983, 984, 985, 988, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1160, 1162, 1163, 1164, 1166, 1167, 1169, 1172, 1173, 1178, 1179, 1181, 1182, 1183, 1186, 1187, 1189, 1190, 1191, 1192, 1194, 1195, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1236, 1240, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259], "column_0": [1, 218, 272, 307], "register_dataframe_namespac": [1, 49, 50, 51], "split": [1, 36, 48, 213, 307, 629, 648, 649, 1159, 1178, 1179], "splitfram": [1, 48], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 91, 117, 118, 119, 120, 121, 122, 123, 129, 130, 131, 142, 155, 156, 158, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 592, 594, 596, 598, 599, 601, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 747, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 765, 769, 809, 831, 835, 847, 848, 860, 863, 871, 875, 881, 984, 1008, 1167, 1178, 1179, 1209, 1232, 1240, 1241, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1258, 1259], "_df": [1, 48], "by_alternate_row": 1, "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 116, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 157, 158, 162, 176, 181, 184, 186, 187, 191, 197, 199, 200, 204, 212, 228, 231, 240, 241, 242, 243, 246, 254, 261, 262, 270, 272, 273, 274, 275, 281, 286, 287, 307, 317, 344, 355, 356, 357, 382, 389, 442, 448, 453, 462, 470, 528, 529, 539, 540, 567, 574, 580, 582, 587, 588, 590, 592, 594, 596, 599, 601, 603, 618, 619, 629, 631, 647, 667, 669, 676, 695, 697, 699, 711, 714, 716, 724, 726, 729, 731, 749, 751, 757, 769, 793, 799, 801, 805, 808, 809, 833, 840, 846, 847, 851, 853, 856, 857, 875, 880, 881, 908, 919, 920, 921, 936, 949, 955, 1006, 1012, 1017, 1020, 1022, 1027, 1028, 1036, 1093, 1111, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1154, 1159, 1161, 1174, 1177, 1212, 1215, 1232, 1240, 1244, 1248, 1249, 1258, 1259], "with_row_index": [1, 240, 283, 307, 589, 591, 593, 595, 597, 600, 602, 604, 769, 854, 875, 1135, 1232], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 91, 116, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 153, 154, 155, 156, 158, 161, 162, 163, 171, 172, 175, 176, 181, 182, 183, 187, 191, 192, 195, 196, 198, 199, 210, 211, 212, 214, 215, 218, 220, 222, 224, 225, 227, 231, 233, 237, 241, 242, 243, 245, 246, 247, 248, 254, 255, 258, 261, 263, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 292, 307, 311, 318, 356, 360, 361, 363, 364, 366, 382, 417, 420, 440, 446, 466, 473, 474, 475, 476, 520, 529, 534, 536, 538, 540, 543, 567, 574, 583, 619, 631, 632, 642, 643, 667, 669, 670, 678, 683, 687, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 707, 708, 717, 718, 723, 724, 727, 732, 733, 734, 735, 736, 737, 738, 739, 742, 745, 746, 747, 748, 750, 751, 752, 753, 754, 758, 759, 765, 769, 785, 787, 792, 793, 797, 798, 801, 805, 808, 813, 814, 822, 823, 829, 832, 833, 834, 835, 840, 841, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 862, 875, 879, 880, 881, 884, 920, 937, 949, 987, 990, 1005, 1086, 1111, 1116, 1160, 1161, 1162, 1172, 1173, 1197, 1200, 1208, 1209, 1214, 1221, 1232, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1259], "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 128, 129, 133, 138, 142, 158, 173, 188, 194, 200, 202, 212, 213, 217, 218, 242, 243, 244, 251, 256, 259, 262, 264, 278, 290, 292, 301, 307, 323, 351, 356, 365, 366, 381, 385, 389, 391, 393, 399, 419, 431, 443, 446, 454, 460, 482, 490, 496, 498, 508, 509, 513, 516, 518, 520, 522, 568, 571, 580, 599, 600, 603, 604, 607, 610, 616, 621, 634, 638, 639, 642, 648, 649, 651, 652, 657, 659, 673, 677, 678, 679, 683, 684, 686, 701, 703, 712, 713, 714, 715, 721, 723, 741, 744, 745, 746, 750, 754, 758, 760, 769, 788, 790, 807, 809, 810, 817, 837, 842, 844, 849, 860, 862, 871, 875, 881, 915, 920, 928, 937, 948, 951, 955, 957, 959, 965, 989, 1001, 1013, 1014, 1021, 1026, 1048, 1056, 1062, 1064, 1074, 1075, 1079, 1084, 1086, 1107, 1129, 1131, 1134, 1140, 1147, 1151, 1164, 1168, 1169, 1172, 1178, 1179, 1187, 1189, 1204, 1210, 1217, 1221, 1222, 1232, 1242, 1243, 1249, 1252, 1253, 1256, 1259], "filter": [1, 48, 132, 142, 143, 148, 183, 207, 208, 209, 214, 233, 293, 307, 538, 540, 628, 650, 685, 709, 712, 719, 748, 759, 769, 798, 802, 811, 813, 835, 841, 863, 875, 881, 1137, 1232, 1246], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 142, 156, 158, 191, 199, 200, 208, 210, 218, 229, 232, 233, 240, 241, 246, 254, 265, 270, 274, 275, 281, 286, 307, 311, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 461, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 552, 554, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 695, 696, 698, 699, 700, 702, 704, 707, 709, 712, 715, 719, 720, 721, 722, 723, 724, 732, 734, 736, 737, 739, 742, 743, 748, 750, 752, 754, 755, 758, 759, 769, 805, 808, 809, 811, 826, 831, 833, 840, 841, 847, 851, 853, 856, 875, 881, 981, 984, 1058, 1135, 1137, 1167, 1186, 1232, 1259], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 128, 129, 130, 131, 133, 134, 136, 137, 139, 140, 142, 145, 146, 147, 148, 150, 155, 156, 157, 158, 159, 160, 162, 165, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 189, 190, 193, 194, 197, 198, 199, 200, 201, 205, 206, 210, 212, 213, 214, 216, 218, 220, 221, 222, 223, 227, 228, 229, 230, 233, 234, 235, 238, 240, 242, 243, 244, 245, 246, 248, 253, 254, 255, 256, 258, 263, 264, 265, 266, 267, 268, 270, 272, 275, 277, 278, 281, 283, 284, 286, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 315, 317, 318, 320, 324, 325, 326, 327, 328, 329, 332, 333, 334, 337, 338, 340, 343, 353, 356, 358, 367, 369, 370, 372, 373, 374, 381, 382, 383, 387, 388, 389, 395, 396, 400, 403, 405, 406, 410, 416, 418, 423, 424, 426, 427, 431, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 449, 450, 452, 454, 455, 457, 459, 461, 464, 465, 468, 471, 473, 474, 475, 476, 478, 480, 485, 486, 489, 492, 495, 496, 497, 503, 504, 516, 520, 522, 523, 524, 525, 527, 528, 530, 531, 532, 535, 539, 544, 545, 546, 548, 550, 559, 560, 561, 562, 563, 565, 566, 568, 571, 572, 574, 575, 576, 577, 581, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615, 616, 620, 621, 622, 625, 629, 630, 631, 633, 670, 671, 672, 674, 675, 676, 679, 684, 685, 687, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 705, 712, 716, 719, 725, 726, 728, 731, 734, 735, 736, 740, 742, 743, 748, 755, 756, 757, 758, 759, 760, 765, 769, 784, 787, 788, 789, 792, 794, 795, 797, 799, 800, 803, 804, 807, 808, 809, 812, 813, 816, 818, 821, 825, 827, 828, 832, 833, 838, 840, 841, 842, 849, 851, 853, 854, 855, 856, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 875, 881, 888, 889, 890, 891, 892, 893, 894, 896, 898, 901, 907, 917, 920, 922, 929, 932, 934, 935, 937, 940, 941, 942, 948, 949, 950, 952, 953, 954, 955, 962, 966, 970, 971, 972, 974, 976, 980, 986, 993, 994, 996, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1015, 1019, 1021, 1024, 1025, 1027, 1029, 1030, 1034, 1037, 1039, 1040, 1041, 1042, 1045, 1046, 1051, 1052, 1055, 1058, 1061, 1062, 1063, 1069, 1070, 1082, 1086, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1102, 1103, 1107, 1111, 1112, 1113, 1117, 1121, 1122, 1124, 1125, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1136, 1144, 1145, 1146, 1147, 1150, 1151, 1152, 1155, 1159, 1160, 1161, 1163, 1167, 1205, 1206, 1208, 1211, 1213, 1214, 1215, 1216, 1220, 1222, 1232, 1240, 1245, 1247, 1248, 1251, 1252, 1254, 1258, 1259], "drop": [1, 119, 182, 183, 218, 273, 281, 307, 385, 387, 388, 490, 491, 574, 769, 798, 846, 851, 875, 951, 953, 954, 1056, 1057, 1111, 1232, 1255], "aaa": [1, 36, 307, 623, 633, 667, 669, 881, 1153, 1163], "bbb": [1, 36, 307, 667, 669, 881], "ccc": [1, 36, 307, 667, 669, 881, 1252], "ddd": [1, 36, 307, 667, 669], "eee": [1, 36, 307, 881], "fff": 1, "txt": [1, 12, 142, 623, 633, 1163], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 128, 129, 130, 131, 142, 151, 152, 153, 154, 155, 162, 166, 171, 172, 175, 184, 186, 193, 198, 199, 200, 215, 231, 233, 240, 243, 245, 246, 247, 248, 254, 264, 265, 271, 272, 275, 277, 281, 282, 285, 286, 307, 316, 339, 344, 361, 362, 363, 366, 411, 415, 417, 420, 428, 437, 440, 448, 452, 466, 499, 541, 542, 567, 571, 581, 586, 589, 591, 593, 595, 597, 600, 602, 604, 619, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 670, 678, 686, 688, 690, 695, 698, 699, 700, 708, 710, 711, 713, 714, 720, 733, 735, 738, 747, 751, 753, 756, 757, 759, 769, 781, 785, 787, 792, 799, 800, 808, 809, 814, 831, 832, 833, 834, 835, 840, 845, 851, 852, 856, 875, 880, 881, 908, 924, 925, 926, 931, 981, 985, 987, 990, 998, 1008, 1031, 1065, 1117, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1210, 1211, 1232, 1240, 1248, 1250, 1253, 1255, 1259], "register_lazyframe_namespac": [1, 48, 49, 51], "dtypeoper": [1, 50], "ldf": [1, 856, 857, 859, 861, 864, 865, 866, 867, 868, 869, 870], "_ldf": 1, "upcast_integer_typ": [1, 50], "with_column": [1, 12, 50, 53, 54, 200, 232, 240, 270, 275, 282, 307, 316, 318, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 356, 361, 362, 367, 371, 376, 377, 378, 379, 380, 382, 385, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 429, 430, 432, 434, 435, 437, 444, 445, 450, 455, 457, 459, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 529, 546, 548, 550, 551, 553, 555, 557, 558, 561, 562, 563, 567, 568, 571, 572, 574, 577, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 610, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 661, 662, 664, 665, 666, 668, 670, 671, 676, 679, 686, 688, 690, 693, 697, 698, 700, 705, 706, 708, 709, 711, 712, 716, 726, 730, 733, 735, 738, 749, 753, 755, 757, 759, 765, 769, 790, 791, 800, 802, 809, 811, 826, 827, 831, 838, 852, 875, 881, 949, 984, 1111, 1232], "tp": [1, 50], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 151, 152, 153, 154, 193, 200, 232, 240, 265, 266, 270, 281, 307, 322, 379, 380, 391, 417, 420, 431, 566, 571, 572, 579, 586, 636, 637, 666, 672, 676, 700, 749, 769, 809, 826, 831, 851, 875, 879, 881, 933, 946, 947, 957, 987, 990, 1001, 1115, 1166, 1167, 1196, 1203, 1209, 1213, 1215, 1216, 1232], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 128, 137, 175, 184, 193, 200, 232, 240, 245, 248, 260, 267, 307, 337, 338, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 379, 380, 421, 422, 423, 424, 425, 426, 427, 431, 437, 440, 528, 529, 552, 554, 556, 571, 579, 586, 636, 661, 672, 676, 692, 717, 725, 726, 729, 744, 751, 769, 792, 799, 809, 826, 831, 832, 835, 875, 881, 901, 902, 904, 905, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 922, 946, 947, 991, 992, 993, 994, 995, 996, 997, 1001, 1003, 1008, 1093, 1115, 1191, 1203, 1213, 1214, 1215, 1216, 1232], "int8": [1, 50, 76, 193, 307, 355, 356, 379, 380, 397, 400, 406, 407, 413, 416, 429, 430, 519, 672, 741, 744, 760, 769, 880, 919, 920, 946, 947, 951, 963, 966, 976, 977, 983, 986, 999, 1000, 1085, 1119, 1203, 1213, 1220, 1232], "int16": [1, 50, 270, 307, 379, 380, 412, 672, 769, 881, 946, 947, 982, 1203, 1210, 1232], "int32": [1, 50, 55, 116, 119, 155, 157, 158, 200, 213, 240, 265, 307, 342, 343, 345, 367, 392, 402, 403, 404, 405, 410, 432, 437, 586, 676, 744, 769, 809, 831, 875, 881, 903, 906, 907, 909, 958, 968, 972, 973, 974, 980, 1002, 1008, 1092, 1215, 1216, 1232], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 133, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 217, 219, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 307, 316, 318, 319, 321, 322, 332, 334, 339, 344, 359, 360, 361, 362, 363, 364, 366, 367, 375, 382, 386, 417, 420, 440, 442, 444, 445, 446, 448, 451, 458, 459, 462, 464, 465, 466, 468, 471, 473, 474, 475, 476, 481, 487, 492, 499, 509, 510, 511, 512, 528, 529, 534, 547, 550, 551, 552, 553, 554, 555, 556, 564, 565, 567, 571, 574, 577, 581, 583, 585, 611, 617, 619, 626, 629, 633, 636, 642, 643, 667, 668, 678, 681, 685, 687, 688, 689, 690, 691, 695, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 716, 717, 718, 719, 720, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 746, 748, 750, 751, 752, 753, 754, 758, 769, 784, 785, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 884, 887, 908, 923, 924, 925, 926, 927, 931, 932, 933, 949, 952, 987, 990, 1004, 1005, 1006, 1013, 1016, 1031, 1036, 1053, 1075, 1076, 1077, 1078, 1111, 1116, 1156, 1159, 1163, 1166, 1172, 1173, 1197, 1199, 1200, 1202, 1214, 1219, 1232, 1242, 1243, 1245, 1246, 1247, 1248, 1252, 1254, 1256], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 116, 117, 118, 119, 120, 121, 122, 123, 142, 150, 162, 169, 170, 171, 172, 173, 174, 178, 180, 183, 187, 188, 189, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 227, 228, 229, 231, 232, 233, 234, 240, 242, 243, 250, 251, 254, 258, 259, 260, 261, 262, 263, 266, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 315, 316, 317, 318, 320, 322, 334, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 358, 359, 365, 366, 367, 369, 370, 371, 375, 376, 379, 380, 381, 383, 386, 393, 396, 397, 404, 412, 413, 414, 415, 416, 417, 420, 422, 425, 427, 428, 430, 434, 435, 437, 441, 442, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 475, 476, 480, 481, 482, 489, 490, 491, 492, 493, 495, 496, 498, 506, 508, 509, 510, 511, 512, 513, 514, 518, 519, 524, 527, 528, 529, 546, 548, 550, 551, 553, 555, 557, 558, 561, 562, 563, 566, 567, 569, 570, 571, 572, 575, 577, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 610, 613, 617, 618, 619, 620, 623, 625, 631, 633, 634, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 654, 655, 656, 657, 661, 666, 667, 669, 670, 671, 673, 676, 677, 678, 679, 685, 686, 688, 690, 691, 693, 694, 695, 696, 698, 700, 701, 703, 705, 706, 707, 708, 709, 712, 713, 714, 716, 718, 719, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 765, 769, 784, 785, 787, 788, 789, 790, 791, 794, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 831, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 887, 889, 896, 903, 905, 906, 907, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 921, 922, 928, 935, 936, 938, 943, 948, 950, 952, 962, 966, 972, 973, 974, 976, 977, 978, 979, 980, 983, 984, 985, 987, 990, 992, 995, 997, 998, 999, 1000, 1005, 1008, 1012, 1013, 1015, 1016, 1020, 1021, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1044, 1048, 1055, 1056, 1057, 1058, 1059, 1064, 1068, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1085, 1099, 1102, 1103, 1104, 1107, 1108, 1109, 1113, 1114, 1117, 1118, 1121, 1125, 1127, 1128, 1129, 1130, 1131, 1134, 1136, 1140, 1141, 1144, 1147, 1148, 1149, 1153, 1155, 1161, 1163, 1164, 1168, 1169, 1170, 1171, 1176, 1178, 1179, 1184, 1185, 1186, 1187, 1191, 1196, 1197, 1200, 1202, 1204, 1210, 1213, 1215, 1217, 1223, 1232, 1236, 1240, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1257, 1258, 1259], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 117, 119, 121, 123, 133, 142, 169, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 187, 191, 193, 196, 197, 198, 199, 200, 202, 204, 205, 213, 214, 216, 217, 219, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 241, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 271, 275, 276, 278, 279, 281, 286, 289, 290, 291, 294, 295, 297, 300, 301, 307, 311, 316, 318, 319, 321, 339, 359, 366, 382, 446, 458, 466, 487, 499, 529, 535, 550, 551, 565, 567, 571, 574, 611, 648, 656, 678, 681, 688, 690, 691, 693, 694, 695, 698, 700, 701, 702, 703, 705, 706, 708, 718, 719, 720, 723, 724, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 752, 753, 754, 758, 765, 769, 785, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 805, 808, 809, 813, 816, 822, 825, 827, 829, 830, 832, 833, 838, 839, 840, 841, 845, 848, 851, 853, 856, 859, 860, 861, 864, 865, 867, 870, 871, 875, 879, 881, 932, 949, 1031, 1053, 1111, 1178, 1186, 1200, 1219, 1232, 1242, 1243, 1245, 1246, 1247, 1248, 1252], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 116, 119, 120, 121, 122, 123, 125, 129, 150, 151, 153, 156, 158, 162, 172, 173, 174, 179, 180, 187, 188, 189, 190, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 227, 228, 229, 231, 233, 234, 235, 240, 243, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 265, 266, 269, 270, 272, 275, 276, 277, 280, 281, 283, 284, 286, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 307, 310, 311, 316, 317, 320, 335, 336, 341, 342, 343, 345, 347, 351, 356, 358, 365, 366, 367, 370, 371, 381, 382, 383, 385, 386, 389, 392, 393, 394, 395, 396, 400, 403, 404, 405, 406, 410, 414, 416, 417, 418, 420, 421, 427, 431, 435, 437, 439, 440, 443, 445, 449, 450, 454, 455, 457, 460, 462, 464, 466, 469, 472, 473, 474, 475, 476, 480, 482, 489, 492, 493, 495, 496, 498, 501, 503, 504, 508, 509, 510, 511, 512, 513, 517, 518, 522, 528, 546, 548, 550, 562, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 599, 601, 602, 603, 604, 605, 608, 613, 619, 625, 633, 634, 637, 638, 639, 657, 661, 671, 673, 677, 678, 679, 691, 693, 694, 696, 697, 698, 699, 701, 703, 705, 706, 707, 708, 709, 710, 712, 715, 716, 717, 718, 719, 723, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 748, 750, 752, 753, 754, 758, 765, 769, 787, 788, 789, 790, 791, 795, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 831, 837, 838, 839, 840, 841, 842, 843, 844, 848, 850, 851, 854, 855, 856, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 875, 881, 887, 889, 893, 896, 899, 900, 903, 905, 906, 907, 909, 911, 915, 920, 921, 922, 928, 936, 938, 944, 948, 949, 950, 951, 952, 955, 958, 959, 960, 961, 962, 963, 973, 984, 986, 987, 988, 990, 991, 997, 999, 1000, 1001, 1005, 1008, 1010, 1012, 1013, 1014, 1022, 1026, 1027, 1029, 1031, 1035, 1038, 1048, 1055, 1058, 1059, 1064, 1067, 1070, 1074, 1075, 1076, 1077, 1078, 1079, 1083, 1084, 1088, 1092, 1099, 1104, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1123, 1124, 1126, 1127, 1130, 1134, 1136, 1141, 1144, 1147, 1150, 1155, 1163, 1164, 1167, 1168, 1187, 1191, 1204, 1211, 1213, 1216, 1217, 1220, 1223, 1232, 1243, 1245, 1247, 1248, 1251, 1252, 1254, 1258, 1259], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 116, 119, 120, 121, 122, 133, 137, 138, 150, 172, 175, 176, 180, 181, 182, 183, 184, 185, 187, 188, 191, 194, 195, 196, 197, 198, 200, 202, 204, 205, 206, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 290, 300, 301, 307, 310, 311, 316, 320, 341, 342, 343, 345, 351, 359, 366, 367, 379, 380, 386, 389, 393, 397, 407, 411, 412, 413, 423, 424, 426, 429, 430, 433, 435, 444, 445, 450, 451, 454, 460, 462, 464, 482, 483, 484, 493, 496, 509, 510, 511, 512, 516, 528, 529, 562, 566, 573, 576, 577, 578, 582, 584, 586, 588, 590, 592, 594, 596, 599, 601, 602, 603, 608, 619, 625, 629, 638, 639, 661, 671, 673, 678, 686, 688, 690, 697, 705, 706, 707, 709, 712, 716, 719, 725, 730, 731, 735, 748, 752, 765, 769, 787, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 809, 810, 812, 813, 815, 817, 818, 822, 825, 827, 829, 831, 832, 833, 835, 837, 838, 839, 840, 841, 844, 847, 850, 851, 854, 855, 860, 870, 871, 875, 881, 903, 905, 906, 907, 909, 915, 936, 940, 942, 946, 947, 952, 955, 981, 1000, 1005, 1012, 1022, 1027, 1049, 1050, 1059, 1062, 1075, 1076, 1077, 1078, 1082, 1099, 1110, 1113, 1114, 1118, 1120, 1125, 1127, 1129, 1131, 1136, 1141, 1155, 1159, 1168, 1191, 1203, 1213, 1232, 1243, 1245, 1247, 1248, 1251, 1256, 1257, 1259], "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 137, 138, 150, 165, 172, 175, 176, 177, 179, 181, 182, 184, 185, 187, 191, 194, 196, 200, 202, 204, 206, 214, 217, 219, 221, 223, 225, 226, 230, 233, 235, 237, 238, 240, 241, 243, 244, 245, 246, 248, 251, 253, 256, 257, 258, 259, 264, 266, 267, 268, 275, 277, 278, 279, 307, 311, 316, 320, 342, 343, 345, 354, 380, 392, 393, 397, 404, 412, 414, 415, 428, 430, 441, 454, 460, 464, 465, 482, 496, 509, 510, 511, 512, 566, 577, 582, 586, 601, 602, 619, 633, 660, 673, 697, 705, 706, 709, 712, 713, 719, 724, 730, 731, 748, 752, 769, 787, 792, 793, 795, 797, 799, 801, 805, 807, 809, 810, 812, 813, 817, 823, 825, 828, 829, 831, 832, 833, 837, 841, 844, 875, 881, 893, 906, 907, 909, 918, 958, 959, 963, 968, 973, 984, 985, 998, 1000, 1011, 1030, 1045, 1062, 1075, 1076, 1077, 1078, 1117, 1118, 1130, 1136, 1163, 1190, 1232, 1245, 1247, 1248, 1251, 1259], "float32": [1, 10, 33, 42, 50, 172, 193, 264, 265, 266, 270, 307, 437, 729, 769, 787, 875, 881, 1008, 1033, 1092, 1211, 1213, 1216, 1232], "lazi": [1, 55, 142, 158, 215, 232, 233, 255, 307, 529, 721, 741, 744, 760, 769, 795, 813, 814, 853, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 875, 881, 1240, 1241, 1242, 1243, 1245, 1256, 1259], "i16": [1, 50, 397, 412, 430, 611, 769, 881, 982, 1210, 1232, 1259], "i32": [1, 50, 116, 119, 123, 155, 157, 158, 246, 255, 307, 342, 343, 345, 367, 392, 400, 402, 403, 404, 405, 406, 410, 432, 611, 697, 759, 769, 833, 875, 906, 907, 909, 958, 968, 972, 973, 974, 980, 1002, 1092, 1232, 1249, 1253, 1259], "f32": [1, 50, 172, 255, 264, 270, 307, 611, 748, 769, 787, 841, 875, 881, 1092, 1232], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 137, 138, 142, 171, 172, 173, 174, 176, 180, 181, 183, 184, 187, 188, 190, 191, 194, 195, 197, 198, 199, 200, 202, 204, 205, 207, 209, 211, 214, 215, 217, 218, 219, 224, 225, 226, 231, 232, 233, 234, 237, 238, 239, 240, 244, 246, 251, 253, 254, 255, 257, 259, 261, 268, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 297, 300, 301, 307, 316, 318, 322, 332, 337, 338, 340, 341, 346, 348, 349, 350, 351, 352, 354, 357, 359, 365, 366, 371, 377, 378, 379, 380, 381, 382, 385, 386, 399, 419, 421, 422, 423, 424, 425, 426, 427, 437, 440, 442, 443, 445, 446, 447, 448, 450, 451, 453, 454, 456, 460, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 479, 482, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 526, 528, 529, 546, 547, 548, 550, 551, 553, 555, 557, 558, 563, 567, 568, 571, 572, 573, 574, 577, 578, 579, 581, 582, 583, 584, 585, 586, 607, 609, 610, 611, 612, 613, 617, 618, 619, 634, 642, 643, 657, 661, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 680, 682, 685, 692, 695, 698, 700, 705, 706, 707, 708, 709, 712, 715, 716, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 740, 743, 747, 748, 749, 752, 753, 754, 755, 759, 765, 769, 785, 787, 788, 790, 791, 796, 797, 798, 801, 802, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 822, 823, 824, 826, 827, 829, 830, 831, 833, 835, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 851, 854, 855, 856, 857, 859, 860, 861, 863, 864, 867, 870, 871, 875, 881, 883, 884, 887, 905, 910, 912, 914, 915, 916, 918, 921, 928, 938, 939, 944, 945, 946, 947, 948, 949, 965, 989, 991, 992, 993, 994, 995, 996, 997, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1026, 1028, 1036, 1048, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1068, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1093, 1098, 1104, 1111, 1114, 1115, 1116, 1117, 1118, 1120, 1123, 1126, 1130, 1134, 1135, 1137, 1140, 1141, 1143, 1144, 1148, 1149, 1191, 1197, 1202, 1204, 1209, 1217, 1218, 1223, 1232, 1240, 1242, 1246, 1247, 1248, 1249, 1251, 1254, 1256, 1257, 1259], "register_series_namespac": [1, 48, 49, 50], "math": [1, 10, 51, 383, 769, 940, 942, 1145, 1205, 1232, 1250, 1254, 1255], "mathshortcut": [1, 51], "": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 128, 129, 130, 131, 133, 139, 143, 144, 147, 148, 162, 171, 172, 183, 186, 191, 194, 199, 200, 205, 211, 214, 215, 224, 231, 233, 238, 240, 243, 246, 247, 254, 263, 266, 271, 273, 274, 275, 276, 281, 282, 307, 344, 366, 367, 394, 399, 417, 420, 440, 446, 450, 478, 499, 528, 529, 539, 547, 559, 560, 567, 568, 579, 585, 619, 623, 630, 631, 632, 633, 634, 642, 643, 646, 647, 649, 656, 657, 658, 659, 663, 664, 667, 669, 670, 678, 687, 688, 689, 690, 695, 701, 704, 707, 708, 717, 718, 720, 721, 727, 730, 731, 732, 733, 735, 737, 738, 740, 747, 749, 751, 752, 753, 759, 765, 769, 785, 787, 798, 808, 809, 814, 822, 833, 834, 840, 845, 846, 847, 848, 851, 852, 863, 875, 881, 883, 884, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 967, 969, 970, 971, 973, 974, 975, 978, 979, 982, 985, 986, 987, 990, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1232, 1236, 1240, 1243, 1246, 1253], "_": [1, 47, 51, 233, 263, 267, 307, 344, 499, 624, 631, 638, 639, 644, 647, 648, 838, 875, 932, 1154, 1161, 1168, 1169, 1174, 1178, 1208, 1232], "squar": [1, 51, 293, 478, 582, 620, 769, 863, 1046, 1118, 1150, 1232, 1251], "cube": [1, 51, 369, 572, 769, 934, 1232, 1251], "s2": [1, 46, 84, 85, 153, 154, 193, 307, 920, 936, 952, 1005, 1022, 1036, 1045, 1053, 1086, 1099, 1114, 1223, 1232], "renam": [1, 119, 128, 129, 165, 199, 246, 247, 281, 282, 286, 288, 307, 318, 452, 543, 544, 550, 551, 552, 553, 555, 557, 558, 669, 670, 747, 751, 769, 808, 833, 834, 851, 852, 856, 858, 875, 884, 1163, 1200, 1209, 1232], "n2": [1, 356], "s3": [1, 35, 132, 143, 144, 147, 148, 307, 920, 1086, 1232], "n3": 1, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 137, 138, 150, 172, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 191, 194, 196, 198, 202, 204, 211, 214, 215, 217, 218, 219, 221, 223, 226, 235, 237, 238, 240, 241, 243, 244, 245, 246, 248, 251, 253, 255, 256, 257, 259, 264, 266, 267, 268, 275, 278, 279, 281, 307, 320, 322, 334, 342, 343, 345, 377, 380, 381, 393, 454, 461, 464, 465, 490, 492, 496, 509, 510, 511, 512, 548, 566, 572, 582, 583, 587, 611, 617, 619, 640, 641, 656, 686, 691, 697, 701, 703, 706, 708, 716, 718, 723, 724, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 753, 754, 758, 769, 787, 792, 793, 795, 797, 798, 799, 801, 805, 807, 810, 813, 817, 818, 827, 829, 832, 833, 837, 841, 844, 851, 875, 881, 906, 907, 909, 942, 948, 968, 1027, 1030, 1045, 1056, 1058, 1062, 1075, 1076, 1077, 1078, 1107, 1118, 1121, 1122, 1125, 1127, 1129, 1131, 1170, 1171, 1186, 1232, 1240, 1245, 1247, 1248, 1251, 1252, 1253, 1259], "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 150, 177, 179, 193, 202, 206, 217, 218, 233, 240, 242, 243, 246, 258, 259, 275, 279, 281, 300, 307, 316, 320, 322, 334, 342, 343, 345, 350, 352, 377, 380, 383, 393, 446, 454, 464, 470, 490, 496, 507, 515, 550, 566, 576, 582, 586, 587, 598, 601, 602, 613, 617, 631, 660, 668, 670, 699, 705, 706, 709, 712, 724, 757, 769, 795, 810, 812, 817, 831, 833, 844, 851, 870, 875, 881, 901, 902, 906, 907, 909, 914, 916, 950, 963, 972, 974, 980, 985, 998, 999, 1036, 1045, 1056, 1062, 1073, 1081, 1118, 1122, 1128, 1130, 1132, 1144, 1161, 1190, 1199, 1232, 1240, 1245, 1248], "27": [1, 51, 265, 300, 307, 380, 407, 413, 429, 670, 769, 870, 881, 1211, 1232, 1258, 1259], "16": [1, 36, 49, 68, 78, 150, 164, 179, 200, 240, 281, 307, 377, 380, 464, 548, 572, 586, 661, 670, 705, 715, 716, 719, 769, 795, 809, 831, 838, 851, 875, 881, 985, 998, 1107, 1145, 1191, 1205, 1232, 1251, 1252], "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 149, 169, 270, 307, 374, 548, 572, 769, 1107, 1232, 1251], "25": [1, 27, 36, 51, 123, 179, 200, 215, 240, 265, 270, 277, 281, 307, 385, 397, 398, 412, 415, 428, 430, 437, 572, 574, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 679, 712, 713, 714, 715, 721, 731, 756, 757, 769, 795, 809, 814, 820, 831, 849, 851, 875, 881, 950, 951, 964, 985, 998, 1004, 1008, 1027, 1107, 1111, 1232, 1247, 1251, 1257], "125": [1, 36, 51, 307, 316, 572, 748, 769, 841, 875, 1107, 1232], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 180, 307, 384, 452, 769, 796, 875, 1256], "cfg": [2, 4, 17, 167], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1240, 1241, 1242, 1243, 1244, 1245, 1256], "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 128, 129, 130, 133, 134, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 176, 183, 192, 199, 201, 212, 215, 222, 224, 242, 244, 246, 248, 253, 258, 263, 265, 266, 270, 272, 273, 275, 276, 281, 307, 319, 321, 343, 344, 356, 371, 382, 414, 431, 459, 470, 495, 497, 499, 508, 509, 510, 511, 512, 514, 520, 528, 529, 535, 541, 571, 574, 581, 587, 588, 590, 592, 594, 596, 599, 601, 603, 607, 612, 616, 617, 622, 635, 636, 642, 643, 646, 651, 652, 653, 654, 655, 656, 658, 659, 663, 683, 687, 689, 692, 696, 700, 710, 711, 712, 713, 714, 715, 725, 726, 729, 741, 744, 745, 746, 751, 756, 757, 759, 760, 769, 781, 790, 791, 798, 800, 808, 813, 814, 818, 822, 833, 835, 839, 846, 848, 851, 863, 875, 879, 885, 886, 907, 908, 920, 924, 938, 949, 984, 1001, 1018, 1025, 1036, 1043, 1061, 1063, 1065, 1074, 1075, 1076, 1077, 1078, 1080, 1086, 1093, 1111, 1117, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1134, 1135, 1136, 1143, 1147, 1148, 1152, 1165, 1166, 1172, 1173, 1176, 1181, 1182, 1183, 1186, 1188, 1189, 1193, 1213, 1221, 1232, 1255, 1259], "previous": [2, 3], "save": [2, 3, 6, 200, 215, 240, 277, 307, 390, 398, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 715, 756, 757, 765, 769, 781, 809, 814, 831, 875, 964, 981, 985, 998], "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 128, 130, 131, 132, 133, 134, 136, 140, 142, 143, 144, 145, 147, 148, 150, 155, 156, 157, 158, 161, 162, 163, 200, 210, 215, 224, 255, 261, 272, 276, 307, 389, 478, 535, 541, 587, 588, 590, 592, 594, 596, 599, 601, 603, 616, 624, 644, 646, 683, 751, 759, 769, 781, 809, 813, 814, 822, 841, 848, 875, 881, 955, 1046, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1147, 1154, 1174, 1176, 1209, 1221, 1232, 1248, 1252], "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 179, 180, 181, 186, 188, 192, 198, 200, 212, 213, 214, 215, 216, 224, 233, 237, 240, 241, 243, 244, 246, 247, 255, 263, 270, 272, 273, 275, 276, 277, 283, 307, 310, 311, 356, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 440, 450, 452, 464, 478, 496, 508, 520, 529, 541, 559, 560, 562, 567, 568, 571, 574, 576, 586, 587, 589, 591, 593, 595, 597, 600, 602, 604, 607, 619, 630, 631, 634, 636, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 681, 693, 694, 697, 698, 709, 710, 711, 712, 713, 714, 715, 729, 744, 748, 755, 756, 757, 765, 768, 769, 787, 795, 796, 797, 802, 809, 813, 814, 822, 829, 831, 833, 834, 841, 846, 848, 853, 854, 875, 881, 920, 949, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1008, 1013, 1046, 1062, 1074, 1086, 1102, 1103, 1104, 1107, 1111, 1122, 1134, 1160, 1161, 1164, 1166, 1176, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1193, 1208, 1223, 1232, 1240, 1241, 1242, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259], "json": [2, 3, 5, 6, 39, 40, 137, 138, 144, 146, 180, 248, 307, 384, 452, 541, 544, 636, 637, 668, 769, 781, 796, 835, 875, 879, 1166, 1167, 1199], "paramet": [2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 99, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 169, 171, 172, 173, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 210, 212, 213, 214, 215, 217, 218, 222, 224, 225, 228, 229, 231, 232, 233, 235, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 290, 292, 293, 299, 301, 307, 316, 318, 319, 320, 321, 322, 332, 339, 340, 343, 344, 351, 352, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 391, 393, 394, 399, 411, 414, 415, 416, 417, 419, 420, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 465, 466, 470, 478, 480, 482, 487, 488, 489, 490, 492, 495, 496, 497, 498, 499, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 527, 528, 529, 535, 541, 542, 546, 548, 551, 552, 553, 554, 555, 556, 561, 562, 566, 567, 568, 571, 572, 574, 575, 577, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 669, 670, 671, 673, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 785, 787, 788, 790, 791, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 817, 818, 822, 823, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 860, 862, 863, 869, 871, 875, 879, 880, 881, 884, 885, 886, 887, 896, 903, 904, 907, 908, 915, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 937, 938, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 957, 959, 960, 965, 981, 984, 985, 986, 987, 989, 990, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1031, 1043, 1046, 1048, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1063, 1064, 1065, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1087, 1093, 1107, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1196, 1197, 1200, 1204, 1208, 1209, 1210, 1211, 1213, 1214, 1217, 1218, 1221, 1222, 1223, 1232, 1240, 1241, 1242, 1243, 1245, 1249, 1253, 1256], "produc": [2, 3, 158, 162, 214, 307, 340, 489, 538, 730, 813, 818, 875, 904, 1055], "load_from_fil": [2, 5, 6], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 188, 248, 307, 384, 452, 541, 544, 554, 556, 769, 796, 835, 875, 879, 1013, 1232], "current": [2, 3, 5, 6, 30, 34, 123, 130, 131, 133, 140, 142, 147, 173, 174, 214, 215, 255, 265, 270, 307, 311, 398, 520, 568, 769, 788, 789, 813, 814, 841, 875, 881, 937, 939, 956, 964, 1107, 1211, 1216, 1232, 1242, 1256], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 248, 307, 384, 541, 544, 609, 637, 769, 796, 835, 838, 875, 879, 1138, 1167, 1232, 1259], "load": [3, 5, 6, 119, 121, 130, 132, 133, 139, 143, 144, 161, 163, 307, 769, 781, 810, 817, 875, 879, 1259], "reset": [4, 167], "default": [4, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 142, 145, 147, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 167, 179, 183, 186, 199, 200, 201, 212, 214, 215, 222, 224, 231, 233, 240, 241, 242, 243, 244, 248, 251, 255, 256, 258, 263, 265, 266, 270, 273, 275, 276, 278, 283, 292, 307, 318, 319, 321, 344, 351, 356, 382, 389, 414, 433, 435, 436, 438, 439, 459, 495, 499, 508, 513, 514, 516, 520, 522, 523, 528, 535, 538, 541, 559, 560, 562, 568, 574, 577, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 610, 612, 621, 622, 630, 635, 646, 651, 652, 653, 656, 658, 659, 661, 663, 683, 684, 687, 689, 692, 696, 697, 700, 701, 703, 710, 711, 712, 713, 714, 715, 718, 721, 725, 726, 727, 729, 741, 744, 750, 751, 756, 757, 758, 760, 769, 790, 791, 795, 798, 800, 808, 809, 813, 814, 822, 831, 835, 837, 841, 842, 846, 848, 849, 854, 862, 875, 881, 885, 886, 908, 915, 920, 938, 949, 950, 955, 984, 1004, 1006, 1007, 1009, 1010, 1025, 1061, 1065, 1074, 1079, 1080, 1086, 1102, 1103, 1107, 1111, 1113, 1117, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1134, 1140, 1143, 1151, 1152, 1153, 1160, 1163, 1165, 1176, 1181, 1182, 1183, 1186, 1188, 1189, 1191, 1193, 1211, 1213, 1221, 1222, 1232, 1251, 1259], "state": [4, 103, 705, 781, 800, 802, 827, 838, 875], "note": [4, 10, 20, 35, 36, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 128, 130, 131, 132, 133, 137, 138, 143, 144, 148, 151, 153, 156, 158, 162, 164, 167, 169, 175, 177, 179, 189, 200, 201, 210, 211, 212, 214, 215, 218, 229, 232, 233, 240, 241, 242, 243, 251, 255, 262, 265, 267, 270, 272, 276, 277, 281, 283, 284, 307, 351, 371, 379, 380, 387, 388, 394, 408, 409, 411, 415, 428, 437, 444, 450, 452, 459, 466, 473, 474, 492, 495, 513, 520, 529, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 616, 622, 623, 629, 630, 631, 632, 633, 634, 638, 639, 642, 643, 646, 651, 652, 653, 656, 657, 666, 667, 672, 679, 688, 690, 697, 705, 710, 711, 713, 714, 715, 719, 729, 741, 743, 744, 748, 756, 757, 759, 760, 765, 769, 780, 791, 795, 802, 803, 809, 810, 814, 817, 829, 831, 837, 838, 840, 841, 848, 851, 854, 855, 875, 881, 915, 938, 946, 947, 950, 953, 954, 960, 978, 979, 981, 985, 998, 1008, 1015, 1024, 1025, 1031, 1058, 1061, 1079, 1093, 1117, 1121, 1128, 1135, 1137, 1140, 1142, 1147, 1152, 1153, 1159, 1160, 1161, 1162, 1163, 1164, 1168, 1169, 1172, 1173, 1176, 1181, 1182, 1183, 1186, 1187, 1196, 1203, 1214, 1216, 1232, 1236, 1240, 1244, 1245, 1256], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 155, 158, 162, 167, 175, 179, 180, 183, 188, 199, 206, 212, 218, 229, 235, 241, 242, 243, 251, 273, 281, 288, 293, 299, 307, 316, 319, 320, 351, 371, 384, 417, 420, 434, 435, 443, 450, 452, 455, 457, 464, 480, 513, 527, 529, 544, 546, 548, 550, 551, 553, 555, 557, 558, 561, 562, 563, 566, 572, 575, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 610, 652, 653, 654, 655, 660, 666, 671, 679, 681, 686, 701, 731, 742, 761, 762, 764, 765, 769, 770, 771, 774, 775, 776, 777, 778, 781, 791, 795, 796, 798, 812, 828, 837, 846, 851, 858, 863, 869, 875, 880, 887, 915, 938, 950, 987, 990, 1013, 1014, 1029, 1079, 1093, 1112, 1113, 1127, 1140, 1190, 1196, 1215, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239, 1244], "oper": [4, 36, 46, 55, 85, 93, 96, 102, 110, 116, 118, 119, 120, 121, 122, 128, 130, 174, 188, 191, 193, 199, 205, 216, 218, 225, 229, 231, 232, 236, 238, 240, 243, 244, 249, 251, 260, 266, 267, 272, 275, 285, 286, 307, 316, 317, 320, 351, 376, 377, 378, 379, 380, 381, 434, 435, 450, 452, 455, 457, 480, 508, 509, 510, 511, 512, 513, 520, 527, 543, 546, 548, 549, 550, 551, 553, 555, 557, 558, 561, 562, 563, 566, 567, 572, 579, 607, 610, 671, 679, 686, 687, 689, 699, 700, 704, 716, 748, 759, 769, 781, 789, 793, 795, 799, 802, 808, 810, 813, 817, 822, 823, 832, 836, 837, 841, 850, 856, 875, 879, 915, 939, 943, 944, 945, 946, 947, 948, 1013, 1074, 1075, 1076, 1077, 1078, 1079, 1115, 1134, 1140, 1207, 1212, 1213, 1214, 1232, 1255], "remov": [4, 128, 129, 142, 169, 181, 263, 307, 440, 551, 651, 652, 653, 654, 655, 717, 769, 797, 875, 1181, 1182, 1183, 1184, 1185, 1208, 1232, 1258], "environ": [4, 30, 140, 142, 145, 147, 161, 164, 265, 307], "ani": [4, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 147, 148, 155, 157, 158, 160, 162, 167, 171, 177, 183, 188, 190, 191, 193, 210, 212, 213, 218, 222, 232, 241, 242, 243, 255, 258, 261, 262, 265, 266, 267, 270, 271, 273, 275, 276, 284, 307, 311, 316, 319, 320, 344, 365, 366, 367, 381, 382, 415, 416, 434, 435, 445, 446, 450, 453, 455, 457, 461, 470, 480, 487, 492, 499, 527, 528, 529, 535, 543, 546, 548, 550, 551, 553, 555, 557, 558, 561, 562, 566, 571, 574, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 622, 624, 635, 652, 653, 654, 655, 656, 658, 659, 661, 663, 671, 677, 678, 679, 686, 687, 688, 690, 700, 701, 702, 729, 731, 745, 746, 759, 769, 785, 790, 791, 798, 804, 805, 826, 841, 845, 846, 848, 855, 875, 879, 881, 885, 908, 928, 933, 948, 949, 985, 986, 1013, 1016, 1020, 1027, 1036, 1045, 1053, 1058, 1065, 1093, 1111, 1117, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1135, 1136, 1152, 1154, 1165, 1186, 1188, 1189, 1191, 1193, 1211, 1212, 1213, 1214, 1216, 1217, 1232, 1256, 1259], "local": [4, 35, 130, 132, 143, 144, 147, 307, 428, 569, 570, 769, 931, 932, 961, 962, 985, 988, 998, 1108, 1109, 1232], "non": [4, 33, 35, 36, 42, 47, 62, 63, 121, 149, 171, 178, 213, 224, 240, 246, 247, 251, 271, 272, 276, 281, 282, 307, 365, 366, 371, 375, 376, 389, 414, 466, 520, 528, 529, 568, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 625, 631, 638, 666, 670, 677, 678, 688, 690, 698, 699, 700, 702, 704, 708, 715, 733, 735, 738, 745, 746, 747, 751, 753, 769, 785, 794, 822, 831, 833, 834, 837, 845, 848, 851, 852, 875, 879, 881, 928, 938, 943, 950, 955, 984, 1031, 1086, 1093, 1107, 1117, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1140, 1155, 1161, 1168, 1196, 1213, 1217, 1232, 1249], "env": [4, 163], "back": [4, 47, 188, 200, 266, 267, 307, 541, 567, 664, 769, 809, 835, 875, 1013, 1194, 1214, 1232], "valu": [4, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 128, 129, 130, 131, 142, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 179, 183, 185, 188, 189, 190, 191, 198, 200, 201, 202, 206, 210, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 231, 233, 234, 235, 237, 240, 241, 242, 243, 244, 248, 251, 254, 256, 257, 258, 259, 261, 262, 266, 267, 271, 272, 275, 276, 277, 278, 285, 288, 289, 291, 294, 295, 297, 298, 307, 311, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 388, 393, 397, 407, 412, 429, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 513, 515, 516, 517, 518, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 549, 559, 560, 561, 562, 565, 567, 568, 571, 572, 574, 575, 577, 580, 581, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 613, 614, 615, 616, 618, 619, 620, 622, 623, 625, 626, 627, 628, 630, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 648, 649, 650, 657, 666, 668, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 695, 698, 700, 702, 704, 705, 706, 707, 708, 718, 719, 724, 725, 726, 727, 729, 732, 733, 734, 735, 736, 737, 738, 739, 743, 744, 745, 746, 752, 753, 759, 769, 784, 785, 795, 798, 803, 804, 805, 809, 811, 812, 813, 814, 819, 820, 821, 822, 824, 825, 828, 829, 831, 835, 837, 840, 842, 843, 845, 848, 849, 858, 859, 861, 864, 865, 867, 868, 875, 881, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 921, 922, 924, 925, 926, 927, 929, 935, 938, 940, 941, 942, 943, 948, 949, 950, 951, 953, 954, 959, 963, 977, 982, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1079, 1081, 1082, 1083, 1084, 1087, 1088, 1093, 1094, 1095, 1097, 1098, 1100, 1102, 1103, 1104, 1106, 1107, 1110, 1111, 1112, 1113, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1140, 1144, 1145, 1146, 1147, 1149, 1152, 1153, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1178, 1179, 1180, 1187, 1196, 1199, 1203, 1204, 1205, 1206, 1213, 1214, 1215, 1219, 1221, 1223, 1232, 1240, 1244, 1246, 1248, 1249, 1251, 1252, 1258, 1259], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 137, 138, 139, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 781, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1257, 1258], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 130, 131, 132, 143, 144, 157, 158, 160, 162, 171, 176, 183, 184, 200, 208, 213, 229, 265, 266, 270, 271, 276, 288, 307, 319, 321, 344, 363, 364, 384, 458, 470, 499, 529, 622, 628, 630, 632, 633, 635, 637, 649, 650, 666, 687, 688, 689, 690, 700, 704, 731, 769, 785, 793, 796, 798, 799, 809, 827, 845, 848, 858, 875, 879, 881, 885, 886, 908, 1023, 1065, 1099, 1152, 1158, 1160, 1162, 1163, 1165, 1167, 1179, 1180, 1196, 1207, 1213, 1232, 1248], "save_to_fil": 5, "json_str": [5, 137, 138], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 173, 178, 179, 183, 189, 190, 193, 198, 200, 201, 206, 210, 214, 215, 216, 218, 221, 224, 229, 230, 233, 240, 241, 244, 248, 251, 253, 254, 261, 263, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 288, 292, 307, 319, 321, 322, 334, 335, 336, 343, 344, 356, 359, 371, 375, 376, 377, 380, 382, 387, 388, 396, 411, 414, 435, 436, 437, 438, 439, 440, 443, 444, 445, 451, 458, 459, 461, 464, 465, 466, 473, 474, 475, 476, 481, 483, 484, 491, 497, 499, 501, 508, 509, 510, 511, 512, 514, 520, 528, 529, 538, 541, 542, 544, 549, 562, 563, 564, 565, 567, 568, 574, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 610, 611, 612, 613, 617, 618, 622, 623, 625, 627, 628, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 646, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 661, 663, 666, 667, 668, 669, 676, 683, 688, 689, 690, 692, 698, 700, 702, 704, 708, 710, 711, 712, 713, 714, 715, 717, 718, 725, 726, 727, 728, 729, 730, 731, 733, 735, 738, 744, 745, 746, 751, 753, 755, 756, 757, 759, 769, 788, 789, 791, 794, 795, 798, 800, 803, 804, 809, 812, 813, 814, 816, 818, 822, 825, 831, 835, 837, 838, 839, 840, 846, 847, 848, 853, 858, 862, 863, 875, 879, 881, 885, 886, 894, 895, 899, 900, 907, 908, 920, 937, 938, 943, 949, 950, 952, 953, 954, 962, 969, 970, 971, 975, 984, 1004, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1023, 1025, 1027, 1029, 1030, 1031, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1053, 1057, 1063, 1065, 1067, 1074, 1075, 1076, 1077, 1078, 1080, 1086, 1093, 1094, 1095, 1096, 1097, 1106, 1111, 1112, 1113, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1140, 1143, 1144, 1147, 1148, 1151, 1152, 1153, 1155, 1157, 1158, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1191, 1193, 1196, 1199, 1209, 1210, 1211, 1213, 1214, 1215, 1221, 1222, 1232, 1240, 1241, 1242, 1243, 1245, 1248, 1249, 1256], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 248, 307, 541, 835, 875], "leav": [6, 224, 307, 520, 822, 875], "directli": [6, 30, 54, 130, 158, 162, 167, 243, 265, 307, 436, 438, 439, 581, 744, 769, 791, 875, 1007, 1009, 1010, 1117, 1211, 1232, 1242, 1259], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 492, 631, 1058, 1161], "bool": [7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 179, 185, 190, 191, 192, 193, 197, 198, 199, 200, 204, 205, 207, 208, 209, 212, 214, 215, 222, 231, 233, 241, 242, 243, 244, 249, 252, 254, 255, 258, 261, 263, 266, 267, 271, 272, 273, 274, 276, 277, 279, 281, 289, 291, 294, 297, 307, 318, 319, 320, 321, 322, 332, 335, 336, 339, 343, 344, 352, 357, 360, 361, 363, 364, 366, 367, 376, 377, 378, 379, 380, 381, 382, 389, 401, 416, 433, 434, 435, 436, 438, 439, 455, 457, 458, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 488, 492, 495, 497, 499, 508, 515, 521, 527, 528, 529, 533, 534, 535, 536, 537, 538, 542, 561, 562, 564, 566, 569, 570, 574, 577, 579, 587, 588, 590, 592, 594, 596, 598, 599, 601, 603, 607, 609, 611, 616, 618, 619, 622, 623, 624, 625, 626, 628, 633, 635, 642, 643, 644, 647, 648, 650, 656, 658, 659, 661, 663, 667, 669, 678, 680, 683, 686, 687, 688, 689, 690, 692, 695, 696, 697, 700, 701, 704, 705, 710, 711, 713, 714, 725, 726, 729, 731, 741, 744, 748, 751, 756, 757, 759, 760, 769, 785, 787, 788, 790, 791, 795, 800, 802, 804, 805, 808, 809, 813, 814, 818, 822, 827, 836, 838, 840, 841, 845, 846, 847, 848, 851, 859, 861, 864, 867, 875, 879, 881, 885, 886, 896, 899, 900, 903, 907, 908, 916, 921, 923, 924, 926, 927, 929, 931, 933, 937, 943, 944, 945, 946, 947, 948, 949, 955, 967, 986, 1004, 1005, 1007, 1009, 1010, 1017, 1023, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1054, 1058, 1061, 1063, 1065, 1074, 1081, 1087, 1093, 1105, 1108, 1109, 1111, 1113, 1114, 1115, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1137, 1138, 1142, 1147, 1149, 1152, 1153, 1154, 1155, 1156, 1158, 1163, 1165, 1172, 1173, 1174, 1177, 1178, 1180, 1186, 1188, 1189, 1191, 1193, 1208, 1213, 1214, 1218, 1221, 1232, 1240, 1242, 1248, 1252, 1256], "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 128, 129, 130, 132, 133, 134, 136, 139, 140, 142, 143, 145, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 167, 169, 172, 173, 174, 179, 185, 190, 191, 193, 197, 198, 199, 200, 205, 207, 208, 209, 212, 214, 215, 216, 221, 222, 228, 229, 231, 233, 234, 241, 242, 243, 244, 246, 254, 255, 258, 261, 263, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 281, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 317, 318, 319, 320, 321, 322, 333, 335, 336, 339, 343, 344, 352, 356, 360, 361, 363, 364, 366, 367, 376, 377, 378, 379, 380, 382, 389, 391, 394, 397, 399, 401, 408, 409, 411, 412, 414, 415, 416, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 446, 453, 455, 456, 457, 458, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 488, 495, 497, 499, 515, 520, 527, 528, 529, 533, 534, 535, 536, 537, 538, 539, 542, 543, 561, 562, 564, 566, 569, 570, 574, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 611, 616, 618, 619, 622, 623, 624, 625, 626, 628, 633, 635, 636, 637, 642, 643, 647, 648, 650, 656, 658, 659, 661, 663, 667, 669, 678, 680, 683, 686, 687, 688, 689, 690, 692, 695, 696, 697, 701, 710, 713, 719, 725, 731, 741, 744, 748, 751, 756, 759, 760, 769, 787, 788, 789, 790, 791, 795, 800, 802, 804, 805, 808, 809, 813, 814, 816, 818, 822, 827, 833, 838, 840, 841, 846, 847, 848, 851, 857, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 879, 881, 885, 886, 897, 899, 900, 903, 907, 908, 916, 923, 924, 926, 927, 929, 931, 933, 936, 937, 949, 955, 956, 957, 960, 963, 964, 965, 966, 967, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1005, 1007, 1009, 1010, 1017, 1023, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1054, 1061, 1063, 1065, 1081, 1093, 1099, 1105, 1108, 1109, 1111, 1114, 1115, 1128, 1147, 1149, 1152, 1153, 1154, 1155, 1156, 1158, 1163, 1165, 1166, 1167, 1172, 1173, 1177, 1178, 1180, 1186, 1188, 1189, 1191, 1193, 1208, 1213, 1214, 1221, 1223, 1232, 1240, 1242, 1244, 1248, 1249, 1252, 1256, 1259], "ascii": [7, 20, 624, 634, 638, 639, 644, 646, 657, 666, 881, 1154, 1164, 1168, 1169, 1174, 1176, 1187, 1196], "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 127, 128, 129, 131, 142, 307, 411, 629, 631, 634, 638, 639, 640, 641, 642, 643, 646, 647, 648, 651, 652, 653, 654, 655, 657, 666, 827, 875, 881, 981, 1159, 1161, 1164, 1168, 1169, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1181, 1182, 1183, 1187, 1196, 1252], "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 179, 198, 307, 795, 800, 875, 1258], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 132, 133, 143, 144, 214, 233, 255, 260, 267, 275, 276, 307, 311, 748, 781, 813, 841, 848, 875, 1241, 1242, 1243, 1245, 1246, 1255, 1256], "outlin": 7, "fals": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 142, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 169, 171, 172, 173, 174, 179, 185, 193, 197, 198, 199, 200, 204, 205, 207, 208, 209, 212, 214, 215, 216, 221, 222, 228, 229, 231, 233, 234, 241, 242, 243, 244, 249, 252, 254, 255, 258, 261, 263, 266, 267, 271, 272, 273, 276, 277, 279, 281, 289, 291, 294, 295, 297, 300, 307, 319, 320, 321, 332, 335, 336, 339, 343, 344, 352, 357, 360, 363, 364, 366, 367, 376, 377, 378, 379, 380, 381, 382, 389, 401, 416, 433, 434, 435, 436, 438, 439, 457, 458, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 488, 492, 495, 497, 499, 508, 515, 521, 527, 528, 529, 533, 535, 537, 539, 542, 561, 562, 564, 566, 569, 570, 574, 577, 587, 588, 590, 592, 594, 596, 598, 599, 601, 603, 607, 609, 611, 616, 618, 619, 622, 623, 624, 625, 628, 633, 635, 636, 642, 643, 644, 647, 648, 650, 656, 658, 659, 661, 678, 680, 683, 686, 687, 688, 689, 690, 692, 695, 696, 697, 700, 701, 704, 705, 710, 711, 713, 714, 725, 726, 729, 741, 744, 748, 751, 756, 757, 759, 760, 769, 785, 787, 788, 789, 790, 791, 795, 800, 802, 808, 809, 813, 814, 816, 818, 827, 836, 838, 840, 841, 845, 846, 848, 851, 859, 861, 864, 865, 867, 870, 875, 879, 881, 885, 886, 896, 899, 900, 903, 907, 908, 916, 921, 923, 924, 926, 927, 929, 931, 933, 936, 937, 943, 944, 945, 946, 947, 948, 949, 955, 967, 986, 1004, 1005, 1007, 1009, 1010, 1017, 1018, 1022, 1023, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1054, 1058, 1061, 1063, 1065, 1074, 1081, 1087, 1099, 1105, 1108, 1109, 1111, 1113, 1114, 1115, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1138, 1142, 1147, 1149, 1152, 1153, 1154, 1155, 1158, 1163, 1165, 1166, 1172, 1173, 1174, 1177, 1178, 1180, 1186, 1188, 1189, 1191, 1208, 1213, 1214, 1218, 1221, 1223, 1232, 1242, 1248, 1252, 1256], "revert": [7, 9, 10], "utf8_full_condens": [7, 20, 123], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 42, 87, 126, 128, 129, 130, 134, 136, 142, 148, 187, 198, 212, 224, 242, 243, 248, 262, 305, 307, 311, 415, 417, 420, 541, 542, 656, 658, 659, 663, 715, 800, 801, 822, 835, 875, 987, 990, 1186, 1188, 1189, 1193, 1231, 1253], "style": [7, 20, 36, 130, 233, 307], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 316, 631, 642, 652, 769, 881, 1161, 1172, 1173], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 316, 625, 631, 769, 1155, 1161, 1209, 1232], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 137, 148, 155, 158, 172, 173, 174, 177, 179, 180, 181, 184, 189, 190, 193, 197, 198, 199, 200, 205, 206, 214, 215, 220, 221, 222, 223, 227, 233, 234, 235, 253, 254, 256, 258, 270, 278, 281, 286, 289, 291, 294, 295, 296, 297, 299, 300, 307, 315, 318, 324, 325, 326, 327, 328, 329, 347, 353, 358, 367, 369, 370, 372, 373, 374, 382, 383, 387, 388, 416, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 449, 450, 455, 457, 464, 465, 473, 474, 475, 476, 478, 480, 492, 503, 504, 516, 522, 523, 524, 525, 527, 530, 531, 532, 545, 548, 550, 559, 560, 561, 562, 568, 572, 574, 575, 576, 577, 581, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 614, 615, 616, 620, 621, 670, 674, 675, 679, 684, 693, 694, 698, 699, 701, 703, 716, 717, 731, 734, 735, 736, 748, 750, 758, 765, 769, 787, 788, 795, 797, 803, 804, 808, 809, 812, 813, 814, 820, 821, 828, 840, 842, 849, 851, 853, 856, 859, 861, 864, 865, 866, 867, 869, 870, 875, 881, 888, 889, 890, 891, 892, 893, 911, 917, 922, 934, 935, 940, 941, 942, 949, 950, 953, 954, 986, 1007, 1008, 1009, 1010, 1011, 1015, 1019, 1027, 1029, 1030, 1058, 1069, 1070, 1082, 1088, 1089, 1090, 1091, 1107, 1111, 1113, 1117, 1122, 1124, 1125, 1127, 1128, 1129, 1131, 1132, 1133, 1145, 1146, 1150, 1205, 1206, 1220, 1232, 1240, 1247, 1248, 1251, 1254, 1259], "multi": [8, 36, 128, 129, 270, 307, 440, 630, 769, 1160], "automat": [8, 116, 118, 119, 120, 122, 123, 128, 129, 130, 131, 133, 137, 138, 142, 146, 158, 162, 164, 246, 255, 281, 307, 528, 581, 651, 652, 653, 748, 769, 833, 841, 851, 875, 879, 1117, 1181, 1182, 1183, 1216, 1232, 1242, 1245, 1256], "turn": [8, 42, 43, 44, 45, 53, 54, 128, 129, 142, 664, 790, 791, 800, 802, 818, 827, 875, 1194], "struct": [8, 112, 123, 229, 246, 269, 274, 281, 307, 356, 382, 461, 520, 529, 552, 554, 556, 574, 584, 585, 632, 636, 648, 649, 683, 705, 706, 708, 730, 769, 833, 847, 851, 863, 875, 920, 949, 1086, 1093, 1111, 1120, 1162, 1166, 1178, 1179, 1213, 1232], "v": [8, 9, 41, 186, 307, 608, 688, 690, 769, 1136, 1232, 1242, 1243], "v2": [8, 134, 145], "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 150, 240, 243, 307, 343, 361, 495, 497, 623, 626, 633, 759, 831, 875, 907, 924, 1061, 1063, 1153, 1156, 1163], "separ": [9, 10, 24, 27, 32, 33, 42, 125, 127, 128, 129, 133, 142, 231, 233, 263, 272, 274, 307, 341, 344, 493, 499, 529, 629, 700, 705, 706, 769, 847, 875, 905, 908, 1059, 1065, 1159, 1202, 1208, 1232, 1252], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 128, 129, 142, 307, 311, 605, 660, 769, 875, 881, 1132, 1190, 1232, 1251], "set_thousands_separ": 9, "thousand": [9, 27], "group": [9, 27, 36, 41, 45, 129, 172, 199, 200, 213, 229, 231, 233, 240, 243, 275, 277, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 317, 366, 381, 442, 448, 453, 456, 492, 528, 529, 538, 540, 567, 577, 585, 586, 618, 619, 623, 630, 631, 632, 633, 642, 643, 678, 683, 731, 769, 787, 808, 809, 831, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 879, 881, 948, 1058, 1121, 1153, 1160, 1161, 1162, 1163, 1172, 1173, 1221, 1232, 1240, 1247, 1255], "9876": 9, "54321": 9, "1010101": 9, "123456": [9, 881], "78": 9, "tbl_cell_numeric_align": [9, 10, 27], "right": [9, 10, 15, 16, 18, 27, 36, 63, 128, 129, 151, 152, 153, 154, 200, 214, 215, 240, 276, 307, 382, 436, 438, 439, 466, 509, 510, 511, 512, 574, 586, 589, 591, 593, 595, 597, 600, 602, 604, 608, 616, 698, 710, 711, 713, 714, 756, 757, 769, 809, 813, 814, 831, 848, 875, 949, 1007, 1009, 1010, 1031, 1075, 1076, 1077, 1078, 1111, 1136, 1147, 1232, 1246, 1250], "thousands_separ": [9, 10, 27], "decimal_separ": [9, 27], "float_precis": [9, 10, 27, 33, 36, 42, 307, 875], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 129, 150, 151, 153, 184, 198, 199, 213, 216, 264, 285, 307, 463, 542, 769, 790, 811, 875, 881, 1036, 1210, 1232, 1259], "876": 9, "543": 9, "010": [9, 661, 1191], "101": [9, 27, 393, 661, 881, 1191, 1259], "000": [9, 10, 27, 36, 307, 1259], "123": [9, 625, 631, 643, 666, 759, 881, 1155, 1161, 1196, 1209, 1232], "456": [9, 10, 393, 881, 959, 1209, 1232], "780": 9, "precis": [10, 11, 33, 36, 42, 63, 130, 212, 242, 243, 262, 265, 270, 307, 391, 660, 875, 881, 957, 1190], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 173, 179, 186, 189, 190, 194, 196, 198, 201, 202, 203, 205, 210, 212, 213, 215, 217, 218, 228, 229, 238, 240, 241, 244, 250, 251, 253, 256, 259, 264, 268, 271, 275, 278, 280, 283, 284, 290, 301, 307, 316, 339, 343, 351, 353, 356, 358, 359, 365, 366, 381, 385, 389, 436, 438, 439, 443, 444, 445, 451, 453, 454, 456, 459, 460, 461, 482, 488, 490, 495, 496, 497, 498, 508, 513, 514, 516, 518, 519, 520, 522, 566, 568, 571, 572, 574, 577, 580, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 612, 617, 621, 630, 634, 636, 640, 641, 642, 646, 648, 649, 657, 660, 661, 666, 673, 677, 678, 684, 686, 692, 701, 703, 709, 712, 715, 721, 723, 725, 726, 740, 741, 744, 745, 746, 750, 751, 754, 755, 758, 760, 769, 785, 788, 795, 802, 803, 804, 807, 810, 814, 817, 827, 837, 839, 842, 844, 845, 849, 850, 854, 855, 860, 871, 875, 880, 881, 894, 895, 903, 907, 915, 917, 920, 922, 928, 929, 936, 937, 948, 951, 952, 955, 1006, 1007, 1009, 1010, 1014, 1015, 1016, 1020, 1021, 1025, 1026, 1027, 1045, 1047, 1048, 1054, 1056, 1061, 1062, 1063, 1064, 1074, 1079, 1080, 1082, 1084, 1085, 1086, 1088, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1110, 1111, 1113, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1143, 1148, 1151, 1160, 1164, 1166, 1170, 1171, 1172, 1176, 1178, 1179, 1187, 1190, 1191, 1196, 1203, 1204, 1210, 1217, 1222, 1232, 1242, 1245, 1256, 1259], "control": [10, 11, 36, 54, 55, 133, 156, 158, 254, 255, 265, 307, 581, 619, 748, 769, 791, 800, 840, 841, 875, 1117, 1211, 1232, 1242, 1245], "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 128, 129, 130, 131, 133, 137, 138, 139, 140, 142, 145, 146, 147, 149, 156, 158, 161, 163, 164, 165, 171, 173, 178, 186, 187, 189, 190, 198, 202, 203, 212, 213, 216, 217, 228, 229, 240, 244, 251, 256, 259, 271, 275, 278, 280, 288, 290, 292, 301, 307, 333, 349, 351, 356, 359, 365, 366, 375, 381, 382, 385, 389, 392, 400, 402, 404, 406, 407, 416, 429, 430, 432, 436, 437, 438, 439, 443, 444, 445, 451, 460, 473, 474, 481, 482, 490, 498, 501, 506, 508, 513, 516, 518, 520, 522, 567, 571, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 612, 621, 634, 636, 638, 639, 642, 646, 648, 649, 657, 660, 673, 677, 678, 684, 697, 701, 702, 703, 715, 723, 728, 745, 746, 750, 754, 758, 769, 785, 788, 794, 801, 802, 803, 804, 810, 817, 827, 837, 842, 844, 845, 849, 850, 858, 860, 862, 871, 875, 880, 913, 915, 920, 928, 937, 948, 949, 951, 955, 958, 966, 968, 973, 976, 977, 986, 999, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1026, 1047, 1048, 1056, 1064, 1067, 1072, 1074, 1079, 1084, 1086, 1099, 1100, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1140, 1143, 1151, 1164, 1166, 1168, 1169, 1172, 1176, 1178, 1179, 1187, 1190, 1204, 1217, 1222, 1232, 1246, 1251, 1259], "place": [10, 11, 33, 42, 182, 188, 204, 205, 233, 238, 243, 254, 279, 307, 311, 332, 344, 352, 499, 515, 618, 619, 695, 769, 840, 875, 887, 896, 908, 916, 1013, 1065, 1081, 1114, 1149, 1232], "float": [10, 11, 33, 36, 42, 66, 67, 128, 129, 142, 148, 151, 152, 153, 154, 155, 158, 162, 169, 179, 186, 189, 215, 235, 244, 265, 266, 299, 307, 339, 370, 382, 387, 388, 416, 433, 434, 435, 436, 438, 439, 444, 449, 450, 455, 457, 464, 468, 471, 473, 474, 475, 476, 480, 488, 508, 523, 527, 528, 530, 545, 559, 560, 561, 562, 572, 574, 575, 587, 588, 590, 592, 594, 596, 597, 599, 601, 603, 605, 607, 679, 742, 744, 769, 795, 803, 814, 828, 838, 869, 875, 881, 903, 929, 935, 949, 950, 952, 953, 954, 986, 1004, 1006, 1007, 1009, 1010, 1015, 1019, 1027, 1046, 1054, 1074, 1089, 1102, 1103, 1110, 1111, 1112, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1137, 1147, 1151, 1203, 1213, 1222, 1232, 1259], "point": [10, 11, 36, 37, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 140, 147, 148, 158, 162, 189, 200, 216, 255, 265, 270, 275, 276, 307, 311, 370, 381, 382, 387, 415, 416, 444, 449, 450, 461, 473, 474, 508, 529, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 745, 746, 769, 790, 791, 803, 809, 818, 829, 841, 848, 875, 933, 935, 948, 949, 953, 985, 986, 1015, 1019, 1027, 1074, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1211, 1216, 1232], "standard": [10, 36, 256, 265, 270, 307, 402, 438, 599, 600, 616, 621, 637, 750, 765, 769, 842, 875, 968, 1009, 1147, 1151, 1167, 1232, 1247, 1259], "behaviour": [10, 47, 55, 183, 255, 307, 623, 630, 631, 633, 642, 643, 679, 748, 769, 798, 841, 875, 1153, 1160, 1161, 1163, 1172, 1173], "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 128, 129, 130, 131, 133, 134, 136, 139, 140, 142, 143, 145, 146, 148, 151, 152, 153, 154, 158, 162, 171, 179, 184, 186, 188, 190, 193, 200, 214, 218, 232, 241, 243, 246, 247, 251, 254, 263, 265, 266, 270, 271, 273, 276, 282, 307, 351, 371, 384, 389, 436, 438, 439, 445, 513, 520, 539, 571, 581, 610, 618, 619, 624, 629, 634, 638, 639, 644, 646, 651, 652, 653, 656, 657, 695, 697, 705, 719, 769, 785, 795, 796, 804, 809, 813, 818, 833, 834, 837, 840, 845, 846, 848, 852, 875, 915, 938, 950, 955, 1006, 1007, 1009, 1010, 1013, 1016, 1079, 1117, 1135, 1137, 1140, 1154, 1159, 1164, 1168, 1169, 1174, 1176, 1181, 1182, 1183, 1186, 1187, 1208, 1213, 1232, 1245], "larger": [10, 42, 43, 44, 45, 53, 54, 450, 701, 769, 790, 791, 875], "should": [10, 34, 36, 42, 43, 44, 45, 55, 116, 118, 120, 122, 132, 133, 137, 138, 142, 146, 148, 155, 156, 158, 162, 181, 212, 215, 218, 241, 242, 243, 254, 262, 263, 274, 293, 307, 317, 381, 384, 431, 437, 440, 473, 474, 492, 529, 541, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 608, 616, 619, 683, 695, 715, 717, 729, 731, 745, 746, 759, 769, 796, 797, 802, 813, 814, 818, 835, 840, 847, 875, 881, 948, 1001, 1008, 1058, 1093, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1136, 1147, 1221, 1232], "ensur": [10, 36, 131, 157, 160, 199, 231, 241, 266, 307, 466, 528, 769, 808, 818, 875, 879, 881, 1213, 1232], "awar": [10, 130, 212, 242, 243, 262, 307, 437, 624, 644, 659, 769, 802, 875, 1008, 1154, 1174, 1189, 1232], "both": [10, 25, 33, 42, 46, 84, 85, 130, 175, 200, 214, 215, 225, 240, 241, 267, 276, 307, 322, 371, 382, 440, 466, 574, 586, 589, 591, 593, 595, 597, 600, 602, 604, 646, 710, 711, 713, 714, 756, 757, 765, 769, 780, 809, 813, 814, 823, 831, 848, 875, 881, 938, 1031, 1176, 1214, 1232, 1257], "limit": [10, 11, 45, 130, 131, 142, 164, 190, 307, 359, 445, 451, 769, 804, 810, 875, 1016, 1232, 1248, 1255], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 264, 307, 392, 397, 400, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 429, 430, 432, 676, 769, 800, 816, 875, 932, 958, 963, 966, 967, 968, 972, 973, 974, 976, 977, 980, 982, 983, 986, 999, 1000, 1002, 1210, 1215, 1232], "look": [10, 200, 307, 360, 520, 809, 875, 923], "appli": [10, 20, 33, 36, 42, 55, 130, 142, 155, 158, 162, 179, 193, 218, 232, 254, 255, 265, 293, 307, 332, 392, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 418, 429, 430, 432, 438, 439, 528, 529, 571, 588, 589, 590, 591, 594, 595, 601, 602, 619, 642, 643, 656, 658, 659, 663, 695, 705, 706, 719, 730, 731, 743, 748, 759, 769, 795, 810, 817, 818, 826, 840, 841, 863, 875, 938, 958, 961, 962, 963, 966, 967, 968, 972, 973, 974, 976, 977, 980, 982, 983, 986, 988, 999, 1000, 1002, 1009, 1010, 1093, 1123, 1124, 1126, 1130, 1172, 1173, 1186, 1188, 1189, 1193, 1232, 1240], "float64": [10, 33, 36, 42, 119, 128, 137, 155, 158, 175, 184, 186, 193, 245, 270, 281, 307, 324, 325, 326, 327, 328, 329, 367, 372, 373, 374, 383, 416, 437, 440, 473, 474, 576, 614, 615, 674, 675, 717, 741, 744, 760, 769, 792, 799, 832, 851, 875, 881, 986, 1008, 1214, 1220, 1232], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 128, 129, 130, 131, 133, 137, 138, 139, 142, 155, 156, 157, 158, 162, 169, 172, 175, 200, 215, 240, 264, 265, 266, 267, 270, 275, 284, 307, 367, 368, 379, 380, 431, 440, 453, 487, 495, 526, 528, 529, 535, 572, 579, 580, 586, 589, 591, 593, 595, 597, 600, 602, 604, 611, 636, 656, 672, 676, 682, 692, 717, 721, 725, 726, 728, 729, 730, 731, 741, 744, 751, 760, 769, 787, 792, 809, 814, 831, 855, 875, 880, 881, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 931, 932, 937, 946, 947, 950, 951, 1001, 1006, 1033, 1049, 1050, 1053, 1061, 1085, 1092, 1093, 1119, 1141, 1166, 1186, 1203, 1210, 1211, 1213, 1214, 1215, 1216, 1220, 1232, 1259], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 128, 129, 130, 131, 132, 133, 137, 138, 142, 143, 146, 148, 174, 188, 191, 200, 201, 213, 214, 241, 242, 243, 273, 281, 284, 307, 310, 311, 431, 446, 450, 459, 520, 652, 653, 681, 765, 769, 789, 795, 802, 805, 809, 813, 818, 846, 851, 855, 875, 939, 1001, 1013, 1017, 1024, 1025, 1142, 1232, 1236], "cover": 10, "nativ": [10, 34, 128, 130, 133, 134, 136, 140, 212, 218, 242, 243, 262, 266, 293, 307, 529, 731, 748, 769, 775, 841, 863, 875, 1093, 1213, 1232, 1259], "level": [10, 36, 41, 45, 142, 145, 146, 147, 193, 218, 229, 255, 307, 311, 446, 769, 781, 810, 817, 841, 875], "larg": [10, 11, 14, 47, 130, 133, 139], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 128, 129, 130, 133, 137, 139, 142, 146, 148, 156, 157, 158, 160, 162, 198, 200, 219, 220, 307, 337, 485, 530, 559, 569, 577, 634, 636, 639, 646, 657, 732, 733, 769, 809, 819, 875, 901, 969, 1051, 1094, 1102, 1108, 1113, 1164, 1166, 1169, 1176, 1187, 1232, 1247], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 128, 130, 131, 137, 138, 142, 148, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 172, 179, 180, 181, 183, 198, 200, 213, 215, 224, 231, 233, 255, 263, 265, 270, 275, 277, 307, 310, 311, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 446, 535, 541, 587, 589, 591, 593, 595, 597, 600, 602, 604, 697, 709, 710, 711, 712, 713, 714, 715, 748, 756, 757, 765, 769, 781, 787, 791, 795, 796, 797, 798, 809, 814, 818, 822, 835, 875, 940, 942, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1008, 1034, 1037, 1039, 1040, 1122, 1145, 1205, 1232, 1236, 1254, 1259], "pi": [10, 383, 769, 940, 942, 1145, 1205, 1232, 1250, 1254], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 128, 134, 136, 145, 148, 160, 180, 198, 202, 211, 217, 259, 260, 266, 275, 307, 316, 384, 433, 437, 440, 466, 523, 529, 534, 535, 536, 538, 539, 540, 542, 543, 611, 616, 633, 652, 653, 717, 731, 748, 759, 769, 796, 816, 829, 875, 881, 1004, 1008, 1031, 1147, 1163, 1232, 1248, 1252, 1259], "const": 10, "15": [10, 36, 150, 179, 200, 205, 218, 240, 307, 381, 385, 409, 415, 428, 437, 571, 586, 601, 706, 712, 755, 756, 769, 795, 809, 831, 875, 881, 948, 951, 985, 998, 1008, 1232], "141592653589793": 10, "718281828459045": [10, 433, 523, 769, 1004, 1089, 1232], "fix": [10, 56, 65, 133, 156, 431, 715, 1001], "align": [10, 15, 16, 36, 47, 55, 307, 1257], "numer": [10, 16, 33, 36, 42, 132, 143, 172, 181, 215, 224, 233, 266, 267, 275, 307, 316, 367, 371, 450, 466, 525, 546, 548, 572, 580, 611, 632, 666, 671, 679, 769, 781, 787, 797, 814, 822, 875, 881, 929, 938, 950, 1031, 1141, 1162, 1196, 1213, 1232, 1251, 1259], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 91, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 152, 153, 154, 158, 171, 172, 175, 177, 178, 181, 182, 183, 184, 187, 191, 192, 195, 196, 198, 199, 200, 204, 205, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 254, 256, 257, 258, 261, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 292, 307, 311, 318, 319, 321, 332, 341, 350, 352, 355, 366, 371, 375, 376, 382, 392, 393, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 417, 418, 420, 429, 430, 432, 440, 442, 446, 448, 461, 465, 466, 481, 487, 493, 495, 515, 519, 520, 529, 535, 536, 538, 540, 541, 550, 553, 555, 557, 558, 567, 574, 578, 580, 582, 584, 585, 586, 589, 591, 593, 595, 597, 600, 602, 604, 611, 618, 619, 622, 629, 633, 634, 635, 648, 649, 656, 657, 658, 659, 660, 661, 663, 668, 670, 678, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 769, 785, 787, 794, 797, 798, 799, 801, 805, 808, 809, 813, 814, 818, 819, 820, 821, 822, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 862, 863, 875, 880, 881, 885, 886, 905, 914, 916, 919, 931, 932, 938, 943, 949, 958, 961, 962, 963, 966, 967, 968, 972, 973, 974, 976, 977, 980, 982, 983, 986, 987, 988, 990, 999, 1000, 1002, 1012, 1024, 1027, 1030, 1053, 1059, 1061, 1081, 1085, 1111, 1118, 1121, 1141, 1152, 1159, 1163, 1165, 1178, 1179, 1186, 1188, 1189, 1190, 1191, 1193, 1199, 1202, 1208, 1209, 1221, 1232, 1246, 1248, 1249, 1251, 1252, 1254, 1257, 1258, 1259], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 130, 149, 151, 152, 153, 154, 171, 175, 176, 183, 184, 191, 199, 200, 214, 231, 232, 233, 240, 242, 244, 245, 249, 254, 265, 266, 271, 273, 277, 307, 332, 352, 357, 365, 366, 387, 388, 446, 491, 508, 515, 521, 567, 572, 577, 586, 607, 608, 609, 618, 619, 645, 652, 653, 654, 655, 669, 677, 678, 680, 681, 683, 695, 748, 759, 769, 780, 785, 793, 798, 799, 805, 808, 809, 813, 822, 831, 832, 836, 840, 841, 845, 846, 875, 880, 881, 896, 916, 921, 928, 933, 953, 954, 1017, 1043, 1057, 1074, 1081, 1087, 1113, 1119, 1134, 1136, 1138, 1149, 1175, 1200, 1217, 1218, 1219, 1221, 1232, 1240, 1242, 1248, 1255, 1259], "cleanli": [10, 198, 307], "line": [10, 20, 36, 128, 129, 133, 142, 198, 207, 209, 307, 310, 630, 1160], "up": [10, 36, 76, 131, 212, 215, 242, 243, 249, 262, 307, 370, 529, 634, 657, 769, 813, 814, 818, 836, 875, 881, 935, 1164, 1187, 1232], "xx": [10, 48, 50, 162, 179, 255, 307, 795, 875, 881, 1246, 1252, 1258], "yy": [10, 48, 50, 162, 179, 255, 307, 795, 875, 881, 1246, 1252, 1258], "11111111": 10, "44444444444": 10, "100000": [10, 27], "987654321": 10, "23456789": 10, "11": [10, 16, 41, 45, 150, 158, 170, 179, 215, 240, 307, 318, 408, 409, 411, 415, 428, 452, 464, 496, 544, 568, 577, 586, 587, 601, 617, 686, 752, 757, 769, 784, 790, 791, 795, 810, 817, 827, 831, 844, 875, 881, 981, 985, 998, 1093, 1122, 1232, 1248], "111": [10, 1249], "100": [10, 17, 27, 36, 119, 122, 128, 129, 130, 133, 137, 139, 142, 146, 251, 307, 581, 610, 624, 636, 644, 660, 714, 769, 837, 875, 881, 1090, 1117, 1123, 1124, 1126, 1140, 1154, 1166, 1174, 1190, 1232, 1249, 1259], "988": 10, "44": [10, 225, 307, 386, 769, 823, 875], "444": 10, "23": [10, 158, 179, 200, 240, 270, 307, 393, 397, 400, 412, 415, 430, 586, 589, 591, 593, 595, 597, 600, 602, 604, 712, 715, 755, 756, 757, 769, 795, 809, 831, 841, 875, 881, 959, 966, 1216, 1232, 1258, 1259], "789": [10, 881], "fmt": [11, 215, 307, 463, 720, 769, 811, 875], "floatfmt": 11, "mix": [11, 215, 266, 307, 748, 841, 875, 881, 950, 1232], "how": [11, 35, 36, 47, 55, 91, 131, 140, 142, 147, 183, 214, 215, 233, 275, 276, 307, 340, 385, 414, 464, 489, 490, 567, 580, 598, 656, 659, 697, 712, 759, 769, 798, 813, 848, 853, 875, 879, 904, 951, 984, 1055, 1056, 1128, 1186, 1189, 1232], "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 128, 129, 130, 132, 137, 142, 143, 144, 146, 148, 214, 276, 307, 634, 636, 656, 657, 658, 659, 663, 710, 711, 813, 818, 848, 875, 881, 1164, 1166, 1186, 1187, 1188, 1189, 1193, 1232, 1246, 1259], "scientif": 11, "notat": [11, 36, 307], "small": [11, 131, 216, 307, 415, 802, 875, 1259], "2304980958725870923": 11, "1e6": 11, "1e": [11, 151, 152, 153, 154], "230498": 11, "0000e": 11, "230498095872587": 11, "1000000": [11, 996], "00000001": [11, 686, 769], "plai": [12, 700], "sam": 12, "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 133, 137, 138, 146, 265, 270, 307, 520, 759, 875], "time": [12, 35, 52, 53, 54, 62, 64, 99, 132, 142, 143, 145, 158, 159, 162, 179, 188, 200, 215, 240, 277, 307, 339, 365, 366, 390, 391, 393, 394, 395, 398, 399, 408, 409, 411, 414, 415, 417, 419, 420, 428, 431, 437, 487, 488, 520, 585, 586, 589, 591, 593, 595, 597, 600, 602, 604, 612, 656, 659, 663, 676, 677, 678, 699, 700, 710, 711, 712, 713, 714, 715, 721, 756, 757, 769, 790, 791, 795, 809, 814, 827, 831, 875, 881, 903, 928, 956, 957, 959, 960, 964, 965, 981, 984, 985, 987, 989, 990, 998, 1001, 1008, 1013, 1053, 1054, 1121, 1143, 1186, 1189, 1193, 1215, 1217, 1232, 1240, 1245, 1253, 1259], "goe": 12, "By": [12, 14, 30, 47, 128, 129, 142, 200, 214, 215, 240, 242, 251, 256, 277, 278, 307, 351, 411, 415, 428, 513, 516, 522, 586, 589, 591, 593, 595, 597, 600, 602, 604, 610, 621, 684, 701, 703, 710, 711, 713, 714, 715, 729, 750, 756, 757, 758, 769, 790, 809, 813, 814, 831, 837, 842, 849, 875, 915, 981, 985, 998, 1079, 1140, 1151, 1222, 1232], "begin": [12, 36, 307, 436, 438, 439, 630, 657, 769, 1007, 1009, 1010, 1160, 1187, 1232], "beauti": 12, "friendship": 12, "len_byt": [12, 639, 1169], "len": [12, 36, 158, 162, 175, 213, 233, 284, 288, 293, 307, 375, 529, 538, 540, 584, 702, 725, 769, 792, 850, 855, 858, 863, 875, 880, 1120, 1232], "u32": [12, 130, 170, 172, 178, 230, 283, 284, 288, 292, 298, 300, 307, 317, 323, 330, 331, 332, 333, 334, 337, 338, 340, 349, 375, 376, 461, 481, 485, 486, 489, 501, 506, 549, 565, 577, 584, 585, 589, 591, 593, 595, 597, 600, 602, 604, 608, 625, 633, 638, 639, 676, 681, 683, 687, 691, 695, 696, 702, 704, 725, 728, 739, 769, 784, 787, 794, 825, 854, 855, 858, 862, 868, 870, 875, 881, 896, 897, 898, 901, 902, 904, 913, 929, 932, 943, 1027, 1051, 1052, 1055, 1067, 1072, 1113, 1120, 1121, 1136, 1155, 1163, 1168, 1169, 1215, 1219, 1221, 1232, 1240, 1247, 1248, 1252], "go": [12, 128, 129, 142, 628, 1158], "37": [12, 881], "bea": 12, "48": [12, 158, 240, 307, 586, 670, 769, 831, 875, 881], "fmt_str_length": [12, 711, 714], "50": [12, 27, 36, 179, 188, 198, 307, 371, 415, 428, 711, 769, 795, 875, 881, 938, 950, 998, 1232, 1246], "element": [13, 14, 25, 153, 154, 157, 160, 171, 178, 210, 233, 241, 254, 256, 271, 278, 307, 324, 325, 326, 327, 328, 329, 340, 341, 365, 366, 369, 372, 373, 374, 375, 377, 378, 379, 380, 381, 387, 388, 441, 442, 446, 459, 470, 481, 489, 491, 492, 493, 496, 501, 509, 510, 511, 512, 516, 522, 524, 525, 528, 529, 567, 568, 577, 580, 587, 588, 590, 592, 594, 596, 598, 599, 601, 603, 608, 613, 614, 615, 619, 620, 621, 648, 649, 660, 674, 675, 677, 678, 684, 695, 701, 703, 745, 746, 750, 758, 769, 785, 794, 840, 842, 845, 849, 875, 888, 889, 890, 891, 892, 893, 904, 905, 928, 934, 937, 940, 941, 942, 944, 945, 946, 947, 948, 953, 954, 1011, 1012, 1017, 1026, 1036, 1045, 1047, 1048, 1055, 1057, 1058, 1059, 1062, 1067, 1075, 1076, 1077, 1078, 1090, 1091, 1093, 1107, 1113, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1136, 1144, 1145, 1146, 1150, 1151, 1178, 1179, 1190, 1204, 1205, 1206, 1210, 1217, 1218, 1222, 1232, 1247, 1248], "empti": [13, 31, 33, 42, 96, 119, 128, 129, 133, 139, 142, 173, 174, 200, 224, 307, 622, 629, 729, 747, 788, 789, 809, 822, 875, 881, 937, 939, 1033, 1152, 1159, 1232], "alwai": [13, 33, 35, 42, 63, 65, 128, 171, 199, 214, 218, 271, 293, 307, 365, 366, 528, 538, 656, 677, 678, 759, 769, 785, 813, 818, 845, 875, 881, 928, 1093, 1186, 1217, 1232, 1240, 1256, 1259], "neg": [13, 61, 62, 63, 64, 128, 129, 134, 136, 140, 149, 202, 217, 240, 251, 253, 259, 284, 307, 351, 513, 514, 571, 572, 586, 610, 617, 634, 646, 657, 769, 831, 837, 839, 854, 855, 875, 881, 915, 1026, 1048, 1079, 1080, 1140, 1148, 1164, 1176, 1187, 1204, 1232], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 130, 131, 132, 133, 142, 145, 147, 148, 162, 188, 200, 201, 214, 215, 229, 233, 240, 243, 248, 249, 251, 265, 266, 267, 277, 284, 286, 292, 307, 389, 415, 417, 420, 428, 436, 437, 438, 439, 443, 450, 459, 466, 478, 519, 520, 528, 529, 541, 567, 572, 574, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 609, 610, 629, 647, 648, 659, 679, 683, 704, 705, 706, 712, 713, 714, 715, 729, 730, 741, 744, 745, 746, 748, 760, 769, 786, 790, 795, 809, 813, 818, 827, 831, 835, 836, 837, 855, 856, 862, 875, 881, 887, 985, 987, 990, 998, 1007, 1009, 1010, 1013, 1014, 1025, 1031, 1046, 1085, 1093, 1111, 1117, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1138, 1140, 1159, 1177, 1178, 1189, 1213, 1214, 1221, 1232, 1246, 1256, 1257, 1259], "being": [13, 37, 42, 43, 44, 45, 53, 54, 63, 65, 128, 129, 130, 140, 142, 147, 148, 172, 187, 255, 263, 265, 270, 275, 276, 307, 311, 381, 382, 415, 461, 529, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 697, 716, 745, 746, 769, 787, 790, 791, 801, 802, 841, 848, 875, 933, 948, 949, 985, 1027, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1159, 1208, 1211, 1216, 1232, 1259], "A": [13, 33, 36, 42, 53, 54, 59, 65, 123, 128, 129, 130, 131, 142, 144, 149, 164, 176, 184, 193, 200, 214, 215, 220, 222, 227, 233, 258, 261, 275, 276, 277, 281, 282, 307, 315, 387, 388, 393, 417, 420, 434, 435, 443, 455, 457, 468, 471, 473, 474, 480, 520, 527, 528, 539, 552, 561, 562, 583, 588, 590, 592, 594, 596, 599, 601, 603, 623, 624, 625, 630, 631, 632, 633, 634, 637, 639, 642, 643, 644, 646, 657, 666, 699, 715, 716, 720, 769, 793, 799, 809, 813, 814, 829, 848, 851, 852, 875, 881, 953, 954, 959, 987, 990, 1014, 1123, 1124, 1126, 1129, 1130, 1131, 1153, 1154, 1155, 1160, 1161, 1162, 1163, 1164, 1167, 1169, 1172, 1173, 1174, 1176, 1187, 1196, 1232, 1240, 1243, 1256], "content": [13, 612, 769, 1143, 1232], "final": [13, 36, 47, 147, 215, 307, 436, 438, 439, 769, 795, 802, 875, 879, 1007, 1009, 1010, 1232, 1257], "item": [13, 55, 129, 198, 241, 244, 307, 339, 343, 344, 385, 442, 488, 490, 497, 499, 508, 607, 649, 769, 903, 907, 908, 951, 1012, 1054, 1056, 1063, 1065, 1074, 1134, 1179, 1232], "num": [13, 36, 269, 307, 466, 769, 1031, 1232], "fmt_table_cell_list_len": 13, "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 131, 142, 150, 174, 179, 188, 197, 198, 200, 202, 204, 205, 206, 211, 215, 217, 228, 232, 233, 234, 238, 240, 246, 255, 259, 281, 286, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 318, 322, 330, 331, 332, 334, 371, 377, 380, 385, 389, 390, 392, 393, 395, 396, 398, 400, 403, 404, 405, 406, 408, 409, 410, 414, 415, 416, 418, 428, 431, 437, 458, 459, 460, 464, 470, 482, 490, 496, 498, 504, 514, 516, 518, 522, 524, 538, 540, 550, 565, 568, 571, 581, 586, 617, 661, 670, 673, 686, 697, 698, 705, 710, 712, 713, 716, 719, 721, 723, 729, 730, 754, 757, 769, 790, 791, 795, 809, 810, 812, 817, 826, 827, 831, 833, 843, 844, 851, 856, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 881, 938, 951, 955, 956, 958, 959, 964, 973, 984, 998, 1001, 1004, 1008, 1026, 1036, 1048, 1056, 1064, 1070, 1080, 1082, 1084, 1088, 1090, 1093, 1107, 1117, 1135, 1137, 1191, 1204, 1211, 1213, 1216, 1232, 1240, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1259], "size": [14, 41, 45, 128, 129, 130, 155, 156, 157, 158, 162, 164, 186, 275, 307, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 692, 725, 726, 745, 746, 769, 790, 875, 1006, 1118, 1128, 1232, 1259], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 128, 129, 137, 138, 142, 146, 169, 276, 307, 318, 670, 769, 802, 848, 875], "chunk": [14, 45, 125, 128, 129, 132, 140, 142, 145, 146, 147, 158, 162, 188, 213, 228, 266, 307, 322, 578, 769, 875, 887, 936, 1013, 1022, 1099, 1114, 1207, 1213, 1232], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 136, 199, 214, 273, 307, 528, 769, 790, 791, 800, 802, 808, 813, 818, 822, 827, 838, 840, 846, 875], "engin": [14, 34, 130, 131, 133, 164, 199, 214, 218, 266, 273, 293, 307, 528, 748, 769, 808, 813, 818, 822, 846, 863, 875, 1093, 1213, 1232, 1242], "determin": [14, 33, 36, 42, 47, 55, 82, 128, 129, 130, 133, 139, 140, 142, 147, 149, 171, 175, 193, 200, 212, 213, 218, 233, 240, 271, 272, 277, 307, 366, 401, 414, 461, 520, 538, 574, 580, 581, 616, 624, 634, 656, 657, 659, 660, 678, 712, 741, 744, 760, 769, 785, 792, 793, 799, 809, 831, 845, 850, 875, 967, 984, 1027, 1086, 1111, 1117, 1147, 1154, 1186, 1189, 1190, 1232], "thread": [14, 33, 42, 54, 125, 128, 129, 131, 164, 165, 254, 307, 492, 529, 619, 695, 769, 791, 840, 875, 916, 1058, 1081, 1149, 1232], "pool": [14, 54, 164, 165, 791, 875], "For": [14, 35, 36, 130, 131, 132, 133, 143, 144, 183, 188, 214, 215, 240, 265, 293, 307, 310, 408, 409, 436, 438, 439, 450, 520, 529, 539, 579, 616, 623, 630, 631, 632, 633, 634, 657, 705, 715, 719, 720, 765, 769, 798, 814, 831, 863, 875, 879, 1007, 1009, 1010, 1013, 1093, 1115, 1147, 1153, 1160, 1161, 1162, 1163, 1164, 1187, 1211, 1232, 1236], "some": [14, 30, 36, 46, 85, 119, 128, 129, 130, 133, 142, 169, 183, 243, 266, 307, 311, 765, 798, 875, 1036, 1232, 1259], "dataset": [14, 41, 65, 128, 129, 133, 139, 142, 148, 214, 270, 307, 478, 769, 781, 813, 818, 875, 1046, 1232, 1257], "esp": 14, "have": [14, 30, 36, 46, 47, 62, 85, 117, 126, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 180, 188, 212, 214, 215, 236, 240, 242, 243, 262, 270, 284, 307, 381, 384, 436, 438, 439, 529, 539, 577, 581, 586, 632, 769, 796, 813, 822, 831, 854, 855, 875, 879, 881, 948, 950, 1007, 1009, 1010, 1013, 1024, 1113, 1117, 1232, 1255, 1257, 1259], "too": [14, 802, 875], "optimist": 14, "lead": [14, 41, 123, 148, 222, 249, 251, 258, 307, 351, 453, 456, 513, 528, 529, 609, 610, 651, 653, 701, 769, 818, 836, 837, 863, 875, 915, 1079, 1093, 1138, 1140, 1181, 1183, 1232], "memori": [14, 45, 53, 54, 55, 116, 117, 120, 121, 122, 128, 129, 130, 132, 133, 134, 140, 142, 145, 146, 147, 169, 188, 218, 242, 243, 252, 266, 293, 307, 567, 578, 611, 769, 790, 791, 875, 1013, 1093, 1114, 1141, 1142, 1213, 1232], "error": [14, 35, 54, 101, 106, 108, 118, 119, 122, 128, 129, 142, 172, 233, 241, 266, 307, 318, 343, 344, 361, 389, 495, 497, 499, 550, 623, 626, 630, 632, 633, 636, 637, 656, 658, 659, 663, 769, 787, 791, 863, 875, 907, 908, 924, 955, 1061, 1063, 1065, 1153, 1156, 1160, 1162, 1163, 1166, 1167, 1186, 1188, 1189, 1193, 1213, 1232], "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 97, 105, 113, 119, 120, 121, 122, 123, 128, 129, 130, 133, 134, 136, 137, 139, 140, 142, 145, 146, 147, 148, 151, 152, 158, 171, 173, 183, 188, 191, 193, 194, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 224, 229, 240, 243, 244, 253, 259, 262, 264, 265, 270, 271, 273, 275, 276, 283, 284, 288, 290, 292, 293, 301, 307, 311, 332, 333, 341, 356, 366, 442, 450, 454, 460, 482, 493, 520, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 617, 619, 629, 636, 673, 678, 692, 695, 700, 702, 704, 719, 723, 725, 726, 728, 743, 745, 746, 754, 759, 769, 785, 788, 790, 798, 802, 805, 806, 807, 809, 810, 813, 814, 815, 817, 818, 822, 839, 844, 845, 846, 848, 854, 855, 858, 860, 862, 863, 871, 875, 896, 905, 1012, 1013, 1021, 1026, 1048, 1059, 1107, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1148, 1159, 1166, 1204, 1232, 1240, 1246, 1248, 1257, 1258, 1259], "per": [14, 33, 36, 42, 133, 156, 158, 171, 198, 229, 230, 247, 254, 271, 282, 296, 298, 299, 307, 343, 366, 492, 495, 497, 528, 529, 550, 551, 553, 555, 557, 558, 619, 678, 683, 695, 769, 785, 834, 840, 845, 852, 866, 868, 869, 875, 879, 907, 1058, 1061, 1063, 1221, 1232], "everi": [14, 33, 42, 128, 129, 142, 194, 200, 262, 277, 307, 335, 336, 337, 338, 341, 343, 349, 377, 378, 379, 380, 381, 415, 428, 442, 454, 485, 486, 490, 493, 496, 497, 498, 506, 509, 514, 518, 585, 629, 705, 706, 769, 802, 807, 809, 875, 899, 900, 901, 902, 905, 907, 913, 944, 945, 946, 947, 948, 985, 998, 1012, 1021, 1024, 1051, 1052, 1056, 1059, 1062, 1063, 1064, 1072, 1075, 1080, 1084, 1121, 1159, 1232], "process": [14, 33, 42, 43, 44, 45, 53, 54, 128, 129, 130, 142, 164, 242, 307, 790, 791, 875], "liter": [15, 16, 20, 35, 130, 161, 162, 163, 246, 247, 251, 276, 281, 282, 307, 318, 360, 371, 393, 434, 435, 443, 450, 455, 457, 466, 480, 527, 546, 548, 561, 562, 572, 581, 623, 625, 633, 642, 643, 670, 671, 679, 688, 690, 692, 698, 699, 700, 708, 709, 712, 725, 729, 733, 735, 738, 747, 751, 753, 755, 769, 804, 833, 834, 837, 848, 851, 852, 875, 881, 923, 938, 959, 1014, 1031, 1117, 1135, 1137, 1140, 1153, 1155, 1163, 1172, 1173, 1232], "left": [15, 16, 36, 47, 151, 152, 153, 154, 200, 214, 215, 240, 276, 307, 382, 436, 438, 439, 464, 466, 574, 586, 589, 591, 593, 595, 597, 600, 602, 604, 608, 676, 698, 705, 706, 710, 711, 713, 714, 719, 743, 756, 757, 759, 769, 809, 813, 814, 831, 848, 875, 949, 1007, 1009, 1010, 1031, 1111, 1136, 1215, 1232, 1242, 1246, 1250], "center": [15, 16, 36, 307, 436, 438, 439, 587, 588, 590, 592, 594, 596, 599, 601, 603, 769, 1007, 1009, 1010, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1232], "cell": [15, 16, 36, 307], "valueerror": [15, 20], "recognis": [15, 16, 20, 881], "column_abc": 15, "column_xyz": 15, "keyerror": 16, "datetim": [16, 33, 36, 42, 47, 87, 123, 132, 143, 158, 159, 160, 162, 172, 179, 198, 200, 213, 215, 240, 255, 277, 307, 310, 339, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 488, 586, 589, 591, 593, 595, 597, 600, 602, 604, 656, 659, 676, 697, 709, 710, 711, 713, 714, 715, 721, 729, 756, 757, 769, 787, 795, 809, 814, 831, 875, 881, 903, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1008, 1054, 1102, 1103, 1186, 1189, 1213, 1215, 1232, 1253], "date": [16, 36, 47, 62, 128, 129, 131, 133, 139, 142, 148, 172, 179, 198, 200, 213, 215, 240, 255, 307, 310, 339, 389, 391, 392, 393, 394, 397, 399, 401, 402, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 488, 586, 589, 591, 593, 595, 597, 600, 602, 604, 656, 658, 676, 697, 710, 711, 713, 714, 721, 729, 755, 769, 787, 795, 809, 814, 831, 875, 881, 903, 955, 957, 958, 959, 960, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1008, 1054, 1102, 1103, 1186, 1188, 1215, 1232, 1250], "333": [16, 606, 769, 1133, 1232], "mno": [16, 20], "2023": [16, 36, 123, 150, 213, 307, 393, 715, 729, 881, 959], "29": [16, 150, 390, 408, 956, 978], "2001": [16, 391, 392, 397, 399, 401, 404, 407, 411, 412, 413, 415, 419, 428, 429, 430, 431, 589, 591, 593, 595, 597, 600, 602, 604, 656, 769, 881, 957, 958, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 985, 989, 998, 999, 1000, 1001, 1002, 1186], "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 128, 129, 138, 142, 146, 148, 155, 158, 162, 169, 171, 173, 178, 179, 183, 185, 190, 191, 193, 206, 214, 221, 222, 223, 230, 233, 235, 251, 254, 256, 257, 258, 261, 266, 267, 271, 274, 276, 278, 281, 288, 307, 319, 321, 322, 332, 335, 336, 343, 344, 351, 352, 359, 361, 365, 366, 367, 371, 375, 376, 377, 380, 385, 387, 388, 411, 414, 421, 422, 423, 424, 425, 426, 427, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 451, 458, 464, 465, 473, 474, 475, 476, 481, 483, 484, 490, 491, 494, 495, 497, 499, 500, 501, 509, 510, 511, 512, 513, 515, 520, 528, 529, 541, 549, 562, 563, 564, 565, 568, 578, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 613, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 646, 648, 649, 650, 656, 657, 659, 661, 666, 667, 668, 669, 676, 677, 678, 687, 688, 689, 690, 695, 698, 699, 700, 702, 704, 708, 712, 717, 728, 729, 733, 735, 738, 745, 746, 751, 753, 759, 769, 785, 788, 794, 795, 798, 804, 805, 812, 813, 825, 835, 837, 840, 845, 847, 848, 851, 853, 858, 875, 881, 885, 886, 896, 899, 900, 907, 908, 915, 916, 924, 928, 929, 937, 938, 943, 951, 953, 954, 984, 991, 992, 993, 994, 995, 996, 997, 1005, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1023, 1024, 1029, 1030, 1041, 1042, 1043, 1047, 1049, 1050, 1053, 1056, 1057, 1060, 1061, 1063, 1065, 1066, 1067, 1076, 1078, 1079, 1081, 1086, 1093, 1106, 1107, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1140, 1144, 1149, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1176, 1178, 1179, 1180, 1186, 1187, 1189, 1191, 1196, 1199, 1210, 1213, 1214, 1215, 1217, 1232, 1242, 1246, 1248, 1249, 1256, 1257, 1259], "07": [16, 128, 158, 179, 307, 389, 392, 393, 404, 414, 415, 428, 656, 709, 710, 712, 713, 721, 795, 875, 881, 955, 959, 984, 1186, 1253], "05": [16, 148, 151, 152, 153, 154, 158, 172, 179, 277, 307, 389, 392, 393, 394, 395, 396, 400, 403, 404, 405, 406, 408, 409, 410, 414, 416, 417, 418, 420, 421, 697, 709, 710, 712, 713, 787, 795, 814, 875, 881, 959, 960, 961, 962, 984, 985, 987, 988, 990, 991, 998, 1253], "visibl": [17, 186, 307, 1006, 1232], "eg": [17, 25, 36, 55, 131, 167, 265, 307, 415, 656, 659, 679, 769, 881, 1024, 1186, 1189, 1232], "low": [17, 130, 574, 769, 1111, 1232], "rang": [17, 36, 130, 131, 179, 186, 200, 213, 307, 323, 383, 389, 397, 407, 412, 413, 415, 428, 429, 464, 692, 697, 699, 709, 710, 711, 712, 713, 714, 725, 726, 755, 756, 757, 769, 795, 809, 875, 881, 950, 955, 963, 977, 982, 983, 985, 998, 999, 1006, 1107, 1232, 1252], "98": [17, 205, 307, 365, 453, 456, 618, 660, 677, 769, 1190], "99": [17, 36, 189, 190, 205, 208, 276, 307, 317, 365, 443, 445, 453, 456, 618, 677, 759, 769, 803, 804, 848, 875, 1004, 1014, 1232, 1251], "tbl_col": 17, "95": [17, 317, 769, 881], "96": [17, 179, 307, 317, 769, 795, 875, 1046, 1232], "97": [17, 205, 307, 317, 769, 1046, 1232], "move": [18, 243, 307, 389, 436, 437, 438, 439, 588, 590, 594, 601, 769, 955, 1007, 1008, 1009, 1010, 1123, 1124, 1126, 1130, 1232], "inlin": [18, 243, 307, 623, 630, 631, 633, 642, 643, 1153, 1160, 1161, 1163, 1172, 1173, 1248], "parenthes": 18, "inform": [19, 23, 34, 52, 132, 140, 142, 143, 144, 147, 151, 153, 177, 179, 307, 310, 311, 478, 616, 623, 630, 631, 633, 642, 643, 769, 795, 827, 875, 879, 932, 1046, 1147, 1153, 1160, 1161, 1163, 1172, 1173, 1232, 1236], "below": [19, 35, 132, 133, 143, 144, 183, 233, 307, 445, 634, 657, 710, 711, 713, 714, 756, 757, 759, 765, 769, 798, 875, 1164, 1187, 1256], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_no_bord": 20, "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_horizontal_onli": 20, "ascii_markdown": 20, "utf8_ful": [20, 47, 123], "utf8_no_bord": 20, "utf8_borders_onli": 20, "utf8_horizontal_onli": 20, "noth": [20, 630, 637, 1160, 1167], "rounded_corn": 20, "border": 20, "includ": [20, 30, 33, 35, 36, 42, 52, 121, 130, 132, 143, 144, 158, 159, 175, 179, 186, 191, 231, 243, 270, 272, 275, 276, 307, 382, 416, 446, 450, 461, 466, 535, 574, 588, 590, 592, 594, 596, 598, 599, 601, 603, 647, 648, 651, 652, 697, 705, 745, 746, 769, 795, 805, 848, 875, 881, 949, 950, 986, 1006, 1017, 1027, 1031, 1111, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1177, 1178, 1181, 1232, 1256], "divid": [20, 382, 415, 428, 436, 438, 439, 450, 478, 574, 769, 949, 985, 998, 1007, 1009, 1010, 1046, 1111, 1232, 1251], "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 99, 134, 142, 151, 152, 153, 154, 156, 167, 191, 199, 218, 233, 242, 243, 254, 273, 281, 282, 286, 293, 307, 315, 322, 355, 387, 388, 446, 450, 452, 453, 456, 519, 533, 537, 567, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 619, 629, 638, 669, 769, 790, 791, 805, 808, 818, 840, 846, 851, 852, 856, 875, 881, 883, 919, 953, 954, 959, 1085, 1093, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1159, 1168, 1223, 1232, 1244, 1246, 1253], "dens": [20, 198, 307, 577, 769, 1113, 1232], "space": [20, 200, 307, 809, 875, 881], "horizont": [20, 55, 91, 193, 204, 220, 222, 227, 258, 275, 307, 688, 690, 699, 700, 705, 706, 708, 716, 719, 733, 735, 738, 743, 753, 853, 875], "markdown": 20, "compat": [20, 36, 41, 45, 86, 307, 623, 625, 630, 631, 632, 633, 642, 643, 875, 881, 1153, 1155, 1160, 1161, 1162, 1163, 1172, 1173, 1253, 1256], "utf8": [20, 128, 129, 142, 634, 646, 657, 1164, 1176, 1187], "No": [20, 664, 1194], "round": [20, 36, 49, 123, 130, 307, 370, 374, 449, 606, 674, 769, 935, 1019, 1133, 1232, 1250], "corner": [20, 36, 123, 307], "op": [20, 162, 307, 535, 580, 769, 875, 1232], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 128, 129, 130, 131, 133, 137, 138, 139, 140, 142, 146, 147, 148, 151, 152, 153, 154, 158, 159, 160, 162, 164, 171, 179, 182, 183, 184, 187, 188, 191, 198, 199, 200, 201, 206, 212, 215, 218, 225, 231, 240, 241, 242, 243, 246, 247, 255, 265, 266, 271, 274, 277, 281, 282, 284, 285, 286, 293, 307, 318, 359, 360, 361, 362, 365, 366, 382, 387, 388, 389, 397, 407, 411, 412, 415, 417, 428, 429, 440, 443, 446, 450, 451, 459, 491, 495, 528, 529, 541, 567, 574, 577, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 613, 616, 622, 626, 627, 630, 634, 635, 636, 640, 641, 642, 643, 651, 652, 653, 654, 655, 656, 657, 667, 670, 677, 678, 697, 717, 721, 729, 731, 745, 746, 747, 748, 751, 759, 761, 762, 764, 765, 769, 770, 771, 774, 776, 777, 778, 785, 795, 798, 800, 801, 805, 808, 809, 810, 812, 814, 817, 818, 823, 827, 831, 833, 834, 835, 841, 845, 847, 851, 852, 855, 856, 863, 875, 879, 880, 881, 884, 887, 923, 924, 925, 928, 937, 949, 950, 953, 954, 955, 963, 977, 981, 982, 985, 987, 998, 999, 1013, 1014, 1017, 1025, 1057, 1061, 1093, 1111, 1113, 1117, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1144, 1147, 1152, 1156, 1157, 1164, 1165, 1166, 1170, 1171, 1172, 1173, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1213, 1217, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239, 1240, 1244, 1257, 1259], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 128, 129, 133, 137, 138, 139, 142, 161, 163, 167, 172, 190, 191, 198, 199, 200, 212, 224, 233, 240, 241, 242, 249, 251, 266, 269, 287, 307, 317, 351, 382, 445, 446, 450, 453, 456, 458, 513, 520, 525, 550, 551, 553, 555, 557, 558, 585, 586, 610, 618, 630, 631, 632, 644, 667, 731, 749, 759, 765, 769, 787, 804, 805, 808, 809, 822, 831, 836, 837, 853, 857, 875, 887, 915, 920, 949, 1016, 1023, 1079, 1086, 1091, 1111, 1121, 1140, 1160, 1161, 1162, 1174, 1197, 1213, 1232, 1236, 1245, 1246, 1248, 1251, 1258], "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 137, 138, 139, 140, 143, 144, 151, 153, 158, 167, 177, 179, 191, 211, 212, 216, 218, 224, 229, 241, 242, 244, 255, 265, 266, 270, 273, 293, 307, 310, 311, 320, 357, 446, 450, 458, 478, 508, 521, 525, 528, 529, 566, 607, 616, 631, 638, 656, 658, 659, 680, 691, 702, 718, 724, 727, 734, 736, 739, 740, 749, 759, 769, 795, 822, 841, 846, 875, 879, 881, 921, 932, 950, 1023, 1046, 1074, 1087, 1093, 1134, 1147, 1161, 1168, 1186, 1188, 1189, 1211, 1213, 1218, 1232, 1236, 1245, 1246, 1257, 1258, 1259], "semigraph": 20, "box": [20, 218, 307], "draw": [20, 25, 158, 162, 1259], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 184, 255, 307, 608, 633, 637, 654, 655, 656, 659, 769, 841, 875, 1136, 1163, 1167, 1184, 1185, 1186, 1189, 1232, 1242, 1256], "unicod": [20, 634, 639, 646, 657, 881, 1164, 1169, 1176, 1187], "block": [20, 54, 199, 273, 307, 759, 791, 808, 829, 846, 854, 855, 863, 875, 1135, 1137, 1232], "http": [20, 36, 37, 38, 117, 130, 131, 134, 136, 169, 177, 307, 630, 632, 838, 875, 1160, 1162], "en": [20, 36, 307], "wikipedia": 20, "org": [20, 37, 38, 117, 130, 131, 134, 136, 169, 177, 307, 838, 875], "wiki": 20, "drawing_charact": 20, "box_draw": 20, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "hide": [21, 22, 23, 24, 36, 307], "etc": [21, 35, 36, 128, 132, 133, 134, 136, 143, 144, 145, 307, 769, 879, 881, 1135, 1137, 1232, 1253], "between": [24, 55, 87, 155, 156, 158, 162, 177, 235, 242, 299, 307, 344, 367, 385, 386, 466, 490, 499, 509, 510, 511, 512, 568, 574, 575, 596, 597, 622, 635, 693, 694, 697, 701, 703, 742, 745, 746, 769, 828, 869, 875, 908, 929, 932, 951, 952, 1031, 1056, 1065, 1075, 1076, 1077, 1078, 1107, 1111, 1112, 1127, 1152, 1165, 1232, 1254], "set_tbl_column_data_type_inlin": 24, "max": [25, 36, 41, 45, 179, 190, 199, 220, 233, 240, 307, 311, 377, 445, 520, 528, 567, 577, 581, 586, 588, 589, 609, 649, 733, 749, 769, 795, 804, 808, 831, 875, 944, 950, 1016, 1086, 1113, 1123, 1138, 1179, 1232, 1240, 1248, 1250], "tbl_row": [25, 179, 307, 795, 875], "width": [26, 36, 56, 128, 129, 142, 307, 310, 519, 875, 1085], "id": [26, 36, 55, 128, 144, 265, 272, 284, 293, 307, 585, 642, 643, 681, 769, 855, 863, 875, 881, 1121, 1219, 1232, 1257, 1259], "seq1": 26, "seq2": 26, "seq": 26, "atgataaaggag": 26, "gcaacgcatata": 26, "12": [26, 36, 47, 123, 128, 150, 158, 179, 200, 211, 215, 240, 255, 277, 307, 318, 379, 390, 392, 393, 397, 404, 407, 408, 409, 411, 412, 413, 415, 428, 429, 430, 437, 464, 496, 568, 576, 586, 601, 611, 625, 660, 706, 709, 712, 713, 714, 730, 755, 756, 757, 769, 795, 809, 810, 814, 817, 831, 838, 844, 875, 881, 956, 958, 959, 970, 971, 973, 977, 985, 998, 1008, 1093, 1132, 1155, 1190, 1232, 1251, 1253, 1259], "atg": 26, "ata": 26, "aag": 26, "gag": 26, "gca": 26, "acg": 26, "cat": [26, 46, 84, 85, 382, 574, 623, 625, 662, 665, 676, 700, 764, 769, 881, 949, 1027, 1111, 1153, 1155, 1192, 1195, 1228, 1232], "also": [27, 33, 36, 42, 46, 119, 130, 133, 134, 139, 142, 157, 158, 161, 162, 167, 184, 199, 200, 225, 229, 240, 242, 246, 254, 265, 276, 281, 284, 307, 377, 380, 389, 411, 414, 446, 466, 529, 535, 577, 581, 619, 642, 643, 651, 652, 667, 697, 705, 706, 709, 712, 719, 721, 743, 759, 768, 769, 775, 808, 809, 823, 831, 833, 840, 848, 851, 853, 855, 875, 881, 955, 984, 1031, 1113, 1117, 1155, 1172, 1173, 1181, 1232, 1236, 1242, 1245, 1257], "char": [27, 631, 1161], "omit": [27, 119, 123, 156, 167, 229, 243, 265, 270, 307, 725, 726, 756, 757, 881, 1257], "set_decimal_separ": 27, "x": [27, 47, 55, 76, 93, 117, 123, 128, 129, 131, 142, 155, 156, 158, 169, 186, 204, 207, 209, 214, 224, 233, 242, 243, 272, 275, 307, 310, 316, 318, 320, 339, 344, 376, 383, 434, 435, 450, 455, 457, 459, 480, 487, 499, 525, 527, 528, 529, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 566, 572, 580, 581, 585, 613, 616, 648, 670, 671, 676, 679, 686, 688, 690, 693, 694, 705, 706, 708, 719, 729, 730, 733, 735, 738, 743, 748, 753, 759, 769, 813, 818, 822, 839, 841, 875, 881, 908, 932, 943, 1016, 1093, 1117, 1144, 1147, 1178, 1211, 1215, 1216, 1232, 1242, 1243, 1246, 1251, 1256, 1258], "1234567": 27, "987654": [27, 881], "10101": 27, "y": [27, 47, 55, 76, 93, 117, 123, 155, 156, 158, 169, 186, 207, 209, 214, 224, 233, 242, 243, 272, 275, 307, 310, 316, 318, 320, 339, 344, 417, 420, 434, 435, 455, 457, 480, 487, 499, 527, 529, 549, 551, 553, 555, 557, 558, 561, 562, 566, 580, 581, 585, 656, 658, 659, 670, 679, 686, 688, 690, 693, 694, 708, 715, 729, 733, 735, 738, 748, 753, 769, 813, 822, 839, 841, 875, 881, 908, 932, 987, 990, 1117, 1186, 1188, 1189, 1232, 1246, 1253, 1258], "1234": [27, 606, 769, 1133, 1232], "7654321": 27, "234": 27, "567": 27, "987": 27, "654": [27, 748, 841, 875], "00": [27, 36, 62, 172, 179, 200, 277, 307, 390, 391, 394, 398, 408, 409, 411, 414, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 589, 591, 593, 595, 597, 600, 602, 604, 656, 659, 663, 712, 713, 714, 715, 755, 756, 757, 769, 787, 795, 809, 814, 875, 881, 956, 957, 960, 961, 962, 964, 965, 966, 971, 972, 976, 978, 979, 980, 981, 984, 985, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1186, 1189, 1193], "321": [27, 1259], "strip": [28, 651, 652, 653, 654, 655, 1181, 1182, 1183, 1252], "trail": [28, 198, 307, 651, 652, 1181, 1182], "zero": [28, 36, 116, 117, 126, 128, 129, 134, 136, 140, 157, 160, 169, 190, 200, 212, 241, 255, 260, 266, 267, 307, 445, 520, 525, 608, 616, 666, 679, 769, 788, 804, 809, 875, 937, 1016, 1086, 1147, 1196, 1207, 1213, 1214, 1232, 1251], "enabl": [28, 29, 41, 45, 46, 84, 85, 151, 152, 153, 154, 166, 246, 267, 281, 307, 319, 321, 581, 609, 624, 644, 683, 765, 769, 790, 833, 851, 875, 885, 886, 1117, 1138, 1154, 1174, 1214, 1221, 1232], "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 148, 198, 200, 201, 202, 205, 214, 217, 259, 260, 270, 275, 279, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 316, 318, 376, 399, 417, 420, 466, 571, 611, 625, 631, 642, 643, 648, 656, 658, 659, 698, 715, 721, 748, 769, 809, 813, 841, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 881, 932, 943, 965, 987, 990, 1031, 1053, 1155, 1161, 1172, 1173, 1178, 1186, 1188, 1189, 1200, 1232, 1246, 1248, 1249, 1252, 1253], "01000": 28, "67890": 28, "scale": [28, 63, 186, 307, 529, 571, 660, 769, 881, 1006, 1190, 1232], "trim_decimal_zero": 28, "01": [28, 47, 61, 62, 158, 172, 179, 198, 200, 215, 240, 277, 307, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 656, 658, 659, 663, 697, 709, 710, 711, 712, 713, 714, 715, 769, 787, 795, 809, 831, 875, 881, 955, 957, 959, 960, 961, 962, 965, 966, 971, 972, 976, 978, 979, 980, 981, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1186, 1188, 1189, 1193], "6789": [28, 881], "addit": [29, 32, 34, 35, 36, 119, 127, 132, 133, 143, 144, 156, 158, 160, 162, 183, 187, 199, 231, 246, 247, 254, 267, 274, 281, 282, 286, 307, 316, 398, 440, 443, 567, 619, 623, 630, 631, 633, 642, 643, 667, 670, 695, 698, 699, 700, 717, 747, 748, 751, 769, 801, 808, 833, 834, 840, 847, 851, 852, 856, 875, 881, 956, 964, 1014, 1153, 1160, 1161, 1163, 1172, 1173, 1214, 1232, 1236], "verbos": [29, 151, 153, 167, 631, 1161], "debug": [29, 790, 802, 818, 875, 1259], "log": [29, 49, 366, 433, 525, 548, 572, 678, 769, 1004, 1232, 1250], "do_polars_oper": 29, "if_set": 30, "env_onli": 30, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 158, 192, 212, 231, 237, 241, 242, 243, 261, 262, 265, 270, 272, 307, 769, 829, 875, 879, 881, 1232, 1243], "show": [30, 36, 179, 183, 198, 216, 230, 307, 461, 769, 795, 798, 827, 838, 875, 1027, 1232, 1244, 1255], "variabl": [30, 72, 140, 142, 145, 147, 161, 164, 224, 263, 307, 822, 875, 1208, 1232, 1242, 1256], "chang": [30, 37, 42, 43, 44, 45, 47, 53, 54, 63, 65, 128, 129, 130, 140, 147, 148, 255, 265, 270, 275, 276, 283, 307, 311, 381, 382, 385, 415, 461, 529, 567, 568, 574, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 745, 746, 769, 790, 791, 841, 848, 854, 875, 879, 881, 932, 933, 948, 949, 985, 1027, 1107, 1111, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1142, 1211, 1216, 1232], "restrict": [30, 649, 1179], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 128, 129, 130, 131, 135, 137, 138, 141, 142, 146, 212, 231, 241, 242, 243, 261, 262, 265, 270, 307, 875], "those": [30, 36, 128, 243, 267, 276, 307, 450, 577, 630, 731, 769, 848, 875, 881, 1113, 1160, 1214, 1232], "been": [30, 36, 165, 169, 288, 307, 452, 529, 544, 577, 769, 858, 1113, 1232], "set_fmt_float": 30, "via": [30, 128, 129, 130, 140, 142, 145, 146, 147, 180, 212, 242, 307, 384, 529, 632, 769, 796, 875, 1162], "set_stat": 30, "all_stat": 30, "io": [31, 33, 36, 37, 38, 126, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 180, 307, 384, 452, 541, 769, 796, 835, 875], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 186, 307, 634, 638, 639, 646, 657, 875, 1006, 1164, 1168, 1169, 1176, 1187, 1232, 1252], "compress": [31, 37, 38, 41, 43, 45, 307, 584, 769, 875, 1120, 1232], "avrocompress": [31, 307], "uncompress": [31, 37, 38, 41, 45, 134, 145, 307, 875], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 127, 129, 134, 167, 175, 307, 371, 544, 769, 816, 838, 875, 881, 938, 1232], "apach": [31, 37, 38, 41, 126, 130, 131, 134, 136, 144, 307], "avro": [31, 126, 307, 781], "writabl": [31, 33, 37, 38, 39, 40, 41, 248, 266, 307, 1213, 1232], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 180, 200, 207, 209, 214, 243, 248, 265, 266, 307, 384, 390, 452, 492, 528, 543, 577, 630, 652, 653, 683, 765, 769, 786, 791, 796, 809, 875, 879, 956, 1058, 1113, 1160, 1221, 1232], "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 156, 158, 159, 169, 175, 180, 199, 200, 215, 216, 231, 240, 243, 248, 255, 265, 266, 267, 307, 384, 541, 710, 711, 713, 714, 729, 748, 756, 757, 769, 781, 796, 809, 814, 831, 841, 875, 881, 1207, 1232, 1242, 1245, 1256], "snappi": [31, 41, 45, 307, 875], "deflat": [31, 307], "pathlib": [31, 33, 37, 38, 41, 142, 307], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 137, 138, 172, 175, 176, 177, 181, 182, 183, 184, 185, 188, 191, 193, 195, 196, 197, 201, 202, 203, 204, 205, 206, 208, 214, 217, 218, 219, 220, 221, 222, 223, 226, 227, 230, 233, 235, 237, 238, 241, 244, 245, 246, 248, 250, 253, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 272, 273, 274, 278, 279, 280, 285, 307, 368, 382, 384, 411, 454, 460, 463, 482, 533, 535, 537, 538, 539, 540, 541, 542, 543, 574, 582, 622, 625, 627, 629, 631, 632, 635, 645, 647, 649, 651, 652, 653, 654, 655, 662, 665, 673, 691, 701, 702, 703, 718, 722, 723, 724, 727, 728, 732, 734, 736, 737, 739, 740, 742, 747, 750, 754, 758, 759, 765, 769, 787, 792, 793, 797, 798, 799, 805, 811, 812, 813, 825, 829, 832, 833, 846, 847, 850, 853, 875, 880, 881, 930, 949, 981, 1065, 1111, 1118, 1155, 1157, 1159, 1161, 1162, 1175, 1179, 1184, 1185, 1192, 1195, 1232, 1244, 1246, 1247, 1248, 1249, 1252], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 137, 138, 172, 175, 176, 177, 181, 182, 183, 184, 185, 188, 191, 193, 195, 196, 197, 202, 204, 205, 206, 208, 214, 217, 218, 219, 220, 221, 222, 223, 226, 227, 230, 233, 235, 237, 238, 241, 244, 245, 246, 248, 253, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 273, 274, 278, 279, 280, 285, 307, 368, 384, 463, 533, 535, 537, 538, 539, 540, 541, 542, 543, 616, 625, 627, 629, 631, 632, 645, 647, 649, 654, 655, 691, 701, 702, 703, 718, 723, 724, 727, 728, 732, 734, 736, 737, 739, 740, 747, 750, 754, 758, 759, 765, 769, 787, 792, 793, 797, 798, 799, 805, 811, 812, 813, 825, 829, 832, 833, 846, 847, 850, 875, 880, 881, 930, 1065, 1147, 1155, 1157, 1159, 1161, 1162, 1175, 1179, 1184, 1185, 1232, 1244, 1246, 1247, 1248, 1249, 1252], "ham": [31, 33, 35, 37, 38, 41, 172, 175, 176, 177, 181, 182, 183, 184, 185, 191, 196, 201, 202, 204, 214, 217, 219, 221, 223, 226, 230, 235, 237, 238, 241, 244, 245, 246, 253, 256, 257, 259, 263, 264, 266, 267, 268, 273, 278, 279, 307, 368, 542, 787, 792, 793, 797, 798, 799, 805, 813, 825, 829, 832, 833, 846, 853, 875, 930, 1246, 1247], "dirpath": [31, 33, 37, 38, 41, 142, 307], "new_fil": [31, 33, 37, 38, 41, 307], "t": [32, 33, 35, 42, 55, 127, 128, 133, 139, 142, 200, 215, 218, 232, 273, 275, 307, 381, 390, 398, 414, 433, 436, 438, 439, 492, 529, 571, 630, 633, 642, 643, 653, 656, 659, 759, 769, 809, 826, 846, 875, 881, 948, 984, 1004, 1007, 1009, 1010, 1058, 1093, 1160, 1163, 1172, 1173, 1182, 1183, 1186, 1189, 1232, 1242, 1243], "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 127, 130, 131, 158, 160, 162, 177, 191, 232, 267, 307, 571, 769, 805, 826, 875, 879, 1214, 1232, 1243, 1256], "copi": [32, 116, 117, 127, 169, 173, 174, 213, 260, 266, 267, 281, 307, 443, 769, 788, 789, 851, 875, 937, 939, 1014, 1207, 1212, 1213, 1214, 1232], "csv": [32, 33, 42, 43, 44, 45, 127, 128, 129, 133, 142, 307, 781, 875], "system": [32, 128, 129, 307, 394, 960], "clipboard": [32, 127, 307, 781], "write_csv": [32, 129, 142, 307], "past": [32, 307, 818, 875], "excel": [32, 36, 127, 133, 307, 781], "similar": [32, 41, 127, 164, 193, 215, 251, 307, 351, 417, 420, 513, 567, 610, 670, 728, 759, 769, 802, 814, 837, 875, 915, 987, 990, 1079, 1140, 1232], "spreadsheet": [32, 127, 133, 139, 233, 307], "softwar": [32, 127, 307], "field": [32, 33, 35, 42, 76, 109, 112, 119, 274, 307, 356, 520, 529, 552, 554, 556, 584, 631, 632, 636, 648, 649, 669, 670, 683, 705, 706, 730, 751, 769, 847, 875, 920, 1086, 1093, 1120, 1162, 1178, 1179, 1200, 1202, 1232, 1253], "symbol": [32, 33, 42, 307, 769, 875], "argument": [32, 35, 41, 127, 128, 132, 140, 142, 143, 158, 160, 162, 177, 181, 187, 199, 200, 215, 231, 232, 240, 246, 247, 254, 267, 274, 277, 281, 282, 286, 307, 415, 428, 440, 446, 466, 528, 567, 571, 586, 619, 651, 652, 653, 670, 687, 693, 694, 695, 698, 699, 700, 702, 704, 717, 747, 751, 759, 769, 797, 801, 808, 809, 826, 831, 833, 834, 840, 847, 851, 852, 856, 875, 879, 881, 985, 998, 1031, 1181, 1182, 1183, 1214, 1232, 1251, 1252], "pass": [32, 34, 35, 36, 41, 47, 118, 127, 130, 131, 133, 140, 142, 148, 151, 153, 156, 158, 160, 162, 171, 177, 181, 199, 200, 202, 217, 231, 232, 240, 246, 251, 254, 259, 267, 270, 271, 277, 281, 285, 286, 307, 310, 351, 366, 389, 399, 411, 414, 443, 463, 513, 528, 529, 567, 571, 581, 586, 610, 619, 651, 652, 653, 678, 687, 695, 697, 704, 721, 751, 759, 765, 769, 785, 797, 808, 809, 811, 818, 826, 831, 833, 837, 838, 840, 845, 851, 856, 863, 875, 879, 880, 915, 955, 965, 984, 1014, 1026, 1048, 1079, 1093, 1117, 1140, 1181, 1182, 1183, 1204, 1214, 1232, 1236, 1243, 1256], "read_clipboard": [32, 307], "read": [32, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 188, 307, 384, 452, 759, 769, 796, 802, 875, 1013, 1232], "comma": [32, 33, 128, 129, 142, 307], "include_bom": [33, 42, 307, 875], "include_head": [33, 36, 42, 129, 272, 307, 875], "line_termin": [33, 42, 307, 875], "quote_char": [33, 42, 128, 129, 142, 307, 875], "batch_siz": [33, 42, 128, 129, 130, 146, 148, 270, 307, 875], "1024": [33, 41, 42, 45, 128, 129, 130, 146, 307, 875], "datetime_format": [33, 42, 307, 875], "date_format": [33, 42, 307, 875], "time_format": [33, 42, 307, 875], "null_valu": [33, 42, 128, 129, 142, 307, 875], "quote_styl": [33, 42, 307, 875], "csvquotestyl": [33, 42, 307, 875], "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 151, 152, 153, 154, 159, 160, 161, 169, 183, 188, 198, 200, 202, 210, 211, 212, 215, 217, 218, 222, 229, 231, 233, 240, 242, 243, 244, 248, 251, 253, 255, 258, 259, 262, 263, 265, 266, 272, 273, 275, 276, 285, 307, 319, 321, 344, 351, 356, 367, 389, 393, 394, 408, 409, 417, 420, 446, 461, 466, 478, 499, 508, 513, 514, 520, 528, 529, 535, 541, 542, 567, 572, 574, 577, 579, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 612, 616, 617, 622, 631, 632, 633, 634, 635, 636, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 663, 666, 683, 687, 689, 692, 696, 697, 700, 701, 704, 705, 710, 711, 713, 714, 715, 718, 719, 725, 726, 727, 729, 731, 741, 744, 745, 746, 751, 756, 757, 759, 760, 769, 790, 791, 798, 800, 809, 813, 814, 818, 822, 829, 831, 835, 837, 839, 841, 846, 848, 863, 875, 879, 881, 885, 886, 908, 915, 920, 929, 938, 955, 959, 960, 978, 979, 987, 990, 1013, 1024, 1026, 1027, 1031, 1045, 1046, 1048, 1065, 1074, 1079, 1080, 1086, 1093, 1111, 1113, 1115, 1117, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1136, 1138, 1140, 1143, 1147, 1148, 1152, 1161, 1162, 1163, 1164, 1165, 1166, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1193, 1196, 1204, 1207, 1211, 1213, 1221, 1232, 1240, 1242, 1249, 1256], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 128, 129, 130, 133, 139, 140, 142, 148, 155, 156, 157, 158, 162, 170, 171, 198, 211, 212, 215, 218, 229, 231, 241, 242, 243, 246, 247, 248, 251, 265, 266, 267, 271, 282, 283, 285, 307, 310, 311, 332, 351, 366, 367, 382, 396, 437, 440, 450, 513, 528, 541, 574, 610, 622, 629, 638, 639, 642, 643, 651, 652, 653, 654, 655, 666, 678, 685, 692, 694, 696, 702, 710, 711, 713, 714, 715, 725, 726, 741, 744, 748, 751, 756, 757, 760, 769, 784, 785, 791, 800, 833, 834, 835, 837, 845, 852, 853, 854, 875, 881, 896, 915, 924, 929, 949, 962, 970, 971, 1008, 1024, 1079, 1111, 1135, 1137, 1140, 1149, 1152, 1159, 1168, 1169, 1172, 1173, 1181, 1182, 1183, 1196, 1213, 1214, 1232, 1236, 1240, 1244, 1256, 1257], "whether": [33, 42, 120, 122, 162, 166, 185, 211, 215, 249, 254, 307, 319, 321, 335, 336, 401, 416, 458, 483, 484, 609, 619, 695, 769, 818, 836, 840, 875, 881, 885, 886, 899, 900, 931, 933, 967, 986, 1005, 1023, 1049, 1050, 1232, 1242, 1256], "utf": [33, 42, 75, 307, 875], "bom": [33, 42, 307, 875], "header": [33, 36, 41, 42, 45, 123, 128, 129, 133, 142, 184, 233, 272, 307, 875], "end": [33, 36, 42, 128, 129, 142, 200, 307, 360, 363, 364, 390, 415, 440, 514, 623, 628, 631, 634, 640, 646, 650, 651, 652, 655, 692, 697, 709, 710, 711, 712, 713, 714, 717, 725, 726, 756, 757, 759, 769, 809, 810, 817, 827, 875, 881, 926, 956, 985, 1043, 1080, 1158, 1161, 1164, 1170, 1176, 1180, 1181, 1182, 1187, 1232, 1252], "each": [33, 36, 42, 47, 56, 63, 72, 129, 130, 133, 146, 151, 152, 153, 154, 156, 176, 178, 184, 191, 198, 199, 200, 213, 215, 218, 231, 240, 242, 244, 265, 270, 274, 276, 277, 285, 286, 288, 290, 292, 293, 301, 307, 332, 366, 382, 415, 428, 446, 469, 472, 498, 501, 508, 518, 525, 529, 567, 574, 577, 584, 585, 592, 596, 607, 612, 619, 631, 634, 638, 639, 646, 648, 649, 657, 678, 692, 695, 700, 725, 726, 751, 759, 769, 790, 793, 794, 799, 805, 809, 814, 827, 831, 847, 848, 856, 858, 860, 862, 863, 871, 875, 896, 936, 949, 985, 998, 1035, 1038, 1064, 1067, 1074, 1084, 1111, 1113, 1120, 1121, 1134, 1143, 1161, 1164, 1168, 1169, 1176, 1178, 1179, 1187, 1202, 1232, 1257, 1259], "quot": [33, 34, 42, 128, 129, 131, 142, 307, 875], "specifi": [33, 35, 36, 42, 47, 88, 94, 109, 112, 133, 139, 159, 171, 172, 186, 187, 190, 199, 200, 214, 231, 240, 241, 243, 246, 247, 251, 254, 265, 271, 274, 281, 282, 286, 307, 366, 371, 436, 438, 439, 440, 445, 567, 580, 581, 588, 590, 592, 594, 596, 599, 601, 603, 610, 619, 670, 678, 695, 698, 699, 700, 710, 711, 713, 714, 715, 717, 747, 751, 756, 757, 769, 785, 787, 801, 804, 808, 809, 813, 831, 833, 834, 837, 840, 845, 847, 851, 852, 856, 875, 881, 938, 1006, 1007, 1009, 1010, 1016, 1117, 1140, 1211, 1232, 1246, 1258], "defin": [33, 36, 42, 62, 130, 137, 155, 156, 158, 172, 183, 187, 200, 218, 229, 232, 240, 276, 293, 307, 466, 495, 529, 571, 574, 585, 586, 589, 591, 593, 595, 597, 600, 602, 604, 634, 639, 646, 657, 710, 711, 713, 714, 731, 751, 756, 757, 769, 787, 798, 801, 809, 826, 831, 848, 863, 875, 880, 881, 1031, 1061, 1093, 1111, 1121, 1164, 1169, 1176, 1187, 1232], "chrono": [33, 42, 87, 307, 417, 420, 656, 658, 659, 663, 875, 987, 990, 1186, 1188, 1189, 1193], "rust": [33, 41, 42, 87, 103, 134, 136, 140, 218, 293, 307, 632, 875, 879, 1093, 1162, 1232], "crate": [33, 42, 87, 307, 623, 625, 630, 631, 632, 633, 642, 643, 656, 658, 659, 663, 875, 881, 1153, 1155, 1160, 1161, 1162, 1163, 1172, 1173, 1186, 1188, 1189, 1193], "fraction": [33, 42, 151, 152, 153, 154, 244, 307, 416, 508, 568, 607, 656, 659, 769, 875, 986, 1074, 1107, 1134, 1186, 1189, 1232], "second": [33, 42, 142, 145, 151, 152, 153, 154, 200, 215, 240, 277, 307, 400, 403, 405, 406, 410, 411, 415, 427, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 642, 643, 656, 659, 712, 713, 714, 715, 755, 756, 757, 759, 769, 809, 814, 831, 875, 881, 981, 985, 997, 998, 1008, 1172, 1173, 1186, 1189, 1232, 1252, 1253, 1257, 1259], "infer": [33, 42, 63, 76, 116, 118, 119, 120, 121, 122, 128, 129, 130, 133, 137, 138, 139, 140, 142, 146, 147, 218, 307, 528, 529, 582, 636, 656, 658, 659, 660, 663, 715, 729, 744, 769, 875, 1093, 1118, 1166, 1186, 1188, 1189, 1190, 1193, 1232], "timeunit": [33, 42, 62, 64, 307, 391, 393, 419, 431, 659, 712, 713, 714, 715, 875, 881, 957, 959, 989, 1001, 1189], "frame": [33, 34, 36, 42, 47, 54, 55, 119, 129, 133, 139, 151, 152, 172, 173, 179, 212, 213, 218, 225, 229, 232, 241, 242, 243, 255, 270, 275, 276, 307, 748, 787, 788, 795, 823, 826, 841, 848, 875, 881, 937, 1232, 1240, 1241, 1242, 1243, 1244, 1245, 1256, 1259], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 133, 135, 137, 138, 141, 146, 159, 160, 162, 184, 193, 248, 307, 367, 440, 611, 676, 717, 729, 769, 781, 799, 835, 875, 880, 881, 929, 950, 1093, 1141, 1215, 1232], "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 130, 255, 256, 265, 266, 278, 285, 307, 450, 473, 474, 516, 522, 528, 621, 634, 639, 646, 657, 684, 687, 701, 703, 715, 717, 729, 730, 731, 740, 745, 746, 750, 758, 765, 769, 841, 842, 849, 875, 881, 1135, 1151, 1164, 1169, 1176, 1187, 1213, 1222, 1232], "necessari": [33, 34, 42, 46, 85, 133, 266, 307, 875, 1213, 1232], "non_numer": [33, 42, 307, 875], "never": [33, 42, 130, 214, 241, 307, 813, 875], "strategi": [33, 42, 47, 55, 128, 155, 156, 157, 158, 159, 160, 162, 190, 200, 214, 215, 228, 276, 307, 445, 520, 529, 769, 804, 809, 813, 814, 848, 875, 1016, 1086, 1232], "put": [33, 42, 307, 311, 875], "around": [33, 42, 307, 875], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 142, 167, 215, 216, 243, 307, 644, 652, 653, 769, 875, 879, 881], "record": [33, 38, 42, 136, 148, 307, 814, 875], "termin": [33, 42, 307, 875], "indistinguish": [33, 42, 307, 875], "even": [33, 42, 128, 307, 437, 571, 574, 769, 875, 881, 1008, 1111, 1232], "invalid": [33, 42, 107, 128, 129, 142, 307, 367, 636, 637, 661, 679, 769, 875, 924, 929, 1166, 1167, 1191, 1232], "g": [33, 42, 128, 132, 134, 136, 143, 145, 148, 160, 169, 180, 211, 266, 275, 307, 316, 384, 437, 440, 529, 611, 717, 769, 796, 829, 875, 1008, 1232, 1259], "pars": [33, 42, 127, 128, 129, 131, 133, 138, 139, 142, 145, 146, 171, 199, 246, 247, 251, 254, 271, 281, 282, 286, 307, 366, 371, 466, 567, 581, 619, 636, 660, 661, 670, 678, 688, 690, 695, 698, 699, 700, 708, 721, 733, 735, 738, 747, 749, 751, 753, 759, 769, 785, 808, 833, 834, 837, 840, 845, 851, 852, 856, 875, 938, 1031, 1117, 1140, 1166, 1190, 1191, 1232, 1240], "valid": [33, 36, 42, 62, 130, 134, 136, 140, 162, 167, 186, 214, 307, 381, 623, 625, 630, 631, 632, 633, 637, 642, 643, 759, 769, 813, 875, 881, 948, 1006, 1024, 1153, 1155, 1160, 1161, 1162, 1163, 1167, 1172, 1173, 1232, 1240], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 149, 156, 158, 161, 163, 183, 200, 240, 263, 266, 307, 320, 370, 416, 449, 450, 566, 572, 574, 579, 585, 586, 598, 634, 657, 661, 686, 692, 721, 725, 726, 744, 769, 798, 809, 831, 875, 881, 935, 986, 1019, 1111, 1115, 1121, 1128, 1135, 1164, 1187, 1191, 1213, 1232, 1251, 1256, 1259], "aren": [33, 42, 307, 875], "strictli": [33, 42, 46, 85, 307, 802, 875], "table_nam": [34, 36, 255, 307, 841, 875], "connect": [34, 128, 130, 131, 134, 136, 140, 142, 145, 147, 148, 307, 782], "connectionorcursor": [34, 130, 307], "if_table_exist": [34, 307], "dbwritemod": [34, 307], "fail": [34, 35, 117, 132, 134, 138, 140, 142, 143, 145, 146, 147, 169, 266, 273, 307, 333, 418, 520, 656, 658, 659, 663, 769, 846, 875, 1093, 1186, 1188, 1189, 1193, 1213, 1232], "dbwriteengin": [34, 307], "engine_opt": [34, 133, 307], "databas": [34, 115, 130, 131, 307, 781], "new": [34, 35, 36, 133, 142, 167, 180, 194, 204, 205, 218, 229, 230, 237, 248, 255, 265, 270, 272, 274, 275, 276, 281, 282, 307, 318, 393, 442, 452, 454, 464, 535, 551, 552, 567, 581, 585, 642, 643, 648, 649, 667, 669, 670, 748, 765, 769, 781, 807, 829, 841, 847, 848, 851, 852, 863, 875, 881, 884, 959, 1012, 1021, 1104, 1116, 1117, 1121, 1172, 1173, 1178, 1179, 1197, 1200, 1209, 1211, 1216, 1232, 1256, 1258], "version": [34, 35, 52, 132, 133, 143, 150, 155, 156, 157, 158, 162, 165, 169, 170, 180, 201, 248, 255, 265, 266, 270, 283, 288, 307, 396, 408, 409, 431, 452, 459, 535, 544, 622, 624, 629, 670, 685, 694, 743, 748, 769, 784, 800, 841, 853, 854, 858, 875, 881, 962, 970, 971, 978, 979, 1001, 1024, 1025, 1152, 1154, 1159, 1211, 1213, 1216, 1232], "20": [34, 35, 36, 128, 133, 150, 155, 156, 157, 158, 162, 165, 170, 179, 180, 188, 204, 205, 225, 232, 234, 238, 248, 255, 265, 266, 270, 283, 288, 307, 330, 331, 332, 385, 392, 395, 396, 400, 403, 404, 405, 406, 410, 415, 416, 418, 428, 431, 452, 459, 464, 535, 544, 571, 589, 591, 593, 595, 597, 600, 602, 604, 629, 670, 685, 712, 721, 729, 748, 756, 769, 784, 795, 800, 823, 826, 841, 854, 858, 875, 881, 951, 958, 962, 973, 985, 998, 1001, 1011, 1024, 1159, 1211, 1213, 1216, 1232, 1246, 1247, 1249], "26": [34, 150, 155, 156, 157, 158, 162, 179, 307, 398, 429, 795, 875, 964], "instanti": [34, 36, 130, 160, 246, 265, 281, 307, 833, 851, 875, 880, 1211, 1232], "uri": [34, 35, 130, 131, 132, 143, 144, 307], "qualifi": [34, 307], "creat": [34, 36, 46, 85, 116, 120, 122, 128, 129, 130, 131, 134, 136, 140, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 173, 174, 200, 230, 233, 240, 265, 266, 277, 281, 284, 307, 311, 393, 415, 428, 437, 520, 578, 586, 589, 591, 593, 595, 597, 600, 602, 604, 699, 709, 710, 711, 712, 713, 714, 715, 755, 756, 757, 765, 769, 788, 789, 795, 800, 809, 831, 851, 855, 875, 937, 939, 949, 959, 985, 998, 1008, 1104, 1111, 1114, 1211, 1213, 1232, 1255, 1256, 1259], "append": [34, 35, 158, 188, 214, 215, 307, 578, 759, 769, 813, 814, 875, 1013, 1232], "your": [34, 36, 46, 47, 85, 128, 129, 130, 131, 133, 148, 212, 218, 242, 243, 246, 262, 281, 286, 293, 307, 394, 437, 452, 528, 529, 632, 656, 658, 659, 666, 731, 769, 810, 817, 818, 833, 851, 856, 863, 875, 960, 1008, 1093, 1162, 1186, 1188, 1189, 1196, 1232, 1259], "special": [34, 128, 129, 131, 142, 270, 284, 307, 587, 631, 642, 643, 769, 855, 875, 1093, 1122, 1161, 1172, 1173, 1232], "sqlalchemi": [34, 130, 150, 307], "adbc": [34, 130, 131, 307], "against": [34, 93, 128, 130, 255, 307, 492, 633, 748, 841, 875, 1058, 1163, 1240, 1256, 1258, 1259], "postgresql": [34, 130, 131, 307, 567, 769], "user": [34, 130, 131, 218, 232, 293, 307, 528, 529, 571, 609, 731, 769, 826, 863, 875, 879, 1093, 1138, 1232], "server": [34, 130, 131, 307], "port": [34, 128, 130, 131, 134, 136, 145, 307], "sqlite": [34, 130, 307], "db": [34, 130, 131, 307], "replac": [34, 35, 128, 129, 142, 189, 190, 238, 272, 281, 282, 307, 393, 414, 444, 528, 529, 643, 644, 659, 769, 803, 851, 852, 875, 959, 984, 1015, 1135, 1137, 1173, 1174, 1189, 1232, 1250], "insert": [34, 128, 129, 134, 136, 140, 142, 145, 146, 147, 205, 272, 274, 307, 608, 622, 635, 666, 769, 847, 875, 1136, 1152, 1165, 1196, 1232], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 151, 153, 233, 255, 307, 631, 741, 744, 760, 769, 790, 791, 875, 1161, 1232, 1240, 1256], "alreadi": [34, 35, 91, 265, 307, 381, 492, 683, 769, 838, 875, 948, 1058, 1221, 1232], "suppli": [34, 36, 116, 118, 119, 120, 122, 130, 137, 138, 146, 191, 241, 265, 307, 446, 571, 769, 805, 875, 1211, 1232], "unset": [34, 157, 292, 307, 414, 520, 862, 984, 1240], "associ": [34, 36, 47, 131, 133, 157, 160, 243, 307, 880, 1241, 1243], "panda": [34, 117, 121, 150, 200, 267, 307, 408, 409, 676, 748, 769, 809, 875, 978, 979, 1214, 1215, 1232, 1242, 1256], "to_sql": [34, 307], "though": [34, 130, 200, 307, 765, 809, 875], "eventu": [34, 307], "phase": [34, 275, 307], "favour": [34, 307], "solut": [34, 307], "cursor": [34, 130, 307], "adbc_ingest": [34, 307], "affect": [34, 151, 152, 153, 154, 307], "driver": [34, 130, 131, 307], "provid": [34, 36, 128, 129, 131, 132, 133, 140, 142, 143, 144, 147, 158, 162, 191, 210, 255, 265, 307, 361, 362, 440, 461, 520, 528, 529, 626, 627, 630, 636, 637, 652, 653, 654, 655, 721, 751, 769, 781, 805, 841, 875, 924, 925, 1027, 1045, 1093, 1156, 1157, 1160, 1166, 1167, 1211, 1232, 1243, 1249, 1253, 1256, 1259], "otherwis": [34, 130, 133, 157, 160, 164, 218, 225, 243, 246, 265, 270, 293, 307, 356, 361, 371, 382, 436, 437, 438, 439, 520, 529, 538, 567, 571, 572, 574, 579, 623, 626, 629, 633, 634, 639, 646, 657, 683, 687, 715, 718, 727, 731, 759, 769, 823, 833, 863, 875, 920, 924, 938, 949, 1007, 1008, 1009, 1010, 1086, 1093, 1111, 1115, 1135, 1137, 1153, 1156, 1159, 1163, 1164, 1169, 1176, 1187, 1221, 1232, 1249], "temporari": [34, 307], "target_t": [34, 307], "pyodbc": [34, 307], "wa": [34, 52, 151, 231, 265, 266, 285, 307, 581, 644, 715, 769, 881, 1117, 1174, 1213, 1232], "fast_executemani": [34, 307], "improv": [34, 45, 134, 145, 307, 528, 769, 875], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 100, 102, 110, 117, 128, 129, 130, 134, 140, 142, 145, 146, 147, 169, 199, 200, 215, 218, 236, 240, 242, 243, 266, 293, 307, 450, 520, 528, 529, 567, 586, 624, 638, 639, 644, 656, 658, 659, 769, 809, 814, 831, 840, 854, 855, 875, 1093, 1154, 1168, 1169, 1174, 1186, 1188, 1189, 1213, 1232], "pyodbc_uri": [34, 307], "mssql": [34, 307], "1433": [34, 307], "odbc": [34, 130, 307], "18": [34, 123, 179, 225, 240, 307, 380, 415, 428, 431, 464, 550, 586, 670, 769, 795, 823, 827, 831, 875, 881, 1001, 1247, 1254], "create_engin": [34, 307], "deltalak": [35, 132, 143, 150, 307], "deltat": [35, 307], "ignor": [35, 130, 157, 158, 162, 222, 258, 276, 307, 319, 321, 344, 385, 414, 436, 438, 439, 490, 499, 559, 560, 622, 635, 687, 689, 700, 769, 848, 875, 881, 885, 886, 908, 951, 984, 1007, 1009, 1010, 1056, 1065, 1102, 1103, 1152, 1165, 1232], "merg": [35, 214, 225, 307, 813, 823, 875], "overwrite_schema": [35, 307], "storage_opt": [35, 128, 132, 134, 136, 140, 142, 143, 144, 145, 147, 307], "delta_write_opt": [35, 307], "delta_merge_opt": [35, 307], "tablemerg": [35, 307], "delta": [35, 132, 143, 256, 278, 307, 516, 522, 599, 600, 603, 604, 621, 684, 701, 703, 745, 746, 750, 758, 769, 781, 842, 849, 875, 1129, 1131, 1151, 1222, 1232], "handl": [35, 53, 54, 55, 90, 123, 128, 129, 142, 148, 307, 385, 490, 629, 666, 769, 790, 791, 875, 879, 951, 1056, 1159, 1196, 1232], "throw": [35, 118, 119, 122, 172, 307, 636, 637, 787, 875, 1166, 1167, 1232], "add": [35, 36, 129, 188, 200, 218, 281, 282, 283, 284, 307, 382, 553, 554, 555, 556, 574, 670, 715, 719, 759, 769, 809, 813, 851, 852, 853, 854, 855, 875, 1013, 1232], "anyth": [35, 241, 307], "updat": [35, 179, 307, 795, 875], "deprec": [35, 155, 156, 157, 158, 162, 165, 170, 266, 283, 288, 307, 396, 431, 452, 544, 622, 629, 685, 694, 702, 769, 784, 800, 853, 854, 858, 875, 962, 970, 971, 1001, 1024, 1152, 1159, 1213, 1232], "sinc": [35, 61, 62, 77, 130, 132, 142, 143, 145, 155, 156, 157, 158, 162, 165, 170, 266, 283, 288, 307, 396, 399, 431, 452, 528, 544, 622, 629, 685, 694, 721, 769, 784, 800, 840, 853, 854, 858, 875, 962, 965, 970, 971, 1001, 1024, 1152, 1159, 1213, 1232], "14": [35, 150, 179, 218, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 390, 395, 396, 400, 403, 405, 406, 410, 416, 418, 464, 577, 712, 755, 756, 769, 795, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 881, 956, 985], "schema_mod": [35, 307], "extra": [35, 128, 129, 132, 134, 136, 142, 143, 144, 145, 188, 200, 307, 769, 809, 875, 879, 1013, 1232], "storag": [35, 128, 132, 134, 136, 140, 142, 143, 144, 145, 307], "backend": [35, 130, 131, 132, 143, 144, 307], "cloud": [35, 130, 132, 140, 142, 143, 144, 145, 147, 148, 307], "configur": [35, 132, 143, 144, 167, 307], "authent": [35, 132, 143, 144, 307], "see": [35, 36, 37, 38, 53, 54, 62, 130, 131, 132, 133, 134, 136, 140, 142, 143, 144, 147, 151, 152, 153, 154, 158, 162, 177, 200, 214, 232, 233, 307, 310, 311, 371, 445, 478, 528, 616, 623, 630, 631, 633, 634, 642, 643, 657, 710, 711, 713, 714, 743, 756, 757, 765, 769, 790, 791, 809, 875, 879, 881, 932, 938, 1046, 1147, 1153, 1160, 1161, 1163, 1164, 1172, 1173, 1187, 1232, 1236, 1259], "here": [35, 36, 41, 116, 118, 119, 120, 122, 130, 131, 132, 137, 138, 140, 142, 143, 144, 146, 147, 156, 158, 162, 307, 389, 528, 529, 632, 637, 697, 769, 838, 875, 881, 955, 1167], "gc": [35, 132, 143, 144, 307], "azur": [35, 132, 140, 142, 143, 144, 147, 307], "keyword": [35, 132, 140, 143, 158, 162, 177, 199, 232, 241, 246, 247, 267, 281, 282, 286, 307, 446, 571, 670, 747, 751, 759, 769, 808, 826, 833, 834, 851, 852, 856, 875, 1214, 1232, 1243], "while": [35, 54, 129, 132, 133, 143, 158, 162, 167, 212, 224, 272, 276, 307, 639, 791, 822, 848, 875, 1024, 1169, 1232], "lake": [35, 132, 143, 307, 781], "typeerror": [35, 307], "unsupport": [35, 92, 307], "arrowinvaliderror": [35, 307], "could": [35, 82, 89, 172, 307, 705, 715, 719, 787, 795, 798, 875, 1024, 1232], "primit": [35, 307, 470, 769], "tablenotfounderror": [35, 307], "doesn": [35, 128, 142, 200, 215, 307, 433, 769, 809, 875, 1004, 1232], "action": [35, 307], "trigger": [35, 267, 307, 769, 879, 1214, 1232], "protocol": [35, 117, 131, 169, 307], "categor": [35, 46, 65, 84, 85, 86, 151, 152, 153, 154, 214, 263, 307, 368, 382, 574, 581, 676, 769, 881, 930, 931, 932, 933, 949, 1111, 1117, 1215, 1232], "convert": [35, 87, 117, 121, 132, 133, 139, 143, 169, 261, 262, 263, 264, 265, 266, 267, 269, 270, 307, 355, 356, 383, 394, 417, 420, 519, 520, 528, 551, 576, 632, 656, 658, 659, 660, 661, 663, 668, 769, 875, 879, 919, 920, 932, 960, 987, 990, 1085, 1086, 1162, 1186, 1188, 1189, 1190, 1191, 1193, 1199, 1202, 1210, 1211, 1212, 1213, 1214, 1216, 1232, 1253, 1254], "normal": [35, 200, 307, 433, 478, 616, 683, 769, 809, 875, 1004, 1046, 1147, 1221, 1232], "nullabl": [35, 307], "To": [35, 54, 189, 307, 371, 387, 388, 444, 445, 623, 629, 630, 631, 633, 642, 643, 652, 653, 654, 655, 664, 769, 803, 875, 938, 953, 954, 1015, 1024, 1153, 1159, 1160, 1161, 1163, 1172, 1173, 1194, 1213, 1232, 1256], "pyarrow": [35, 41, 116, 121, 128, 131, 132, 134, 136, 140, 143, 148, 150, 260, 266, 267, 307, 748, 781, 1207, 1213, 1214, 1232, 1242, 1256], "ha": [35, 36, 47, 54, 121, 130, 142, 165, 169, 277, 283, 288, 307, 365, 366, 381, 452, 528, 539, 544, 634, 657, 667, 677, 678, 718, 727, 765, 769, 791, 854, 858, 863, 875, 928, 937, 948, 950, 1024, 1164, 1187, 1217, 1232], "last": [35, 142, 145, 151, 152, 153, 154, 202, 215, 217, 233, 243, 254, 259, 266, 273, 301, 307, 332, 343, 352, 381, 397, 408, 412, 429, 472, 497, 515, 518, 520, 550, 551, 553, 555, 557, 558, 618, 619, 634, 649, 657, 673, 695, 754, 769, 814, 840, 844, 846, 871, 875, 881, 896, 907, 916, 948, 963, 978, 982, 999, 1026, 1038, 1048, 1063, 1081, 1084, 1149, 1164, 1179, 1187, 1204, 1213, 1232, 1250, 1252], "filesystem": [35, 132, 143, 144, 307], "table_path": [35, 132, 143, 144, 307], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 130, 137, 138, 146, 151, 152, 153, 154, 172, 190, 214, 215, 241, 276, 307, 535, 536, 581, 598, 623, 624, 625, 628, 630, 631, 633, 636, 637, 642, 643, 644, 650, 656, 658, 659, 759, 769, 787, 804, 813, 814, 848, 875, 881, 1005, 1117, 1128, 1153, 1154, 1155, 1158, 1160, 1161, 1163, 1166, 1167, 1172, 1173, 1174, 1180, 1186, 1188, 1189, 1232, 1252], "old": [35, 237, 307, 581, 769, 829, 875, 1117, 1232], "existing_table_path": [35, 307], "store": [35, 128, 144, 188, 212, 242, 307, 368, 584, 769, 930, 1013, 1120, 1232], "bucket": [35, 132, 143, 144, 147, 307, 415, 428, 461, 769, 985, 998, 1027, 1232], "prefix": [35, 128, 129, 142, 167, 307, 318, 364, 536, 551, 554, 555, 557, 558, 650, 653, 654, 666, 769, 881, 927, 1180, 1184, 1196], "aws_region": [35, 143, 147, 307], "the_aws_region": [35, 307], "aws_access_key_id": [35, 132, 143, 147, 307], "the_aws_access_key_id": [35, 132, 143, 144, 307], "aws_secret_access_kei": [35, 132, 143, 147, 307], "the_aws_secret_access_kei": [35, 132, 143, 144, 307], "pa": [35, 116, 148, 307, 748], "check": [35, 62, 93, 128, 129, 142, 151, 152, 153, 154, 166, 185, 210, 214, 307, 339, 360, 363, 364, 458, 466, 470, 488, 623, 628, 633, 650, 769, 813, 818, 875, 903, 923, 926, 927, 1005, 1023, 1033, 1036, 1043, 1045, 1054, 1153, 1158, 1163, 1180, 1232], "doc": [35, 37, 38, 131, 134, 136, 151, 153, 177, 307], "predic": [35, 42, 43, 44, 45, 53, 54, 142, 145, 146, 147, 148, 191, 210, 241, 307, 446, 685, 719, 759, 769, 790, 791, 800, 802, 805, 818, 827, 829, 838, 854, 855, 875, 1017, 1135, 1137, 1232], "source_alia": [35, 307], "target_alia": [35, 307], "when_matched_update_al": [35, 307], "when_not_matched_insert_al": [35, 307], "execut": [35, 46, 55, 130, 131, 216, 255, 307, 384, 492, 683, 748, 769, 786, 796, 818, 827, 841, 875, 879, 1058, 1221, 1232, 1241, 1242, 1244, 1256], "workbook": [36, 133, 139, 307], "worksheet": [36, 133, 139, 307], "posit": [36, 181, 187, 199, 231, 246, 247, 251, 254, 274, 281, 282, 286, 307, 351, 436, 438, 439, 440, 513, 567, 572, 574, 610, 619, 632, 633, 642, 643, 661, 670, 693, 694, 695, 698, 699, 700, 717, 747, 751, 769, 797, 801, 808, 833, 834, 837, 840, 847, 851, 852, 856, 875, 881, 915, 1007, 1009, 1010, 1079, 1111, 1140, 1162, 1191, 1232, 1257], "tupl": [36, 56, 131, 133, 139, 212, 218, 231, 241, 242, 243, 250, 270, 285, 307, 582, 769, 827, 838, 875, 880, 881, 1118, 1232], "a1": [36, 48, 50, 307], "table_styl": [36, 307], "column_format": [36, 307], "columnformatdict": [36, 307], "dtype_format": [36, 307], "oneormoredatatyp": [36, 156, 307], "conditional_format": [36, 307], "conditionalformatdict": [36, 307], "header_format": [36, 307], "column_tot": [36, 307], "columntotalsdefinit": [36, 307], "column_width": [36, 307], "columnwidthsdefinit": [36, 307], "row_tot": [36, 307], "rowtotalsdefinit": [36, 307], "row_height": [36, 307], "sparklin": [36, 307], "sequenc": [36, 47, 76, 116, 118, 119, 120, 122, 128, 129, 130, 133, 137, 138, 139, 142, 146, 156, 157, 158, 159, 160, 171, 179, 187, 188, 214, 215, 224, 229, 231, 232, 233, 243, 254, 263, 265, 270, 271, 275, 276, 277, 307, 356, 366, 382, 453, 470, 520, 528, 571, 574, 581, 619, 654, 655, 669, 678, 695, 705, 706, 719, 721, 730, 731, 740, 743, 749, 769, 785, 795, 801, 813, 814, 822, 826, 840, 845, 848, 875, 881, 920, 949, 950, 1013, 1086, 1111, 1117, 1200, 1232], "formula": [36, 307, 433, 769, 1004, 1232], "autofilt": [36, 307], "autofit": [36, 307], "hidden_column": [36, 307], "selectortyp": [36, 307, 881], "hide_gridlin": [36, 307], "sheet_zoom": [36, 307], "freeze_pan": [36, 307], "bytesio": [36, 37, 38, 41, 126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 180, 307, 384, 769, 796, 875], "open": [36, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 180, 307, 384, 769, 796, 875], "xlsxwriter": [36, 150, 307], "close": [36, 130, 200, 240, 255, 307, 382, 466, 525, 574, 586, 589, 591, 593, 595, 597, 600, 602, 604, 616, 710, 711, 713, 714, 756, 757, 769, 809, 831, 841, 875, 949, 1031, 1111, 1147, 1232], "xlsx": [36, 133, 307], "work": [36, 63, 65, 129, 148, 247, 282, 307, 319, 321, 357, 370, 371, 440, 449, 492, 521, 528, 529, 550, 551, 553, 555, 557, 558, 567, 634, 638, 639, 646, 657, 680, 769, 834, 852, 875, 881, 885, 886, 921, 935, 938, 1019, 1058, 1087, 1164, 1168, 1169, 1176, 1187, 1218, 1232], "directori": [36, 41, 140, 307, 879], "sheet1": [36, 307], "medium": [36, 307], "kei": [36, 41, 45, 47, 52, 55, 140, 142, 144, 147, 200, 212, 214, 215, 225, 231, 233, 237, 239, 242, 243, 276, 285, 307, 446, 529, 581, 751, 769, 802, 809, 813, 814, 823, 829, 830, 848, 875, 881, 1117, 1232, 1246], "follow": [36, 41, 52, 128, 129, 130, 132, 142, 143, 144, 151, 200, 215, 218, 232, 240, 266, 277, 307, 411, 415, 428, 437, 528, 571, 572, 577, 586, 589, 591, 593, 595, 597, 598, 600, 602, 604, 669, 679, 694, 710, 711, 713, 714, 731, 756, 757, 759, 761, 762, 764, 769, 770, 771, 774, 776, 777, 778, 809, 814, 826, 831, 875, 881, 981, 985, 998, 1008, 1113, 1135, 1137, 1213, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239, 1259], "first_column": [36, 307], "last_column": [36, 307], "banded_column": [36, 307], "banded_row": [36, 307], "sheet": [36, 133, 139, 307], "chart": [36, 307, 827, 875], "subsequ": [36, 236, 267, 307, 520, 748, 759, 800, 875, 1214, 1232, 1245], "colnam": [36, 142, 307], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 142, 145, 146, 147, 153, 154, 155, 156, 158, 160, 161, 162, 163, 186, 187, 189, 200, 210, 218, 231, 232, 241, 242, 243, 251, 254, 270, 276, 307, 339, 351, 356, 366, 371, 390, 394, 417, 419, 420, 433, 437, 461, 466, 488, 513, 520, 523, 529, 567, 571, 577, 580, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 610, 631, 632, 640, 641, 656, 659, 666, 669, 678, 717, 718, 727, 730, 731, 744, 745, 746, 769, 801, 809, 818, 826, 837, 840, 848, 863, 875, 880, 881, 903, 915, 920, 938, 956, 960, 987, 989, 990, 1004, 1006, 1008, 1027, 1031, 1045, 1054, 1079, 1086, 1089, 1092, 1093, 1104, 1113, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1136, 1140, 1161, 1162, 1170, 1171, 1186, 1189, 1196, 1220, 1223, 1232, 1240, 1241, 1248, 1251, 1252, 1256, 1259], "dd": [36, 307, 1252], "mm": [36, 307], "yyyi": [36, 307], "overridden": [36, 116, 118, 120, 122, 137, 138, 164, 307, 875], "basi": [36, 133, 158, 307], "param": [36, 116, 118, 119, 120, 122, 128, 129, 137, 138, 142, 157, 158, 162, 241, 307, 875], "It": [36, 37, 42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 140, 147, 148, 179, 225, 232, 255, 265, 270, 275, 276, 284, 293, 307, 311, 381, 382, 415, 461, 529, 538, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 745, 746, 765, 769, 786, 790, 791, 795, 818, 823, 841, 848, 855, 863, 875, 933, 948, 949, 985, 1027, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1135, 1137, 1211, 1216, 1232], "float_dtyp": [36, 307], "simplifi": [36, 42, 43, 44, 45, 53, 54, 307, 790, 791, 800, 802, 827, 838, 875], "uniform": [36, 307, 574, 769, 1111, 1232], "condit": [36, 183, 191, 241, 307, 446, 466, 628, 650, 696, 719, 759, 769, 798, 805, 875, 1031, 1232, 1246, 1250, 1255], "typenam": [36, 307], "3_color_scal": [36, 307], "data_bar": [36, 307], "make": [36, 55, 76, 116, 121, 128, 129, 132, 133, 134, 136, 140, 145, 225, 229, 236, 266, 277, 307, 438, 439, 461, 557, 558, 567, 580, 648, 769, 823, 875, 879, 1009, 1010, 1027, 1178, 1213, 1232, 1256], "icon": [36, 307], "multipl": [36, 53, 54, 55, 99, 128, 129, 133, 139, 142, 145, 146, 147, 156, 158, 162, 181, 186, 188, 191, 199, 200, 204, 213, 231, 233, 243, 246, 249, 254, 276, 281, 286, 307, 366, 495, 534, 539, 547, 548, 567, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 619, 667, 678, 695, 702, 719, 730, 732, 737, 743, 749, 752, 759, 765, 769, 790, 791, 797, 805, 808, 809, 833, 836, 840, 848, 851, 856, 863, 875, 887, 916, 1006, 1013, 1061, 1081, 1098, 1117, 1118, 1149, 1232, 1243, 1248], "singl": [36, 47, 53, 54, 55, 127, 128, 129, 130, 131, 132, 133, 140, 142, 147, 156, 172, 181, 182, 183, 188, 195, 201, 210, 218, 231, 241, 243, 254, 265, 266, 285, 307, 340, 371, 389, 411, 453, 456, 459, 489, 495, 528, 529, 578, 581, 582, 584, 619, 622, 634, 635, 639, 646, 657, 685, 695, 699, 700, 726, 730, 731, 749, 757, 769, 787, 790, 791, 797, 798, 840, 875, 881, 904, 938, 955, 981, 1013, 1025, 1055, 1061, 1114, 1117, 1118, 1120, 1152, 1164, 1165, 1169, 1176, 1187, 1207, 1213, 1232, 1241], "across": [36, 47, 131, 201, 220, 222, 227, 258, 307, 459, 688, 690, 705, 706, 708, 733, 735, 738, 753, 769, 1025, 1232], "effect": [36, 193, 200, 307, 398, 450, 529, 552, 554, 556, 769, 809, 854, 855, 875, 956, 964], "heatmap": [36, 307], "min": [36, 41, 45, 179, 190, 227, 233, 240, 307, 378, 445, 567, 577, 586, 594, 595, 738, 747, 769, 795, 804, 831, 875, 879, 945, 950, 1016, 1113, 1126, 1232, 1248, 1250, 1253, 1259], "entir": [36, 53, 54, 133, 139, 307, 790, 791, 875], "made": [36, 92, 130, 307], "abov": [36, 151, 215, 233, 307, 759], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 128, 129, 130, 133, 139, 142, 148, 173, 199, 212, 215, 218, 231, 241, 242, 244, 275, 293, 307, 450, 452, 455, 457, 466, 480, 508, 527, 528, 529, 542, 574, 585, 607, 616, 634, 638, 640, 641, 649, 657, 666, 701, 731, 769, 790, 791, 808, 814, 863, 875, 1031, 1074, 1093, 1111, 1121, 1134, 1147, 1164, 1168, 1170, 1171, 1179, 1187, 1196, 1213, 1232, 1259], "bold": [36, 307], "font_color": [36, 307], "702963": [36, 307], "total": [36, 186, 288, 307, 421, 422, 423, 424, 425, 426, 427, 481, 501, 769, 858, 991, 992, 993, 994, 995, 996, 997, 1006, 1047, 1067, 1232], "export": [36, 212, 213, 242, 243, 262, 265, 307, 765, 881], "sum": [36, 186, 193, 199, 200, 210, 233, 240, 258, 286, 307, 379, 380, 384, 433, 446, 520, 529, 538, 540, 541, 542, 543, 581, 586, 601, 602, 685, 687, 705, 707, 708, 719, 731, 743, 753, 769, 790, 791, 796, 800, 802, 808, 809, 825, 827, 831, 835, 838, 856, 875, 879, 881, 946, 947, 1004, 1006, 1130, 1232, 1240, 1246, 1248, 1250], "must": [36, 65, 117, 118, 132, 143, 144, 148, 179, 187, 200, 215, 225, 240, 241, 307, 382, 520, 574, 581, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 759, 769, 795, 801, 809, 814, 818, 823, 831, 838, 875, 879, 949, 950, 1111, 1117, 1232], "funcnam": [36, 307], "averag": [36, 307, 436, 437, 438, 439, 577, 769, 1007, 1008, 1009, 1010, 1113, 1232, 1247], "count_num": [36, 307], "count": [36, 148, 170, 179, 200, 229, 230, 240, 272, 277, 283, 298, 307, 323, 340, 349, 376, 389, 437, 461, 481, 489, 501, 506, 529, 549, 565, 586, 625, 681, 683, 691, 697, 704, 728, 739, 769, 784, 795, 809, 825, 831, 854, 868, 875, 881, 904, 913, 943, 950, 955, 1008, 1027, 1047, 1055, 1067, 1072, 1100, 1106, 1155, 1219, 1221, 1232, 1240, 1250], "std_dev": [36, 307], "var": [36, 163, 307, 603, 604, 769, 875, 1232], "pixel": [36, 307], "unit": [36, 62, 64, 151, 152, 153, 154, 158, 162, 186, 307, 391, 393, 399, 419, 431, 437, 443, 526, 539, 656, 659, 682, 712, 713, 714, 715, 721, 769, 827, 875, 879, 881, 957, 959, 965, 989, 1001, 1006, 1008, 1014, 1092, 1186, 1189, 1220, 1232, 1259], "hand": [36, 128, 129, 142, 307, 509, 510, 511, 512, 1075, 1076, 1077, 1078], "side": [36, 200, 240, 307, 466, 509, 510, 511, 512, 586, 589, 591, 593, 595, 597, 600, 602, 604, 608, 710, 711, 713, 714, 756, 757, 769, 809, 831, 875, 879, 1031, 1075, 1076, 1077, 1078, 1136, 1232], "call": [36, 46, 53, 54, 121, 129, 130, 133, 151, 152, 153, 154, 158, 162, 167, 171, 199, 200, 216, 218, 240, 255, 266, 271, 306, 307, 365, 366, 377, 380, 389, 529, 550, 551, 553, 555, 557, 558, 612, 677, 678, 697, 702, 765, 769, 785, 790, 791, 800, 802, 808, 809, 827, 831, 838, 841, 845, 874, 875, 879, 881, 928, 955, 1093, 1143, 1213, 1217, 1232, 1244, 1256], "ad": [36, 119, 133, 200, 272, 276, 281, 282, 307, 322, 443, 705, 706, 769, 809, 848, 851, 852, 875, 881, 1014, 1232], "wise": [36, 47, 130, 193, 307, 324, 325, 326, 327, 328, 329, 372, 373, 374, 441, 524, 613, 614, 615, 674, 675, 719, 743, 769, 888, 889, 890, 891, 892, 893, 940, 941, 942, 1011, 1090, 1091, 1144, 1145, 1146, 1205, 1206, 1232], "particip": [36, 307], "distinct": [36, 162, 231, 285, 307, 357, 469, 472, 521, 577, 585, 715, 769, 921, 1035, 1038, 1087, 1113, 1121, 1232, 1247, 1257, 1259], "referenc": [36, 307, 669], "differ": [36, 87, 90, 111, 128, 133, 148, 151, 153, 188, 200, 201, 212, 240, 242, 243, 262, 265, 266, 272, 307, 385, 397, 411, 412, 414, 429, 435, 450, 459, 490, 509, 511, 520, 529, 559, 560, 562, 581, 656, 681, 718, 721, 727, 769, 800, 809, 831, 875, 881, 932, 951, 963, 981, 982, 984, 999, 1013, 1025, 1056, 1075, 1077, 1093, 1102, 1103, 1117, 1186, 1232, 1253], "row_index": [36, 307], "height": [36, 158, 183, 307], "intersect": [36, 307, 510, 881, 1076, 1255], "bodi": [36, 307, 311], "start": [36, 126, 128, 129, 131, 134, 136, 139, 140, 142, 145, 146, 147, 164, 194, 199, 200, 216, 253, 277, 283, 284, 307, 360, 363, 364, 389, 397, 407, 412, 415, 428, 429, 440, 454, 496, 514, 585, 589, 591, 593, 595, 597, 600, 602, 604, 617, 623, 628, 631, 641, 646, 650, 651, 653, 654, 657, 666, 692, 697, 705, 709, 710, 711, 712, 713, 714, 717, 719, 725, 726, 756, 757, 759, 769, 807, 808, 809, 827, 839, 854, 855, 875, 881, 927, 955, 957, 960, 963, 965, 966, 972, 974, 976, 977, 980, 982, 985, 989, 998, 999, 1021, 1062, 1080, 1121, 1148, 1158, 1161, 1171, 1176, 1180, 1181, 1183, 1187, 1196, 1232, 1246, 1252, 1259], "unless": [36, 47, 118, 265, 270, 307, 651, 652, 744, 875, 1181, 1253], "marker": [36, 307], "compliant": [36, 307], "case": [36, 46, 47, 54, 116, 118, 119, 120, 122, 130, 137, 138, 146, 147, 164, 188, 200, 212, 218, 233, 240, 242, 243, 262, 265, 266, 307, 390, 437, 528, 538, 539, 551, 586, 623, 624, 631, 633, 642, 643, 644, 769, 791, 809, 831, 875, 879, 881, 956, 1008, 1013, 1153, 1154, 1161, 1163, 1172, 1173, 1174, 1211, 1232], "three": [36, 240, 269, 307, 382, 574, 586, 608, 634, 657, 769, 831, 875, 920, 949, 1086, 1111, 1164, 1187, 1232], "avail": [36, 37, 41, 45, 125, 130, 131, 132, 143, 144, 156, 167, 233, 255, 306, 307, 577, 748, 761, 762, 764, 768, 769, 770, 771, 774, 775, 776, 777, 778, 781, 802, 841, 874, 875, 879, 881, 950, 1113, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239, 1256], "insert_befor": [36, 307], "insert_aft": [36, 307], "respect": [36, 307, 624, 644, 881, 1154, 1174, 1216, 1232], "direct": [36, 131, 140, 144, 147, 151, 251, 265, 275, 307, 351, 513, 610, 769, 837, 875, 915, 1079, 1140, 1232], "far": [36, 307], "strongli": [36, 164, 218, 241, 293, 307, 529, 769, 1093, 1232], "advis": [36, 46, 85, 216, 307], "structur": [36, 37, 93, 96, 110, 188, 232, 243, 266, 307, 571, 769, 826, 875, 1013, 1232], "wherev": [36, 218, 293, 307, 529, 769, 1093, 1232], "possibl": [36, 41, 45, 93, 118, 119, 122, 128, 133, 155, 158, 162, 199, 212, 218, 242, 273, 293, 307, 526, 529, 538, 587, 649, 682, 769, 808, 840, 846, 875, 1093, 1122, 1179, 1232], "simpl": [36, 229, 307], "colx": [36, 307, 557, 558, 881, 1245, 1259], "coli": [36, 307, 557, 558, 881, 1259], "after": [36, 55, 119, 126, 128, 129, 134, 136, 140, 142, 145, 146, 147, 171, 188, 271, 274, 306, 307, 365, 366, 440, 567, 577, 666, 677, 678, 769, 785, 845, 847, 875, 928, 1013, 1113, 1196, 1217, 1232, 1245], "befor": [36, 61, 62, 128, 130, 133, 142, 148, 151, 152, 153, 154, 164, 167, 188, 200, 215, 255, 265, 270, 274, 307, 379, 380, 381, 528, 567, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 666, 672, 745, 746, 769, 809, 811, 814, 847, 875, 879, 946, 947, 948, 1013, 1107, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1159, 1196, 1203, 1232, 1246], "most": [36, 116, 128, 129, 131, 142, 151, 152, 153, 154, 266, 307, 539, 547, 568, 649, 769, 1098, 1107, 1179, 1213, 1232, 1242, 1256], "mandatori": [36, 307], "return_dtyp": [36, 218, 307, 528, 529, 581, 686, 730, 731, 769, 1093, 1117, 1232], "latter": [36, 188, 307, 1013, 1232], "appropri": [36, 148, 266, 307, 577, 769, 1113, 1232], "pure": [36, 307, 535], "actual": [36, 119, 158, 162, 243, 307, 1142, 1232, 1253], "indic": [36, 61, 62, 64, 77, 100, 126, 128, 129, 130, 134, 136, 140, 142, 147, 155, 156, 162, 200, 240, 243, 249, 251, 263, 307, 333, 351, 453, 461, 467, 468, 469, 471, 472, 473, 474, 475, 476, 495, 513, 533, 534, 535, 536, 537, 586, 589, 591, 593, 595, 597, 600, 602, 604, 608, 610, 613, 695, 696, 740, 769, 809, 831, 836, 837, 875, 879, 881, 915, 1020, 1027, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1061, 1079, 1135, 1136, 1140, 1144, 1208, 1232, 1259], "calcul": [36, 41, 45, 47, 179, 200, 256, 278, 307, 385, 436, 437, 438, 439, 478, 490, 509, 516, 522, 526, 598, 616, 621, 682, 684, 701, 703, 745, 746, 750, 758, 769, 795, 809, 842, 849, 875, 950, 951, 1007, 1008, 1009, 1010, 1046, 1056, 1075, 1128, 1147, 1151, 1222, 1232], "individu": [36, 45, 167, 240, 265, 266, 270, 307, 529, 631, 769, 790, 831, 875, 881, 936, 1161, 1232], "gridlin": [36, 307], "zoom": [36, 307], "freez": [36, 307], "pane": [36, 307], "top": [36, 255, 271, 307, 678, 769, 841, 845, 875], "index": [36, 98, 117, 121, 124, 128, 129, 134, 136, 140, 142, 145, 146, 147, 150, 169, 194, 196, 200, 205, 210, 212, 233, 238, 240, 241, 242, 251, 253, 265, 266, 268, 276, 277, 283, 284, 307, 317, 330, 331, 332, 334, 337, 338, 343, 351, 356, 437, 453, 454, 456, 485, 486, 495, 496, 497, 513, 514, 520, 586, 589, 591, 593, 595, 597, 600, 602, 604, 608, 610, 617, 623, 630, 633, 634, 646, 657, 667, 695, 725, 728, 769, 807, 809, 831, 837, 839, 848, 854, 855, 875, 881, 894, 895, 896, 897, 898, 901, 902, 907, 915, 920, 1008, 1020, 1021, 1045, 1051, 1052, 1061, 1062, 1063, 1079, 1080, 1086, 1104, 1135, 1136, 1140, 1148, 1160, 1163, 1164, 1176, 1187, 1232, 1248, 1252], "thu": [36, 188, 307, 701, 1013, 1232], "altern": [36, 307, 765, 1249], "a2": [36, 48, 50, 307], "occur": [36, 53, 54, 99, 106, 307, 340, 489, 547, 577, 769, 790, 791, 800, 802, 827, 838, 875, 904, 1055, 1098, 1113, 1213, 1232], "equival": [36, 116, 118, 119, 120, 122, 132, 137, 138, 146, 200, 210, 229, 307, 316, 320, 434, 435, 437, 450, 455, 457, 480, 527, 546, 548, 561, 562, 563, 566, 572, 639, 671, 679, 686, 769, 809, 875, 1008, 1045, 1169, 1192, 1194, 1195, 1232, 1248], "top_row": [36, 307], "top_col": [36, 307], "base": [36, 60, 101, 104, 160, 183, 191, 200, 240, 307, 390, 398, 433, 436, 437, 438, 439, 446, 461, 465, 523, 524, 528, 529, 572, 574, 581, 586, 589, 591, 593, 595, 597, 600, 602, 604, 661, 769, 798, 805, 809, 831, 875, 881, 956, 964, 1004, 1007, 1008, 1009, 1010, 1027, 1030, 1089, 1090, 1093, 1111, 1117, 1191, 1223, 1232, 1246, 1251, 1259], "scroll": [36, 307], "region": [36, 144, 307], "initi": [36, 76, 167, 307, 705, 719, 759, 1256], "5th": [36, 307], "properti": [36, 169, 175, 176, 184, 192, 203, 245, 250, 280, 284, 307, 311, 792, 793, 799, 832, 850, 855, 875, 880, 881, 1232, 1259], "readthedoc": [36, 307], "html": [36, 37, 38, 117, 130, 134, 136, 169, 177, 307], "definit": [36, 307, 478, 769, 880, 881, 1046, 1232], "take": [36, 133, 139, 158, 159, 167, 193, 194, 200, 222, 225, 232, 233, 237, 307, 332, 389, 411, 446, 453, 454, 495, 496, 552, 554, 556, 619, 695, 697, 716, 718, 727, 769, 807, 809, 823, 829, 875, 896, 955, 981, 1020, 1021, 1061, 1062, 1223, 1232, 1248], "care": [36, 249, 307, 529, 609, 769, 836, 875, 1138, 1232], "rel": [36, 131, 132, 143, 144, 151, 152, 153, 154, 307, 411, 436, 438, 439, 683, 769, 981, 1007, 1009, 1010, 1221, 1232], "working_with_conditional_format": [36, 307], "similarli": [36, 119, 200, 215, 240, 277, 307, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998], "well": [36, 128, 129, 130, 142, 307, 466, 748, 769, 1031, 1232, 1256], "adjac": [36, 307], "two": [36, 46, 84, 85, 118, 120, 122, 131, 193, 215, 224, 225, 233, 242, 269, 287, 293, 307, 311, 317, 386, 393, 450, 453, 456, 520, 574, 618, 693, 694, 701, 703, 745, 746, 748, 769, 822, 823, 857, 863, 875, 881, 920, 952, 959, 1086, 1111, 1232, 1245, 1246, 1249, 1257], "help": [36, 151, 152, 153, 154, 307, 310, 802, 875, 1232, 1236], "where": [36, 47, 130, 131, 133, 183, 188, 191, 200, 212, 224, 242, 255, 256, 265, 270, 276, 278, 307, 333, 430, 433, 435, 437, 446, 516, 522, 528, 562, 580, 608, 616, 619, 621, 644, 684, 696, 701, 703, 745, 746, 748, 750, 758, 759, 769, 798, 805, 809, 822, 841, 842, 848, 849, 875, 897, 1000, 1004, 1008, 1013, 1017, 1136, 1147, 1151, 1174, 1222, 1223, 1232, 1240, 1255, 1256, 1258], "appear": [36, 59, 119, 153, 154, 307, 681, 769, 881, 1219, 1232, 1257], "working_with_sparklin": [36, 307], "inject": [36, 47, 307], "locat": [36, 188, 238, 268, 274, 307, 608, 769, 847, 875, 1013, 1020, 1135, 1136, 1232], "syntax": [36, 107, 191, 218, 229, 307, 623, 630, 631, 633, 642, 643, 725, 726, 765, 805, 838, 875, 1153, 1160, 1161, 1163, 1172, 1173, 1232, 1253], "correctli": [36, 307, 528, 769], "microsoft": [36, 307], "com": [36, 131, 307, 436, 438, 439, 630, 631, 632, 769, 1007, 1009, 1010, 1160, 1161, 1162, 1232], "u": [36, 62, 64, 147, 160, 215, 307, 391, 393, 399, 419, 431, 656, 659, 688, 690, 712, 713, 714, 715, 721, 881, 957, 959, 965, 989, 1001, 1186, 1189, 1243, 1253], "offic": [36, 307], "f5ed2452": [36, 307], "2337": [36, 307], "4f71": [36, 307], "bed3": [36, 307], "c8ae6d2b276": [36, 307], "basic": [36, 307, 1259], "random": [36, 37, 134, 149, 156, 201, 244, 307, 459, 508, 577, 607, 612, 683, 769, 781, 1025, 1074, 1113, 1134, 1143, 1221, 1232], "dtm": [36, 307, 393, 881, 959], "500": [36, 276, 307, 395, 396, 400, 403, 405, 406, 410, 416, 418, 802, 848, 875, 972, 974, 980, 1123, 1124, 1126, 1232], "val": [36, 239, 307, 529, 571, 676, 759, 769, 830, 875], "10_000": [36, 307], "20_000": [36, 307], "30_000": [36, 307], "increas": [36, 47, 128, 139, 140, 147, 307, 381, 585, 769, 948, 1121, 1232], "b4": [36, 307], "light": [36, 307], "twice": [36, 307], "titl": [36, 307, 1240], "explicit": [36, 130, 142, 156, 255, 276, 307, 743, 841, 848, 875], "integr": [36, 270, 307, 1259], "multi_fram": [36, 307], "wb": [36, 307], "coordin": [36, 307], "advanc": [36, 133, 233, 307, 356, 520, 550, 553, 555, 557, 558, 920, 1086, 1259], "min_color": [36, 307], "76933c": [36, 307], "mid_color": [36, 307], "c4d79b": [36, 307], "max_color": [36, 307], "ebf1d": [36, 307], "data_bar_2010": [36, 307], "bar_color": [36, 307], "9bbb59": [36, 307], "bar_negative_color_sam": [36, 307], "bar_negative_border_color_sam": [36, 307], "white": [36, 307], "w": [36, 130, 200, 243, 307, 625, 630, 632, 688, 690, 809, 875, 881, 1155, 1160, 1162, 1182, 1242, 1243], "get_worksheet_by_nam": [36, 307], "fmt_titl": [36, 307], "add_format": [36, 307], "4f6228": [36, 307], "font_siz": [36, 307], "ital": [36, 307], "customis": [36, 307], "trend": [36, 307], "win_loss": [36, 307], "subtl": [36, 307], "tone": [36, 307], "hidden": [36, 307], "q1": [36, 307], "55": [36, 49, 307], "35": [36, 307, 385, 712, 769, 951, 1232], "q2": [36, 307], "30": [36, 179, 188, 200, 204, 232, 238, 261, 281, 307, 330, 331, 332, 385, 393, 395, 396, 400, 403, 405, 406, 407, 408, 410, 413, 414, 415, 416, 418, 421, 428, 429, 459, 535, 611, 712, 729, 755, 756, 769, 795, 800, 809, 826, 851, 875, 881, 951, 959, 978, 984, 985, 991, 998, 1024, 1232, 1246, 1247, 1249, 1251, 1253, 1254, 1257, 1259], "60": [36, 188, 307, 400, 405, 406, 416, 427, 450, 602, 656, 769, 982, 986, 997, 1115, 1186, 1232, 1254], "q3": [36, 307], "40": [36, 179, 188, 215, 232, 307, 415, 428, 459, 522, 660, 670, 769, 795, 826, 875, 881, 968, 998, 1088, 1190, 1246, 1247, 1249], "80": [36, 307], "q4": [36, 307], "75": [36, 179, 307, 320, 566, 574, 588, 590, 592, 594, 599, 601, 603, 731, 769, 795, 875, 881, 950, 1027, 1046, 1111, 1232, 1254, 1259], "account": [36, 123, 131, 144, 307, 411, 436, 438, 439, 769, 981, 1007, 1009, 1010, 1232], "flavour": [36, 130, 307], "integer_dtyp": [36, 246, 307, 833, 875, 881], "0_": [36, 307], "just": [36, 121, 130, 142, 224, 307, 822, 875, 881], "unifi": [36, 265, 270, 307, 881], "2_color_scal": [36, 307], "95b3d7": [36, 307], "ffffff": [36, 307], "standardis": [36, 307], "z": [36, 55, 76, 123, 156, 186, 207, 209, 214, 224, 242, 243, 272, 275, 307, 316, 318, 320, 459, 487, 529, 551, 553, 555, 557, 558, 566, 580, 581, 624, 631, 644, 656, 659, 688, 690, 708, 733, 735, 738, 744, 748, 753, 769, 813, 822, 839, 841, 875, 881, 1016, 1117, 1154, 1161, 1174, 1186, 1189, 1232, 1242, 1246, 1256, 1258], "score": [36, 307], "conjunct": [36, 84, 130, 133, 139, 156, 307, 725, 728], "a123": [36, 307], "b345": [36, 307], "c567": [36, 307], "d789": [36, 307], "e101": [36, 307], "45": [36, 179, 240, 307, 393, 415, 428, 586, 602, 625, 631, 668, 694, 712, 729, 755, 756, 769, 795, 831, 875, 881, 959, 985, 998, 1155, 1161, 1199, 1251, 1254, 1257, 1259], "85": [36, 307, 1046, 1232, 1259], "font": [36, 307], "consola": [36, 307], "stdev": [36, 307], "ipccompress": [37, 38, 307], "futur": [37, 54, 133, 169, 179, 249, 307, 791, 795, 836, 875], "arrow": [37, 38, 43, 116, 130, 131, 134, 136, 145, 212, 242, 243, 260, 262, 266, 307, 875, 1207, 1213, 1232], "ipc": [37, 38, 43, 134, 135, 136, 145, 148, 307, 781, 875], "binari": [37, 130, 307, 360, 361, 362, 363, 364, 626, 881, 923, 924, 926, 927, 1156], "feather": [37, 134, 145, 307, 781], "access": [37, 48, 49, 50, 51, 134, 140, 142, 144, 145, 147, 169, 175, 212, 241, 242, 255, 307, 632, 667, 792, 841, 853, 875, 880, 1162, 1259], "lz4": [37, 38, 41, 43, 45, 307, 875], "zstd": [37, 38, 41, 43, 45, 307, 875], "intern": [37, 130, 149, 212, 307, 450, 769, 1256], "might": [37, 128, 129, 142, 164, 266, 307, 529, 681, 769, 840, 875], "implement": [37, 41, 117, 130, 169, 201, 218, 293, 307, 310, 311, 459, 529, 550, 551, 553, 555, 557, 558, 667, 731, 769, 863, 1025, 1093, 1135, 1137, 1232, 1236], "consid": [37, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 128, 129, 130, 140, 142, 147, 148, 151, 152, 153, 154, 171, 183, 185, 211, 218, 224, 242, 255, 265, 270, 271, 273, 275, 276, 307, 311, 366, 371, 381, 382, 415, 450, 461, 528, 529, 535, 549, 550, 553, 555, 557, 558, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 678, 705, 719, 745, 746, 765, 769, 785, 790, 791, 798, 810, 817, 822, 841, 845, 846, 848, 863, 875, 881, 931, 933, 938, 948, 949, 985, 1005, 1027, 1093, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1135, 1137, 1211, 1216, 1232], "unstabl": [37, 42, 43, 44, 45, 53, 54, 63, 65, 114, 130, 140, 147, 148, 255, 265, 270, 275, 276, 307, 311, 381, 382, 415, 461, 529, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 745, 746, 769, 790, 791, 841, 848, 875, 933, 948, 949, 985, 1027, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1211, 1216, 1232], "break": [37, 42, 43, 44, 45, 53, 54, 63, 65, 140, 147, 148, 255, 265, 270, 275, 276, 307, 311, 381, 382, 415, 461, 529, 574, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 745, 746, 769, 790, 791, 841, 848, 875, 933, 948, 949, 985, 1027, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1211, 1216, 1232], "batch": [38, 53, 54, 125, 129, 130, 136, 146, 148, 242, 270, 307, 790, 791, 818, 875], "iobas": [39, 40, 137, 138, 180, 248, 307, 384, 541, 544, 769, 796, 835, 875], "serial": [39, 40, 180, 307, 384, 544, 769, 796, 875], "write_ndjson": [39, 307], "newlin": [40, 138, 146, 307], "delimit": [40, 42, 138, 146, 233, 263, 307, 622, 635, 875, 1152, 1165, 1208, 1232], "parquetcompress": [41, 307], "compression_level": [41, 45, 307, 875], "statist": [41, 45, 128, 129, 140, 147, 179, 307, 438, 439, 478, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 616, 769, 795, 875, 950, 1009, 1010, 1046, 1128, 1147, 1232], "row_group_s": [41, 45, 307, 875], "data_page_s": [41, 307], "use_pyarrow": [41, 45, 128, 134, 136, 140, 266, 307, 875, 1213, 1232], "pyarrow_opt": [41, 132, 140, 143, 307], "parquet": [41, 45, 140, 141, 147, 307, 781, 875], "gzip": [41, 45, 307, 875], "lzo": [41, 45, 307, 875], "brotli": [41, 45, 307, 875], "choos": [41, 43, 45, 200, 233, 307, 809, 875], "good": [41, 43, 45, 212, 307, 875, 1251], "fast": [41, 43, 45, 161, 163, 307, 443, 609, 769, 875, 879, 1014, 1138, 1232, 1259], "decompress": [41, 43, 45, 307, 875], "backward": [41, 45, 190, 215, 307, 359, 389, 409, 445, 769, 804, 814, 875, 955, 979, 1016, 1232], "guarante": [41, 45, 128, 129, 171, 179, 201, 271, 273, 307, 365, 366, 459, 677, 678, 769, 785, 795, 802, 845, 846, 875, 928, 1024, 1025, 1217, 1232], "deal": [41, 45, 212, 307, 319, 321, 414, 577, 656, 659, 687, 688, 689, 690, 712, 769, 875, 885, 886, 984, 1113, 1186, 1189, 1232], "older": [41, 45, 307, 875], "reader": [41, 45, 125, 128, 129, 133, 134, 136, 140, 307, 875], "higher": [41, 45, 179, 235, 299, 307, 575, 596, 597, 742, 769, 795, 828, 869, 875, 950, 1112, 1127, 1232], "mean": [41, 45, 128, 129, 134, 142, 179, 190, 199, 200, 215, 222, 233, 240, 277, 286, 307, 411, 415, 428, 442, 445, 450, 586, 589, 590, 591, 593, 595, 597, 600, 602, 604, 616, 622, 630, 635, 710, 711, 713, 714, 715, 735, 756, 757, 759, 769, 795, 804, 808, 809, 814, 818, 831, 856, 875, 950, 981, 985, 998, 1012, 1016, 1024, 1124, 1147, 1152, 1160, 1165, 1232, 1247, 1248], "smaller": [41, 45, 186, 307, 802, 875, 1006, 1232], "disk": [41, 42, 43, 44, 45, 134, 307, 838, 875], "22": [41, 45, 150, 158, 307, 397, 412, 415, 428, 430, 431, 587, 589, 591, 593, 595, 597, 600, 602, 604, 656, 712, 769, 875, 881, 985, 998, 1001, 1122, 1186, 1232, 1253, 1259], "behavior": [41, 45, 183, 214, 307, 343, 452, 495, 497, 629, 718, 727, 769, 798, 813, 875, 907, 1061, 1063, 1159], "disabl": [41, 45, 46, 84, 85, 159, 212, 307, 790, 875], "combin": [41, 45, 53, 54, 55, 191, 200, 201, 215, 240, 277, 307, 320, 333, 428, 437, 450, 566, 581, 586, 651, 652, 653, 710, 711, 713, 714, 756, 757, 759, 769, 790, 791, 800, 802, 809, 814, 827, 831, 838, 875, 985, 998, 1008, 1117, 1181, 1182, 1183, 1232, 1246, 1257], "minimum": [41, 45, 156, 157, 158, 160, 162, 193, 226, 227, 307, 436, 438, 439, 545, 560, 570, 577, 737, 738, 769, 824, 875, 975, 1007, 1009, 1010, 1103, 1109, 1113, 1232, 1247, 1259], "distinct_count": [41, 45, 307, 875], "uniqu": [41, 45, 47, 155, 156, 157, 160, 162, 170, 209, 214, 229, 233, 243, 298, 307, 323, 334, 349, 382, 477, 506, 549, 574, 656, 658, 659, 663, 681, 683, 691, 739, 769, 784, 813, 868, 875, 879, 898, 913, 949, 1044, 1072, 1100, 1111, 1186, 1188, 1189, 1193, 1219, 1221, 1232, 1248], "null_count": [41, 45, 179, 183, 307, 381, 769, 795, 875, 948, 950, 1232], "512": [41, 130, 212, 307, 572, 769, 1107, 1232], "page": [41, 45, 134, 140, 145, 147, 307, 769, 781, 875, 1232, 1255], "At": [41, 307], "moment": [41, 177, 307, 478, 616, 769, 1046, 1147, 1232], "write_t": [41, 307], "partition_col": [41, 131, 307], "write_to_dataset": [41, 307], "spark": [41, 307], "partit": [41, 131, 132, 140, 143, 147, 148, 213, 231, 307, 567, 769], "we": [41, 126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 179, 180, 200, 215, 240, 277, 307, 384, 411, 415, 428, 461, 492, 520, 528, 529, 586, 589, 591, 593, 595, 597, 600, 602, 604, 632, 661, 709, 710, 711, 712, 713, 714, 729, 756, 757, 759, 769, 795, 796, 809, 814, 818, 831, 875, 981, 985, 998, 1027, 1058, 1093, 1162, 1191, 1232, 1242], "use_pyarrow_write_to_dataset": [41, 307], "first": [41, 47, 128, 129, 133, 134, 136, 140, 142, 151, 152, 153, 154, 198, 200, 202, 215, 217, 218, 228, 232, 233, 240, 259, 263, 264, 272, 273, 277, 284, 290, 307, 332, 334, 343, 381, 385, 409, 411, 415, 431, 450, 460, 469, 482, 490, 492, 497, 498, 520, 528, 529, 539, 571, 572, 586, 608, 619, 623, 629, 630, 633, 634, 636, 637, 642, 643, 657, 698, 705, 719, 723, 759, 769, 790, 809, 810, 814, 817, 826, 831, 846, 853, 855, 860, 875, 881, 896, 907, 948, 950, 951, 979, 981, 985, 1001, 1026, 1035, 1048, 1056, 1058, 1063, 1064, 1086, 1093, 1136, 1149, 1159, 1160, 1162, 1163, 1164, 1166, 1167, 1172, 1173, 1187, 1204, 1208, 1210, 1213, 1232, 1249, 1250, 1252, 1257, 1259], "watermark": [41, 307], "partitioned_object": [41, 307], "maintain_ord": [42, 43, 44, 45, 199, 231, 233, 254, 273, 277, 287, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 317, 357, 366, 453, 456, 521, 529, 619, 678, 680, 695, 769, 791, 800, 802, 808, 827, 838, 840, 846, 857, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 921, 1087, 1218, 1232], "type_coercion": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 827, 838, 875], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 818, 827, 838, 875], "projection_pushdown": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 818, 827, 838, 875], "simplify_express": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 827, 838, 875], "slice_pushdown": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 818, 827, 838, 875], "no_optim": [42, 43, 44, 45, 53, 54, 790, 791, 802, 818, 827, 875], "evalu": [42, 43, 44, 45, 189, 191, 215, 307, 320, 333, 335, 336, 381, 446, 463, 483, 484, 520, 566, 687, 689, 692, 696, 710, 711, 713, 714, 716, 725, 726, 741, 744, 751, 756, 757, 759, 760, 769, 790, 805, 811, 813, 814, 875, 897, 899, 900, 948, 1017, 1049, 1050, 1223, 1232, 1249], "queri": [42, 43, 44, 45, 53, 54, 130, 131, 134, 142, 145, 146, 147, 188, 216, 232, 255, 307, 528, 529, 637, 748, 769, 790, 791, 800, 802, 810, 817, 827, 838, 841, 854, 855, 863, 875, 1013, 1093, 1167, 1232, 1240, 1242, 1246, 1256, 1257, 1258], "ram": [42, 43, 44, 45, 875], "maintain": [42, 43, 44, 45, 254, 307, 357, 521, 608, 619, 680, 695, 769, 795, 840, 875, 921, 1087, 1136, 1218, 1232], "slightli": [42, 43, 44, 45, 87, 450, 769, 875, 1253], "faster": [42, 43, 44, 45, 130, 133, 188, 266, 275, 307, 529, 681, 769, 875, 1013, 1093, 1232], "coercion": [42, 43, 44, 45, 53, 54, 580, 769, 790, 791, 800, 802, 827, 838, 875], "optim": [42, 43, 44, 45, 53, 54, 140, 142, 145, 146, 147, 212, 216, 232, 236, 242, 273, 307, 786, 790, 791, 800, 802, 818, 827, 838, 846, 854, 855, 863, 875, 934, 1135, 1232], "pushdown": [42, 43, 44, 45, 53, 54, 790, 791, 800, 802, 818, 827, 829, 838, 854, 855, 875, 1135, 1137, 1232], "project": [42, 43, 44, 45, 53, 54, 142, 144, 145, 146, 147, 618, 619, 769, 790, 791, 800, 802, 818, 827, 829, 838, 875], "run": [42, 43, 44, 45, 53, 54, 62, 130, 158, 161, 162, 163, 199, 216, 218, 233, 247, 273, 282, 293, 307, 381, 492, 528, 529, 584, 585, 639, 747, 769, 790, 791, 800, 802, 808, 818, 822, 827, 834, 838, 846, 852, 875, 881, 948, 1058, 1093, 1120, 1121, 1169, 1232, 1256, 1259], "slice": [42, 43, 44, 45, 48, 53, 54, 186, 202, 213, 259, 307, 498, 518, 529, 538, 540, 587, 588, 590, 592, 594, 596, 599, 601, 603, 634, 657, 769, 790, 791, 800, 802, 818, 827, 838, 875, 879, 1006, 1026, 1064, 1084, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1164, 1187, 1204, 1232, 1252], "off": [42, 43, 44, 45, 53, 54, 128, 129, 142, 389, 697, 790, 791, 800, 802, 818, 827, 875, 955], "certain": [42, 43, 44, 45, 54, 132, 143, 205, 277, 307, 652, 653, 790, 791, 827, 875, 1232], "lf": [42, 43, 44, 45, 50, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 855, 858, 862, 875, 1247, 1256, 1259], "scan_csv": [42, 43, 44, 45, 128, 129, 875], "my_larger_than_ram_fil": [42, 43, 44, 45, 875], "ndjson": [44, 875], "data_pagesize_limit": [45, 875], "reduc": [45, 128, 129, 140, 142, 145, 146, 147, 242, 294, 295, 297, 300, 307, 611, 706, 719, 769, 864, 865, 867, 870, 875, 1095, 1110, 1141, 1203, 1232], "pressur": [45, 128, 129, 140, 142, 146, 147, 611, 769, 875, 1141, 1232], "speed": [45, 249, 307, 529, 769, 836, 875, 1259], "context": [46, 84, 85, 164, 229, 255, 307, 317, 446, 492, 528, 529, 538, 618, 619, 683, 702, 704, 718, 721, 727, 728, 731, 740, 744, 747, 768, 769, 780, 781, 841, 853, 875, 1058, 1221, 1232, 1245, 1256, 1258], "manag": [46, 84, 85, 780, 781, 1245, 1256], "global": [46, 84, 85, 133, 149, 158, 166, 255, 307, 581, 748, 769, 841, 875, 931, 932, 1117, 1232, 1242, 1256], "cach": [46, 53, 54, 84, 85, 111, 134, 142, 145, 147, 151, 152, 153, 154, 166, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 656, 658, 659, 663, 769, 780, 790, 791, 800, 802, 827, 838, 875, 931, 1117, 1186, 1188, 1189, 1193, 1232], "under": [46, 48, 49, 50, 51, 84, 85, 255, 307, 761, 762, 764, 765, 770, 771, 774, 776, 777, 778, 841, 875, 1224, 1226, 1228, 1233, 1237, 1238, 1239], "physic": [46, 59, 85, 128, 129, 215, 307, 676, 769, 786, 813, 814, 875, 932, 1215, 1232], "equal": [46, 85, 128, 129, 130, 142, 151, 152, 153, 154, 200, 215, 225, 254, 307, 382, 428, 434, 435, 437, 455, 480, 520, 562, 574, 580, 587, 588, 590, 592, 594, 596, 599, 601, 603, 619, 640, 641, 666, 695, 745, 746, 759, 765, 769, 809, 814, 823, 840, 875, 949, 985, 1008, 1086, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1170, 1171, 1196, 1232, 1249, 1259], "concaten": [46, 55, 84, 85, 193, 232, 307, 571, 622, 635, 699, 700, 769, 826, 875, 936, 1099, 1152, 1165, 1232, 1252], "join": [46, 47, 53, 54, 55, 85, 191, 215, 276, 307, 446, 464, 567, 622, 748, 769, 790, 791, 800, 802, 805, 814, 827, 838, 848, 853, 875, 1152, 1242, 1248, 1255], "introduc": [46, 85, 656, 658, 659, 1186, 1188, 1189], "overhead": [46, 85, 142, 145, 146, 147], "amount": [46, 64, 85, 142, 145, 529, 715, 769, 1247], "depend": [46, 52, 85, 130, 150, 337, 338, 485, 486, 529, 538, 574, 577, 715, 718, 721, 727, 769, 901, 902, 1051, 1052, 1111, 1113, 1232, 1259], "categori": [46, 65, 85, 263, 307, 368, 382, 461, 574, 769, 930, 949, 1027, 1111, 1208, 1232], "nest": [46, 123, 159, 160, 186, 307, 781, 1006, 1232, 1256, 1259], "clear": [46, 84, 174, 307, 789, 875, 939, 1232], "outermost": 46, "exit": [46, 84, 167, 1245, 1256], "construct": [46, 84, 85, 116, 118, 119, 120, 121, 122, 123, 130, 307, 452, 741, 744, 760, 765, 769, 796, 875, 931, 1232, 1245], "s1": [46, 84, 85, 153, 154, 193, 307, 920, 1005, 1022, 1045, 1053, 1086, 1114, 1223, 1232], "color": [46, 84, 85, 293, 360, 361, 362, 363, 364, 626, 683, 769, 863, 923, 924, 925, 926, 927, 1156, 1221, 1232, 1252], "red": [46, 84, 85, 293, 683, 769, 863, 1221, 1232], "green": [46, 84, 85, 293, 683, 769, 863, 1221, 1232], "blue": [46, 84, 85, 360, 361, 362, 363, 364, 683, 769, 1221, 1232], "concat": [46, 84, 85, 91, 129, 215, 307, 853, 875, 936, 1022, 1099, 1114, 1232, 1250], "decor": [46, 48, 49, 50, 51, 158, 162, 218, 307, 529, 769, 780, 781, 1093, 1232], "dure": [46, 128, 129, 142, 167, 188, 307, 1013, 1232], "afterward": [46, 759], "construct_categor": 46, "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 191, 232, 307, 332, 571, 695, 720, 769, 805, 826, 875, 879, 1093, 1232, 1243], "frametyp": [47, 1256], "joinstrategi": [47, 214, 307, 813, 875], "descend": [47, 249, 254, 307, 332, 352, 515, 577, 609, 618, 619, 683, 695, 769, 836, 840, 875, 896, 916, 1043, 1081, 1113, 1138, 1149, 1221, 1232], "common": [47, 53, 54, 55, 128, 129, 142, 276, 307, 551, 775, 790, 791, 800, 802, 827, 838, 848, 875], "fill": [47, 55, 173, 189, 190, 251, 275, 307, 311, 359, 377, 380, 444, 445, 451, 464, 465, 588, 590, 592, 594, 596, 599, 601, 603, 610, 720, 741, 744, 760, 769, 803, 804, 837, 853, 875, 1015, 1016, 1029, 1030, 1104, 1123, 1124, 1126, 1129, 1130, 1131, 1140, 1232], "sort": [47, 48, 171, 200, 215, 225, 232, 233, 240, 249, 271, 277, 290, 301, 307, 332, 365, 366, 437, 446, 529, 567, 586, 609, 619, 677, 678, 683, 685, 695, 731, 769, 785, 800, 809, 814, 823, 826, 827, 831, 836, 838, 845, 860, 871, 875, 881, 896, 928, 1008, 1043, 1138, 1217, 1218, 1221, 1232, 1246, 1257, 1259], "origin": [47, 128, 129, 142, 183, 191, 273, 307, 387, 388, 414, 415, 428, 446, 491, 529, 550, 567, 579, 580, 581, 582, 584, 625, 630, 637, 693, 694, 769, 798, 805, 846, 875, 953, 954, 984, 985, 998, 1017, 1057, 1117, 1118, 1120, 1155, 1160, 1167, 1232], "In": [47, 54, 130, 132, 143, 144, 147, 158, 162, 167, 186, 188, 200, 215, 218, 229, 240, 266, 307, 528, 529, 586, 769, 791, 809, 831, 875, 1006, 1013, 1114, 1232], "duplic": [47, 91, 207, 214, 215, 273, 276, 307, 318, 467, 550, 574, 769, 813, 814, 846, 848, 875, 1032, 1111, 1232, 1257], "outer": [47, 55, 276, 307, 848, 875], "suitabl": [47, 55, 130, 156, 218, 307, 529, 608, 769, 1093, 1136, 1232], "get": [47, 54, 135, 141, 148, 171, 175, 176, 184, 192, 195, 197, 200, 202, 203, 207, 209, 210, 217, 220, 227, 228, 233, 240, 241, 245, 250, 253, 259, 267, 271, 280, 290, 301, 307, 317, 330, 331, 332, 334, 342, 345, 357, 366, 368, 377, 378, 379, 380, 389, 399, 447, 453, 460, 477, 479, 482, 494, 500, 521, 530, 531, 532, 538, 540, 545, 559, 560, 569, 570, 575, 585, 586, 617, 621, 629, 672, 673, 677, 678, 680, 684, 695, 697, 718, 723, 727, 731, 732, 733, 734, 736, 737, 738, 740, 750, 754, 758, 769, 785, 790, 791, 793, 799, 806, 809, 810, 815, 817, 831, 832, 839, 844, 845, 850, 860, 871, 875, 879, 880, 894, 895, 896, 897, 898, 906, 909, 921, 930, 936, 944, 945, 946, 947, 955, 965, 1003, 1018, 1022, 1026, 1031, 1032, 1044, 1048, 1060, 1066, 1087, 1094, 1096, 1097, 1099, 1101, 1102, 1103, 1108, 1109, 1112, 1121, 1148, 1151, 1159, 1204, 1208, 1214, 1218, 1222, 1232], "speedup": [47, 212, 218, 307, 529, 769, 1093, 1232], "receiv": [47, 130, 142, 218, 232, 293, 307, 529, 571, 769, 826, 875, 1259], "now": [47, 240, 266, 307, 831, 875, 1213, 1232], "One": [47, 179, 229, 233, 265, 270, 307, 320, 566, 691, 702, 718, 724, 727, 734, 736, 739, 740, 749, 769, 795, 875, 881, 950, 1232], "whose": [47, 215, 233, 307, 440, 717, 769, 814, 875, 881], "post": 47, "constrain": [47, 183, 307, 798, 875, 881], "newli": 47, "boolean": [47, 158, 171, 191, 193, 254, 271, 307, 319, 320, 321, 335, 336, 339, 360, 363, 364, 366, 401, 446, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 483, 484, 488, 564, 566, 569, 570, 619, 636, 678, 685, 686, 695, 696, 751, 759, 769, 785, 805, 840, 845, 875, 881, 885, 886, 897, 899, 900, 903, 923, 967, 1017, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1049, 1050, 1054, 1105, 1108, 1109, 1137, 1153, 1223, 1232, 1249], "know": [47, 130, 233, 307, 520, 528, 769], "df1": [47, 55, 151, 152, 185, 188, 225, 255, 279, 307, 823, 875, 1242, 1244, 1245, 1246], "2022": [47, 172, 179, 198, 307, 393, 415, 428, 656, 710, 711, 713, 714, 715, 721, 787, 795, 875, 881, 959, 968, 985, 998, 1186], "df2": [47, 55, 151, 152, 185, 188, 279, 307, 1242, 1244, 1245, 1246], "df3": [47, 307], "set_tbl_format": 47, "09": [47, 128, 179, 240, 307, 389, 393, 408, 409, 586, 660, 709, 710, 712, 757, 769, 795, 831, 875, 881, 955, 1190], "02": [47, 172, 179, 198, 200, 240, 277, 307, 389, 391, 393, 399, 408, 409, 411, 414, 419, 422, 425, 427, 431, 586, 589, 591, 593, 595, 597, 600, 602, 604, 605, 656, 658, 659, 663, 697, 709, 710, 711, 712, 713, 714, 715, 769, 787, 795, 809, 831, 875, 881, 920, 957, 959, 961, 962, 965, 966, 971, 972, 976, 978, 979, 980, 984, 985, 988, 989, 992, 995, 997, 998, 1086, 1186, 1188, 1189, 1193, 1253], "03": [47, 123, 128, 172, 200, 215, 240, 277, 307, 391, 393, 394, 399, 408, 409, 411, 414, 415, 417, 419, 420, 421, 422, 425, 427, 428, 431, 437, 450, 586, 589, 591, 593, 595, 597, 600, 602, 604, 658, 663, 709, 710, 711, 712, 713, 714, 715, 769, 787, 809, 831, 875, 881, 957, 959, 960, 965, 966, 971, 972, 978, 979, 980, 984, 985, 987, 989, 990, 991, 992, 995, 997, 1188, 1193], "af1": 47, "af2": 47, "af3": 47, "keep": [47, 128, 129, 142, 145, 273, 276, 277, 307, 452, 528, 543, 551, 581, 698, 769, 846, 848, 875, 1117, 1232, 1258], "easili": [47, 246, 270, 281, 286, 307, 751, 833, 851, 856, 875], "dot": [47, 769, 838, 875, 1232], "product": [47, 177, 214, 307, 379, 386, 769, 802, 813, 875, 946, 952, 1232], "fill_nul": [47, 189, 307, 444, 769, 803, 853, 875, 1015, 1232], "sum_horizont": [47, 307, 752], "167": 47, "47": [47, 179, 307, 602, 769, 795, 875, 881], "callabl": [48, 49, 50, 51, 142, 193, 218, 232, 237, 293, 307, 356, 520, 528, 529, 551, 552, 571, 587, 705, 706, 719, 730, 731, 743, 769, 818, 826, 829, 863, 875, 920, 1086, 1093, 1122, 1232], "by_first_letter_of_column_nam": 48, "f": [48, 129, 130, 198, 213, 260, 266, 272, 275, 307, 316, 356, 520, 611, 629, 656, 659, 699, 769, 881, 920, 1086, 1159, 1186, 1189, 1248], "fromkei": [48, 50], "by_first_letter_of_column_valu": 48, "starts_with": [48, 307, 311, 360, 363, 535, 623, 628, 748, 841, 875, 881, 1158, 1250], "to_seri": [48, 195, 307, 656, 696, 744, 1186], "xy": [48, 50], "yz": [48, 50], "b1": [48, 50], "b2": [48, 50], "orient": [48, 50, 120, 122, 229, 307, 875, 1240], "pow_n": 49, "powersofn": 49, "next": [49, 200, 215, 240, 277, 307, 359, 389, 411, 415, 428, 577, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 955, 981, 985, 998, 1113, 1232], "p": [49, 232, 307, 571, 751, 769, 826, 875, 881, 1163, 1164, 1243], "ceil": [49, 769, 1232, 1250], "previou": [49, 167, 389, 550, 551, 553, 555, 557, 558, 568, 669, 769, 955, 1107, 1232], "floor": [49, 450, 769, 1232, 1250], "nearest": [49, 179, 215, 235, 299, 307, 370, 449, 464, 575, 596, 597, 742, 769, 795, 814, 828, 869, 875, 935, 950, 1019, 1029, 1112, 1127, 1232, 1251], "24": [49, 150, 200, 215, 218, 240, 255, 277, 307, 379, 381, 397, 411, 412, 415, 422, 428, 430, 548, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 948, 981, 985, 992, 998, 1045, 1232, 1252, 1258], "001": [49, 666, 715, 993, 994, 996, 1196], "next_pow2": 49, "prev_pow2": 49, "nearest_pow2": 49, "32": [49, 61, 66, 69, 79, 210, 215, 240, 307, 548, 586, 611, 769, 831, 875, 952, 982, 1107, 1127, 1232, 1247, 1252], "128": [49, 63, 1107, 1232], "_lf": 50, "split_by_column_dtyp": 50, "collect_schema": [50, 307, 793, 799, 826, 832, 850, 875], "collect": [50, 53, 54, 142, 143, 144, 148, 158, 159, 162, 183, 216, 233, 255, 260, 273, 274, 307, 440, 470, 529, 699, 717, 721, 748, 751, 769, 784, 785, 787, 788, 791, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 875, 881, 1036, 1232, 1241, 1242, 1245, 1246, 1256, 1257, 1259], "collect_al": [50, 54, 790, 791, 875], "31": [51, 179, 180, 248, 255, 307, 392, 393, 397, 404, 408, 411, 421, 629, 656, 709, 712, 721, 729, 748, 795, 875, 881, 956, 958, 959, 963, 973, 978, 991, 1159, 1186, 1253, 1259], "42": [51, 179, 201, 225, 240, 307, 586, 769, 795, 823, 831, 875, 1025, 1232, 1246, 1258], "961": 51, "1764": 51, "4160": 51, "detail": [52, 117, 130, 131, 151, 153, 169, 200, 307, 809, 875, 1256, 1259], "build": [52, 117, 881, 1259], "compil": [52, 337, 338, 485, 486, 901, 902, 1051, 1052], "host": [52, 128, 134, 136, 145, 147], "git": 52, "flag": [52, 155, 266, 307, 609, 623, 630, 631, 633, 642, 643, 769, 800, 818, 875, 881, 1138, 1153, 1160, 1161, 1163, 1172, 1173, 1213, 1232, 1252], "lazy_fram": [53, 54], "iter": [53, 54, 55, 65, 116, 130, 161, 163, 171, 181, 191, 199, 200, 211, 212, 213, 240, 241, 242, 243, 246, 247, 254, 271, 272, 281, 282, 285, 286, 307, 366, 381, 389, 446, 567, 619, 670, 678, 688, 690, 695, 697, 698, 699, 700, 708, 733, 735, 738, 747, 751, 753, 759, 765, 769, 785, 797, 805, 808, 809, 831, 833, 834, 840, 845, 851, 852, 856, 875, 879, 880, 948, 955, 1135, 1232, 1259], "comm_subplan_elim": [53, 54, 790, 791, 800, 802, 827, 838, 875], "comm_subexpr_elim": [53, 54, 790, 791, 800, 802, 827, 838, 875], "cluster_with_column": [53, 54, 790, 791, 800, 802, 827, 838, 875], "comput": [53, 55, 89, 186, 199, 215, 267, 273, 286, 299, 307, 315, 324, 325, 326, 327, 328, 329, 346, 347, 348, 353, 354, 358, 369, 372, 373, 374, 377, 378, 379, 380, 386, 433, 441, 478, 502, 503, 504, 505, 509, 510, 511, 512, 516, 522, 523, 524, 525, 547, 567, 568, 573, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 613, 614, 615, 616, 620, 674, 675, 683, 688, 690, 693, 694, 695, 701, 703, 716, 735, 745, 746, 759, 769, 790, 808, 811, 813, 814, 846, 853, 856, 869, 875, 883, 888, 889, 890, 891, 892, 893, 910, 911, 912, 917, 918, 922, 934, 940, 941, 942, 944, 945, 946, 947, 952, 1004, 1006, 1011, 1046, 1068, 1069, 1070, 1071, 1075, 1076, 1077, 1078, 1082, 1088, 1089, 1090, 1091, 1098, 1107, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1144, 1145, 1146, 1147, 1150, 1205, 1206, 1214, 1221, 1232, 1251, 1254], "graph": [53, 130, 216, 307, 790, 811, 853, 875], "parallel": [53, 55, 125, 131, 140, 147, 200, 215, 216, 232, 247, 282, 307, 381, 492, 683, 759, 769, 781, 809, 813, 814, 834, 852, 863, 875, 948, 1058, 1221, 1232], "threadpool": 53, "Will": [53, 54, 790, 791, 800, 802, 827, 838, 875, 1232], "try": [53, 54, 110, 128, 129, 134, 140, 142, 145, 147, 790, 791, 800, 802, 827, 838, 875], "branch": [53, 54, 790, 791, 800, 802, 827, 838, 875], "subplan": [53, 54, 790, 791, 800, 802, 827, 838, 875], "union": [53, 54, 55, 512, 790, 791, 800, 802, 827, 838, 875, 881, 1078, 1255], "subexpress": [53, 54, 790, 791, 800, 802, 827, 838, 875], "reus": [53, 54, 790, 791, 800, 802, 827, 838, 875], "sequenti": [53, 54, 247, 282, 307, 790, 791, 800, 802, 827, 834, 838, 852, 875], "independ": [53, 54, 155, 158, 162, 270, 307, 790, 791, 800, 802, 827, 838, 875], "explain": [53, 54, 790, 791, 875, 1255], "gevent": [54, 150, 791, 875], "await": [54, 130, 791, 875], "_geventdataframeresult": [54, 791, 875], "asynchron": [54, 130, 791, 875], "them": [54, 116, 118, 119, 120, 122, 130, 131, 137, 138, 139, 140, 142, 146, 147, 187, 188, 200, 215, 225, 240, 270, 277, 307, 344, 437, 466, 499, 559, 560, 567, 586, 699, 710, 711, 713, 714, 756, 757, 769, 791, 801, 809, 814, 823, 831, 875, 881, 908, 1008, 1013, 1065, 1102, 1103, 1232, 1248, 1256], "schedul": [54, 791, 875], "insid": [54, 791, 875], "almost": [54, 218, 293, 307, 656, 658, 659, 791, 875, 1093, 1186, 1188, 1189, 1232], "instantli": [54, 791, 875], "asyncio": [54, 130, 791, 875], "want": [54, 119, 121, 133, 188, 218, 229, 240, 255, 307, 389, 446, 528, 529, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 624, 638, 644, 697, 705, 719, 741, 744, 760, 769, 791, 810, 817, 841, 875, 881, 955, 1013, 1093, 1154, 1168, 1174, 1232, 1245], "releas": [54, 133, 529, 769, 791, 875, 1259], "greenlet": [54, 791, 875], "task": [54, 791, 875], "wrapper": [54, 791, 875], "event": [54, 791, 875], "asyncresult": [54, 791, 875], "timeout": [54, 791, 875], "collect_async": [54, 875], "set_except": [54, 791, 875], "rerais": [54, 791, 875], "polarstyp": 55, "concatmethod": 55, "vertic": [55, 188, 275, 279, 307, 622, 635, 1152, 1165], "rechunk": [55, 116, 121, 128, 129, 132, 134, 136, 140, 142, 145, 146, 147, 188, 307, 769, 936, 1013, 1022, 1099, 1232], "vertical_relax": 55, "diagon": [55, 272, 307], "diagonal_relax": 55, "vstack": [55, 188, 307], "addition": [55, 241, 307, 881], "coerc": [55, 580, 769], "supertyp": [55, 190, 266, 270, 307, 322, 769, 804, 875, 879, 1232], "mismatch": [55, 108, 138, 146, 151, 153], "find": [55, 196, 307, 608, 623, 624, 769, 1136, 1154, 1232], "miss": [55, 128, 129, 142, 189, 307, 359, 436, 438, 439, 444, 451, 473, 474, 520, 769, 803, 875, 1007, 1009, 1010, 1015, 1232], "stack": [55, 204, 279, 307], "length": [55, 56, 72, 139, 142, 156, 160, 198, 200, 240, 253, 307, 310, 381, 415, 428, 514, 520, 539, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 617, 634, 638, 639, 640, 641, 646, 657, 666, 741, 744, 745, 746, 760, 769, 809, 827, 831, 839, 875, 879, 936, 948, 959, 985, 998, 1080, 1086, 1104, 1117, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1148, 1164, 1168, 1169, 1170, 1171, 1176, 1187, 1196, 1232, 1248, 1250], "don": [55, 200, 215, 218, 273, 275, 307, 381, 492, 529, 769, 809, 846, 875, 881, 948, 1058, 1093, 1232], "auto": [55, 116, 118, 119, 120, 122, 137, 138, 140, 146, 147, 272, 307, 875, 1259], "logic": [55, 218, 293, 307, 310, 311, 319, 321, 384, 529, 676, 687, 688, 689, 690, 731, 769, 796, 800, 813, 835, 863, 875, 885, 886, 1093, 1213, 1215, 1232, 1236, 1258], "align_fram": 55, "pattern": [55, 87, 128, 129, 142, 145, 146, 147, 212, 307, 536, 623, 624, 625, 630, 631, 632, 633, 642, 643, 644, 863, 881, 1135, 1137, 1153, 1154, 1155, 1160, 1161, 1162, 1163, 1172, 1173, 1174, 1232, 1252], "collis": 55, "need": [55, 86, 95, 123, 128, 129, 131, 200, 240, 243, 252, 307, 520, 586, 611, 660, 715, 741, 744, 760, 769, 809, 831, 875, 1141, 1190, 1232, 1259], "sure": [55, 116, 121, 128, 129, 132, 134, 136, 140, 236, 307, 769, 879], "contigu": [55, 116, 121, 128, 129, 132, 134, 136, 140, 142, 145, 146, 147, 236, 266, 307], "relev": 55, "df_h1": 55, "l1": 55, "l2": 55, "df_h2": 55, "r1": 55, "r2": 55, "r3": 55, "df_d1": 55, "df_d2": 55, "df_a1": 55, "df_a2": 55, "df_a3": 55, "inner": [56, 72, 157, 214, 276, 307, 344, 355, 386, 499, 519, 529, 580, 676, 748, 769, 813, 835, 848, 875, 908, 919, 952, 1065, 1085, 1093, 1215, 1232, 1246], "polarsdatatyp": [56, 72, 128, 129, 142, 155, 156, 157, 158, 159, 162, 172, 218, 265, 270, 307, 367, 440, 528, 529, 581, 636, 717, 729, 730, 731, 741, 744, 760, 765, 769, 787, 875, 881, 929, 1093, 1117, 1166, 1232], "pythondatatyp": [56, 72], "within": [56, 72, 151, 152, 153, 154, 199, 200, 201, 215, 240, 277, 307, 459, 577, 619, 769, 809, 814, 831, 875, 1025, 1232, 1256], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 155, 307, 761, 762, 764, 765, 770, 771, 774, 776, 777, 778, 875, 1224, 1226, 1228, 1232, 1233, 1237, 1238, 1239], "categoricalord": 59, "encod": [59, 65, 75, 128, 129, 142, 263, 307, 361, 452, 584, 626, 668, 769, 924, 1120, 1156, 1208, 1232], "lexic": [59, 881, 933], "calendar": [61, 62, 200, 215, 240, 277, 307, 392, 402, 404, 411, 415, 428, 432, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 958, 968, 973, 981, 985, 998, 1002, 1008, 1232], "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 579, 623, 769, 1115, 1153, 1232, 1252], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 411, 579, 642, 643, 666, 769, 881, 981, 1115, 1172, 1173, 1196, 1232, 1250], "dai": [61, 62, 77, 200, 213, 215, 240, 277, 307, 389, 408, 409, 411, 412, 415, 417, 420, 421, 428, 430, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 697, 709, 710, 711, 712, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 881, 955, 978, 979, 981, 982, 985, 987, 990, 991, 998, 1000, 1008, 1232, 1253], "unix": [61, 62, 399, 721, 965], "epoch": [61, 62, 721, 1253], "1970": [61, 62, 148, 1240], "time_unit": [62, 64, 391, 393, 399, 419, 431, 659, 712, 713, 714, 715, 721, 881, 957, 959, 965, 989, 1001, 1189], "time_zon": [62, 394, 396, 414, 659, 712, 713, 714, 881, 956, 960, 964, 984, 1189], "timezon": [62, 132, 143, 396, 881, 1253], "m": [62, 64, 214, 307, 390, 391, 393, 398, 399, 417, 419, 420, 431, 630, 656, 658, 659, 663, 712, 713, 714, 715, 721, 813, 875, 881, 956, 957, 959, 964, 965, 987, 989, 990, 1001, 1160, 1186, 1188, 1189, 1193, 1243, 1252, 1253], "microsecond": [62, 64, 200, 212, 215, 240, 242, 243, 262, 277, 307, 411, 415, 423, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 712, 713, 714, 715, 755, 756, 757, 769, 809, 814, 827, 831, 875, 881, 981, 985, 993, 998, 1008, 1232, 1253], "zone": [62, 158, 159, 162, 390, 394, 414, 437, 659, 712, 713, 714, 769, 881, 956, 960, 984, 1008, 1189, 1232], "zoneinfo": [62, 881], "available_timezon": [62, 881], "progress": [63, 65], "expect": [63, 65, 97, 105, 113, 128, 130, 142, 520, 529, 729, 769, 816, 818, 875], "digit": [63, 571, 605, 606, 631, 769, 881, 1132, 1133, 1155, 1161, 1232, 1259], "offset": [64, 128, 129, 134, 136, 140, 142, 145, 146, 147, 194, 200, 240, 253, 283, 284, 307, 389, 390, 398, 408, 409, 411, 415, 428, 454, 496, 514, 586, 617, 646, 659, 769, 807, 809, 831, 839, 854, 855, 875, 955, 956, 964, 978, 979, 981, 985, 998, 1021, 1062, 1080, 1148, 1176, 1189, 1232, 1255], "integer_list": 72, "float_list": 72, "wrap": [74, 123, 367, 466, 528, 769, 929, 1232], "arbitrari": [74, 384, 769, 796, 875, 881], "schemadict": [76, 116, 118, 119, 120, 121, 122, 128, 130, 131, 133, 139, 140, 142, 147, 307, 751, 818, 863, 875], "composit": [76, 1259], "either": [76, 158, 210, 214, 215, 216, 231, 240, 241, 265, 266, 307, 437, 528, 572, 574, 581, 586, 656, 687, 695, 751, 769, 813, 814, 816, 831, 875, 879, 881, 1008, 1111, 1117, 1186, 1232, 1243, 1259], "map": [76, 118, 119, 128, 129, 130, 131, 134, 135, 140, 141, 142, 145, 158, 172, 175, 192, 212, 218, 237, 241, 242, 243, 245, 261, 307, 318, 415, 428, 528, 529, 550, 552, 553, 555, 557, 558, 581, 683, 730, 769, 787, 829, 832, 875, 880, 881, 950, 985, 998, 1093, 1117, 1221, 1232, 1242, 1243, 1256], "nanosecond": [77, 200, 215, 240, 277, 307, 411, 415, 416, 426, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 981, 985, 986, 996, 998, 1008, 1232, 1253], "midnight": 77, "unsign": [78, 79, 80, 81, 579, 769, 881, 1115, 1232], "static": [82, 863], "enable_string_cach": 84, "stringcach": [84, 85, 214, 307, 781, 931, 932], "reliabl": [84, 85], "wai": [84, 85, 116, 118, 119, 120, 122, 137, 138, 146, 199, 213, 232, 254, 286, 307, 567, 571, 619, 630, 702, 765, 769, 793, 799, 808, 826, 832, 840, 850, 856, 863, 875, 1160], "until": [84, 200, 216, 307, 640, 641, 666, 809, 875, 1170, 1171, 1196], "disable_string_cach": 85, "warn": [86, 87, 90, 94, 100, 102, 104, 114, 567, 769, 1232], "issu": [86, 87, 90, 94, 100, 102, 114, 128, 129, 130, 133, 142, 307, 379, 380, 672, 769, 946, 947, 1203, 1232], "remap": 86, "anoth": [86, 157, 172, 185, 199, 215, 307, 381, 391, 465, 495, 533, 537, 581, 589, 591, 593, 595, 597, 600, 602, 604, 633, 769, 787, 808, 853, 875, 948, 957, 1005, 1013, 1030, 1061, 1117, 1163, 1232, 1251, 1252], "dubiou": 87, "tempor": [87, 172, 200, 212, 240, 242, 243, 262, 307, 371, 466, 586, 589, 591, 593, 595, 597, 600, 602, 604, 769, 781, 787, 809, 831, 875, 881, 938, 1031, 1232, 1250, 1255], "built": 87, "modul": [87, 95, 133, 768, 881, 1259], "strftime": [87, 420, 990, 1253], "document": [87, 131, 133, 307, 310, 311, 417, 420, 637, 656, 658, 659, 663, 765, 932, 987, 990, 1167, 1186, 1188, 1189, 1193, 1232, 1236], "ufunc": 90, "numpi": [90, 120, 150, 177, 212, 242, 243, 262, 266, 267, 307, 528, 559, 560, 587, 769, 875, 1034, 1037, 1039, 1040, 1102, 1103, 1122, 1213, 1214, 1232], "would": [90, 128, 129, 142, 266, 270, 307, 332, 343, 389, 497, 528, 529, 538, 567, 577, 695, 697, 769, 896, 907, 955, 1063, 1113, 1213, 1232], "unabl": [91, 133], "hstack": [91, 307], "assert": [92, 151, 152, 153, 154, 158, 162, 240, 307, 781, 881], "is_in": [93, 191, 307, 769, 1232], "map_el": [94, 218, 307, 528, 686, 769, 1232], "instal": [95, 121, 128, 129, 131, 134, 136, 177, 267, 307, 389, 697, 838, 875, 955, 1214, 1232], "upgrad": 95, "least": [97, 568, 630, 632, 769, 1107, 1160, 1162, 1232, 1250], "bound": [98, 128, 129, 186, 200, 307, 343, 371, 466, 495, 497, 520, 526, 682, 692, 710, 711, 713, 714, 756, 757, 769, 809, 875, 907, 938, 1006, 1031, 1061, 1063, 1092, 1220, 1232, 1248], "potenti": [100, 102, 133, 142, 145, 146, 212, 241, 243, 307, 550, 793, 795, 799, 832, 850, 875, 879], "pitfal": 100, "slow": [102, 119, 122, 128, 129, 130, 133, 137, 139, 142, 146, 307, 381, 529, 587, 636, 769, 863, 875, 948, 1122, 1166, 1232], "map_": 102, "unexpect": [103, 108, 130, 528, 529, 769, 1093, 1232], "caus": [103, 108, 117, 128, 129, 142, 151, 169, 188, 266, 307, 528, 769, 1013, 1213, 1232], "panic": 103, "encount": [107, 128, 129, 142, 200, 307, 559, 560, 636, 637, 701, 705, 719, 769, 809, 875, 1102, 1103, 1166, 1167, 1232], "incompat": 110, "come": [111, 131, 200, 307, 389, 408, 409, 478, 520, 697, 769, 809, 874, 875, 955, 978, 979, 1046, 1232], "unsuit": 115, "arrai": [116, 120, 128, 129, 132, 140, 186, 187, 260, 265, 266, 267, 307, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 377, 378, 379, 380, 487, 502, 503, 504, 505, 507, 516, 517, 519, 522, 524, 528, 582, 588, 590, 592, 594, 596, 599, 601, 603, 609, 716, 748, 769, 801, 875, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 944, 945, 946, 947, 952, 1006, 1053, 1068, 1069, 1070, 1071, 1073, 1081, 1082, 1083, 1085, 1088, 1090, 1091, 1118, 1123, 1124, 1126, 1129, 1130, 1131, 1138, 1142, 1207, 1211, 1213, 1214, 1232, 1250, 1255, 1258], "chunkedarrai": [116, 228, 307], "recordbatch": [116, 213, 307, 748, 1242, 1256], "schemadefinit": [116, 118, 119, 120, 122, 137, 138, 146, 307, 875], "schema_overrid": [116, 118, 119, 120, 121, 122, 128, 129, 130, 131, 133, 137, 138, 139, 142, 213, 266, 307, 875, 881], "part": [116, 133, 265, 270, 307, 567, 631, 648, 649, 769, 800, 802, 827, 838, 853, 875, 1161, 1178, 1179, 1253], "closest": [116, 215, 307, 1251], "pair": [116, 118, 119, 120, 122, 137, 138, 146, 237, 307, 829, 875, 1259], "declar": [116, 118, 119, 120, 122, 130, 137, 138, 146, 265, 270, 307, 875, 881, 1240], "sever": [116, 118, 119, 120, 122, 137, 138, 146, 307, 875, 1259], "form": [116, 118, 119, 120, 122, 137, 138, 146, 212, 242, 275, 307, 568, 769, 875, 1107, 1232], "dimens": [116, 118, 120, 122, 137, 138, 146, 307, 582, 769, 875, 1118, 1213, 1232], "supportsinterchang": 117, "allow_copi": [117, 169, 266, 307, 1213, 1232], "interchang": [117, 169], "__dataframe__": 117, "convers": [117, 133, 169, 212, 213, 242, 243, 262, 266, 267, 307, 394, 656, 658, 659, 663, 781, 960, 1024, 1186, 1188, 1189, 1193, 1213, 1214, 1232], "latest": [117, 132, 143, 169, 414, 451, 539, 656, 659, 712, 769, 984, 1186, 1189], "from_panda": 117, "from_arrow": 117, "effici": [117, 130, 133, 211, 213, 307, 528, 769], "through": [117, 130, 765, 881, 1232, 1245, 1256], "pd": [117, 121, 676, 748, 769, 1214, 1215, 1232], "df_pd": 117, "dfi": [117, 169], "strict": [118, 119, 122, 172, 307, 361, 367, 623, 626, 633, 656, 658, 659, 661, 663, 769, 787, 875, 881, 924, 929, 1153, 1156, 1163, 1186, 1188, 1189, 1191, 1193, 1232], "clone": [118, 119, 120, 121, 122, 173, 266, 307, 788, 875, 937, 1232], "dimension": [118, 120, 122, 266, 307, 875, 1232], "exactli": [118, 119, 122, 151, 152, 153, 154, 157, 158, 162, 307, 648, 649, 654, 655, 715, 875, 1142, 1178, 1179, 1184, 1185, 1232], "infer_schema_length": [119, 122, 128, 129, 130, 133, 137, 139, 142, 146, 307, 636, 875, 1166], "NOT": [119, 211, 249, 307, 520, 537, 609, 769, 836, 875, 1256], "typic": [119, 130, 133, 147, 218, 307, 398, 881, 964, 1093, 1232], "clearer": 119, "partial": [119, 128, 142, 307, 875], "scan": [119, 122, 128, 129, 130, 133, 137, 139, 142, 143, 144, 145, 146, 147, 148, 307, 636, 802, 810, 817, 875, 1166], "present": [119, 158, 470, 652, 653, 769, 802, 838, 875], "np": [120, 191, 266, 307, 453, 608, 769, 805, 875, 1020, 1034, 1037, 1039, 1040, 1135, 1136, 1232], "ndarrai": [120, 191, 266, 307, 453, 608, 769, 805, 875, 1020, 1135, 1136, 1213, 1232], "slower": [120, 122, 133, 199, 218, 231, 277, 293, 307, 529, 731, 769, 808, 863, 875, 1093, 1232], "columnar": [120, 122, 212, 242, 307], "interpret": [120, 122, 128, 129, 142, 307, 875], "yield": [120, 122, 128, 129, 130, 142, 186, 188, 211, 272, 307, 450, 528, 567, 769, 875, 1006, 1013, 1232], "conclus": [120, 122, 307, 875], "datetimeindex": 121, "nan_to_nul": [121, 307, 875, 1232], "include_index": 121, "nan": [121, 158, 169, 189, 266, 267, 307, 387, 388, 434, 435, 444, 455, 457, 464, 473, 474, 475, 476, 480, 527, 530, 545, 559, 560, 561, 562, 587, 679, 701, 769, 803, 875, 889, 893, 953, 954, 1015, 1039, 1040, 1102, 1103, 1122, 1213, 1214, 1232, 1259], "nameless": 121, "enumer": [121, 128, 129, 142, 213, 307], "regardless": [121, 171, 199, 215, 271, 307, 366, 394, 637, 678, 759, 769, 785, 845, 875, 960, 1167], "pleas": [121, 130, 131, 200, 307, 310, 311, 437, 702, 715, 769, 809, 875, 1008, 1232, 1236], "reset_index": [121, 200, 307, 809, 875], "prior": 121, "pd_df": 121, "pd_seri": 121, "its": [123, 150, 186, 266, 307, 393, 415, 428, 437, 584, 619, 759, 769, 793, 799, 850, 875, 932, 959, 985, 998, 1006, 1008, 1120, 1213, 1232, 1258], "repr": 123, "trim": [123, 1252], "whitespac": [123, 651, 652, 653, 1181, 1182, 1183, 1252], "prompt": 123, "extract": [123, 255, 307, 392, 395, 397, 400, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 571, 631, 632, 636, 637, 646, 648, 769, 958, 961, 962, 963, 966, 968, 972, 973, 974, 976, 977, 980, 982, 983, 986, 988, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1161, 1162, 1166, 1167, 1176, 1250], "to_init_repr": [123, 307, 1232], "truncat": [123, 128, 129, 142, 198, 200, 212, 242, 243, 262, 307, 809, 827, 875, 1255], "identifi": [123, 130, 224, 231, 273, 285, 307, 822, 846, 875], "compound": [123, 243, 307, 881], "neither": [123, 133, 139, 244, 307, 356, 520, 920, 1086], "source_ac": 123, "source_cha": 123, "ident": [123, 173, 174, 307, 417, 584, 585, 769, 788, 789, 875, 937, 939, 987, 1120, 1121, 1232], "timestamp": [123, 132, 143, 200, 307, 414, 415, 428, 721, 809, 875, 984, 985, 998], "tor_id": 123, "nnel_id": 123, "\u03bc": [123, 172, 200, 212, 240, 242, 243, 262, 277, 307, 390, 391, 393, 394, 395, 396, 398, 400, 403, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 586, 589, 591, 593, 595, 597, 600, 602, 604, 656, 659, 712, 713, 714, 715, 721, 769, 787, 809, 814, 831, 875, 881, 956, 957, 959, 960, 961, 962, 964, 965, 966, 971, 972, 976, 978, 979, 980, 981, 984, 985, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1186, 1189], "asia": [123, 881, 961, 962, 988], "tokyo": [123, 881], "123456780": 123, "9876543210": 123, "56": [123, 674, 769], "59": [123, 179, 307, 393, 406, 416, 450, 712, 755, 756, 757, 769, 795, 875, 881, 959, 976, 986], "663053": 123, "jst": [123, 881], "803065983": 123, "2055938745": 123, "38": [123, 155, 158], "050545": 123, "source_actor_id": 123, "source_channel_id": 123, "to_list": [123, 240, 307, 1153, 1163, 1232], "uint32": [124, 150, 172, 186, 240, 284, 307, 332, 337, 338, 375, 437, 453, 456, 481, 485, 486, 501, 580, 584, 585, 586, 625, 638, 639, 676, 702, 725, 728, 769, 787, 831, 855, 875, 881, 897, 901, 902, 929, 1006, 1008, 1051, 1052, 1067, 1120, 1121, 1155, 1168, 1169, 1215, 1216, 1232], "regular": [124, 212, 241, 242, 277, 284, 307, 440, 623, 625, 630, 631, 632, 633, 642, 643, 697, 717, 769, 855, 875, 881, 1153, 1155, 1160, 1161, 1162, 1163, 1172, 1173], "uint64": [124, 201, 240, 284, 307, 337, 338, 437, 459, 485, 486, 579, 586, 769, 831, 855, 875, 881, 901, 902, 1008, 1025, 1051, 1052, 1115, 1216, 1232], "bigidx": 124, "over": [125, 128, 129, 130, 132, 133, 142, 158, 159, 171, 188, 211, 212, 213, 218, 241, 242, 243, 255, 271, 272, 285, 293, 307, 311, 365, 366, 381, 384, 437, 445, 528, 529, 538, 540, 541, 542, 543, 551, 552, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 677, 678, 705, 706, 719, 730, 731, 743, 748, 769, 785, 841, 845, 863, 875, 881, 928, 948, 1008, 1013, 1093, 1123, 1124, 1126, 1130, 1217, 1232], "fetch": [125, 142, 216, 307, 790, 810, 817, 875], "ideal": 125, "read_csv_batch": 125, "tpch": [125, 129], "tables_scale_100": [125, 129], "lineitem": [125, 129, 131], "tbl": [125, 129, 1258], "try_parse_d": [125, 128, 129, 142], "n_row": [126, 128, 129, 134, 136, 140, 142, 145, 146, 147, 213, 307, 802, 875], "handler": [126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 180, 307, 384, 769, 796, 875], "builtin": [126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 180, 307, 384, 769, 796, 875], "instanc": [126, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 147, 158, 162, 167, 172, 188, 193, 307, 539, 705, 719, 765, 787, 818, 854, 855, 875, 1013, 1232], "accept": [126, 128, 129, 132, 134, 136, 140, 158, 171, 181, 199, 246, 247, 251, 254, 271, 281, 282, 286, 307, 316, 366, 371, 440, 466, 567, 581, 619, 670, 678, 686, 688, 690, 695, 698, 699, 700, 708, 717, 733, 735, 738, 747, 751, 753, 759, 769, 785, 797, 808, 833, 834, 837, 840, 845, 851, 852, 856, 875, 879, 880, 938, 1031, 1117, 1140, 1232], "stop": [126, 128, 129, 134, 136, 140, 142, 145, 146, 147, 589, 591, 593, 595, 597, 600, 602, 604, 769, 957, 960, 965, 966, 972, 974, 976, 980, 985, 989], "text": [127, 130, 437, 634, 638, 639, 642, 643, 645, 646, 657, 749, 769, 1008, 1164, 1168, 1169, 1175, 1176, 1187, 1232, 1245, 1259], "read_csv": [127, 133, 142], "write_clipboard": [127, 307], "has_head": [128, 129, 133, 142], "new_column": [128, 129, 133, 142], "comment_prefix": [128, 129, 142], "skip_row": [128, 129, 142], "missing_utf8_is_empty_str": [128, 129, 142], "ignore_error": [128, 129, 138, 142, 146], "n_thread": [128, 129], "8192": 128, "csvencod": [128, 129, 142], "low_memori": [128, 129, 140, 142, 146, 147], "skip_rows_after_head": [128, 129, 142], "row_index_nam": [128, 129, 134, 136, 140, 142, 145, 146, 147], "row_index_offset": [128, 129, 134, 136, 140, 142, 145, 146, 147], "sample_s": [128, 129], "eol_char": [128, 129, 142], "raise_if_empti": [128, 129, 133, 139, 142], "truncate_ragged_lin": [128, 129, 142], "decimal_comma": [128, 129, 142], "glob": [128, 129, 140, 142, 145, 146, 147], "fsspec": [128, 129, 134, 136, 140, 142, 143, 144, 145, 150], "remot": [128, 129, 134, 136], "autogener": [128, 129, 142], "column_x": [128, 129, 142], "shorter": [128, 129, 142, 520, 725, 726], "remain": [128, 129, 142, 183, 186, 191, 233, 307, 387, 388, 446, 491, 581, 648, 649, 769, 798, 805, 818, 875, 953, 954, 1006, 1017, 1057, 1117, 1178, 1179, 1232, 1245], "comment": [128, 129, 142], "skip": [128, 129, 133, 140, 142, 147, 215, 275, 307, 1093, 1232, 1246], "escap": [128, 129, 131, 142], "complet": [128, 130, 142, 1257], "wherea": [128, 142, 240, 307, 415, 428, 559, 560, 586, 769, 810, 817, 831, 875, 985, 998, 1102, 1103, 1232], "prefer": [128, 129, 132, 133, 142, 163, 171, 188, 212, 218, 241, 242, 271, 293, 307, 365, 366, 440, 529, 677, 678, 769, 785, 845, 875, 928, 1013, 1093, 1217, 1232, 1259], "treat": [128, 129, 142, 437, 623, 625, 633, 642, 643, 759, 769, 1008, 1153, 1155, 1163, 1172, 1173, 1232], "10000": [128, 213, 307], "iso8601": [128, 129, 142], "succe": [128, 129, 142], "cpu": [128, 129, 265, 307, 1211, 1232], "buffer": [128, 129, 130, 186, 212, 307, 1006, 1232], "onc": [128, 129, 164, 218, 242, 244, 286, 307, 508, 528, 529, 607, 654, 655, 769, 786, 856, 875, 1074, 1093, 1134, 1184, 1185, 1232, 1243], "modifi": [128, 129, 142, 164, 167, 188, 204, 211, 212, 279, 307, 333, 414, 431, 623, 630, 631, 633, 642, 643, 769, 887, 984, 1001, 1013, 1153, 1160, 1161, 1163, 1172, 1173, 1192, 1194, 1195, 1232], "upper": [128, 129, 130, 186, 200, 307, 371, 461, 466, 520, 552, 682, 692, 710, 711, 713, 714, 756, 757, 769, 809, 875, 938, 1006, 1027, 1031, 1092, 1220, 1232, 1248, 1250], "lossi": [128, 129, 142], "decod": [128, 129, 636], "expens": [128, 129, 140, 142, 146, 147, 161, 163, 212, 218, 241, 242, 243, 272, 273, 307, 529, 769, 793, 795, 799, 832, 846, 850, 875, 1013, 1093, 1232, 1259], "aggreg": [128, 129, 132, 140, 193, 199, 200, 219, 221, 223, 226, 229, 233, 234, 235, 240, 256, 257, 275, 278, 286, 287, 289, 291, 307, 317, 446, 462, 528, 529, 567, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 687, 688, 689, 690, 705, 706, 707, 708, 719, 724, 732, 733, 735, 737, 738, 743, 752, 753, 769, 809, 818, 819, 820, 821, 824, 825, 828, 831, 842, 843, 849, 856, 857, 859, 861, 875, 879, 1028, 1122, 1123, 1124, 1126, 1129, 1130, 1131, 1232, 1246, 1248, 1250, 1255], "parser": 128, "regard": [128, 701], "sens": [128, 134, 136, 145, 225, 277, 307, 567, 769, 823, 875], "particular": [128, 134, 136, 145, 171, 186, 271, 307, 365, 366, 677, 678, 769, 785, 845, 875, 928, 1006, 1217, 1232], "usernam": [128, 131, 134, 136, 145], "password": [128, 131, 134, 136, 145], "sampl": [128, 129, 293, 307, 616, 769, 863, 1147, 1232], "estim": [128, 129, 170, 186, 307, 323, 438, 439, 478, 691, 769, 784, 875, 1006, 1009, 1010, 1046, 1232], "alloc": [128, 129, 186, 236, 307, 769, 879, 1006, 1232], "window": [128, 129, 142, 200, 240, 307, 381, 436, 438, 439, 529, 541, 567, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 699, 745, 746, 769, 809, 831, 875, 948, 1007, 1009, 1010, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1232], "rn": [128, 129, 142], "r": [128, 129, 142, 307, 571, 625, 629, 630, 631, 632, 642, 643, 769, 881, 1155, 1159, 1160, 1161, 1162, 1172, 1173, 1187, 1243, 1252], "nodataerror": [128, 129, 133, 139, 142], "longer": [128, 129, 142], "period": [128, 129, 142, 200, 240, 307, 415, 428, 436, 438, 439, 568, 586, 710, 711, 713, 714, 756, 757, 769, 809, 831, 875, 985, 998, 1007, 1009, 1010, 1107, 1232], "expand": [128, 140, 142, 147, 442, 534, 536, 580, 769, 879, 881, 1012, 1232], "rule": [128, 140, 142, 147, 193, 307, 624, 644, 659, 1154, 1174, 1189], "lazili": [128, 129, 142, 143, 144, 145, 146, 147, 791, 875], "incorrectli": [128, 520], "continu": [128, 382, 574, 616, 769, 949, 1111, 1147, 1232], "benchmark": 128, "demonstr": [128, 450, 769, 881], "birthdai": 128, "alic": [128, 1257], "1995": 128, "bob": [128, 225, 307, 823, 875, 1257], "1990": [128, 1240], "charli": [128, 1257], "2002": [128, 401, 411, 967, 981, 1002], "08": [128, 151, 152, 153, 154, 179, 215, 240, 255, 307, 389, 393, 408, 409, 415, 586, 656, 713, 715, 769, 795, 831, 875, 881, 955, 985, 998, 1186, 1253], "50000": 129, "batchedcsvread": 129, "upon": 129, "creation": 129, "gather": [129, 194, 307, 332, 454, 496, 695, 769, 807, 875, 896, 1021, 1062, 1232], "done": [129, 148, 167, 170, 172, 215, 307, 322, 323, 567, 769, 784, 787, 814, 875], "next_batch": 129, "big": 129, "interest": [129, 417, 420, 987, 990], "seen_group": 129, "big_fil": 129, "df_current_batch": 129, "partition_df": 129, "partition_bi": [129, 213, 307, 541, 567, 769], "as_dict": [129, 231, 307], "fh": 129, "els": [129, 759], "iter_batch": 130, "execute_opt": [130, 131], "client": 130, "packag": [130, 307, 311, 389, 697, 879, 955], "establish": 130, "async": [130, 791, 875], "aris": 130, "happen": [130, 394, 574, 769, 960, 1111, 1232], "report": 130, "resultset": 130, "manner": 130, "veri": [130, 212, 272, 307, 529, 769, 863, 1251], "poor": 130, "mani": [130, 131, 188, 307, 644, 1013, 1174, 1232], "trip": 130, "still": [130, 131], "exact": [130, 156, 158, 162, 215, 252, 307, 323, 450, 629, 654, 655, 656, 658, 659, 679, 769, 1159, 1186, 1188, 1189], "incom": 130, "read_arrow_batches_from_odbc": 130, "read_database_uri": 130, "wide": [130, 198, 224, 275, 307, 822, 875], "snowflak": [130, 131], "variou": [130, 175, 307, 769, 792, 875, 880, 881, 1232], "facil": 130, "initialis": [130, 167, 875], "flight": 130, "flightsql": 130, "flight_sql": 130, "about": [130, 616, 623, 630, 631, 633, 642, 643, 769, 879, 1147, 1153, 1160, 1161, 1163, 1172, 1173, 1232, 1259], "notabl": 130, "dremio": 130, "influxdb": 130, "notic": [130, 307, 875, 1232], "dbapi2": 130, "connectorx": [130, 131, 150], "optimis": [130, 218, 243, 293, 307, 875, 1093, 1137, 1232, 1259], "translat": 130, "conn": 130, "url": [130, 131, 140, 147, 630, 632, 1160, 1162], "render_as_str": 130, "hide_password": 130, "abl": 130, "relat": [130, 167, 642, 643, 881, 1172, 1173, 1246, 1258], "k\u00f9zudb": 130, "cypher": 130, "surrealql": 130, "surrealdb": 130, "test_data": 130, "user_conn": 130, "normalised_scor": 130, "uint8": [130, 172, 264, 265, 266, 275, 307, 379, 380, 581, 672, 686, 769, 787, 875, 881, 946, 947, 1117, 1203, 1216, 1232, 1259], "parameteris": 130, "metric": 130, "alchemy_conn": 130, "qmark": 130, "variad": 130, "1000": [130, 186, 264, 284, 307, 323, 769, 855, 875, 993, 1090, 1210, 1232, 1259], "localhost": 130, "5432": 130, "uid": 130, "usr": 130, "pwd": 130, "max_text_s": 130, "max_binary_s": 130, "do_someth": 130, "kuzu_db_conn": 130, "session": 130, "ext": 130, "create_async_engin": 130, "async_engin": 130, "aiosqlit": 130, "surreal": 130, "surrealhttp": 130, "surreal_query_to_fram": 130, "8000": 130, "rpc": 130, "partition_on": 131, "partition_rang": 131, "partition_num": 131, "dbreadengin": 131, "raw": 131, "warehous": 131, "role": 131, "caller": [131, 225, 307, 520, 818, 823, 863, 875], "respons": [131, 225, 307, 823, 875], "often": [131, 167, 200, 240, 307, 340, 489, 580, 586, 769, 809, 831, 875, 904, 1055, 1245], "transfer": 131, "redshift": 131, "mysql": 131, "mariadb": 131, "clickhous": 131, "oracl": 131, "bigqueri": 131, "github": [131, 307], "sfu": 131, "connector": 131, "destin": 131, "develop": [131, 158, 162], "read_databas": 131, "usual": [131, 270, 307, 390, 956], "urllib": 131, "quote_plu": 131, "word": [131, 642, 643, 652, 653], "3f": [131, 656, 659, 1186, 1189], "20word": 131, "explicitli": [131, 133, 156, 158, 167, 307, 751, 780, 1256], "test_tabl": 131, "compani": 131, "testdb": 131, "public": [131, 307, 769, 781, 875, 1232, 1255], "myrol": 131, "delta_table_opt": [132, 143], "root": [132, 143, 369, 540, 550, 551, 553, 555, 557, 558, 620, 768, 769, 934, 1150, 1232, 1251], "absolut": [132, 143, 144, 151, 152, 153, 154, 315, 436, 438, 439, 769, 883, 1007, 1009, 1010, 1232, 1251], "info": [132, 143, 144, 150, 307, 310, 1232, 1236], "avoid": [132, 158, 162, 242, 307, 318, 769], "year": [132, 143, 200, 215, 240, 255, 277, 307, 389, 401, 402, 411, 412, 415, 428, 429, 586, 589, 591, 593, 595, 597, 600, 602, 604, 697, 709, 710, 711, 712, 713, 714, 756, 757, 769, 809, 814, 831, 875, 881, 955, 967, 968, 981, 982, 985, 998, 999, 1253], "2021": [132, 143, 172, 179, 198, 200, 277, 307, 656, 729, 787, 795, 809, 875, 881, 961, 962, 968, 988, 1186], "travel": [132, 143], "2020": [132, 143, 172, 179, 198, 215, 240, 307, 310, 389, 394, 398, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 437, 586, 656, 658, 659, 697, 769, 787, 795, 831, 875, 881, 955, 960, 964, 984, 987, 990, 991, 992, 993, 994, 995, 996, 997, 1008, 1186, 1188, 1189, 1232], "tzinfo": [132, 143, 881], "utc": [132, 143, 390, 394, 396, 398, 414, 656, 659, 881, 956, 960, 964, 984, 1186, 1189], "aw": [132, 140, 142, 143, 147], "googl": [132, 143, 144], "service_account": [132, 143], "service_account_json_absolute_path": [132, 143], "az": [132, 143, 144], "adl": [132, 143, 144], "abf": [132, 143, 144], "azure_storage_account_nam": [132, 143, 144], "azure_storage_account_kei": [132, 143, 144], "without_fil": [132, 143, 144], "track": [132, 143, 144, 218, 307, 520, 1256], "sheet_id": [133, 139], "sheet_nam": [133, 139], "excelspreadsheetengin": 133, "read_opt": 133, "calamin": 133, "fastexcel": [133, 150], "xlsb": 133, "xl": 133, "19": [133, 158, 215, 240, 307, 392, 415, 586, 591, 593, 595, 597, 660, 769, 814, 831, 875, 958, 985, 998, 1190], "openpyxl": [133, 150], "sheetnam": [133, 139], "nor": [133, 139, 244, 307], "xlsx2csv": [133, 150], "refin": 133, "major": [133, 265, 307], "dramat": 133, "bind": 133, "significantli": [133, 218, 293, 307, 1093, 1232, 1259], "primari": [133, 1259], "constructor": [133, 162], "load_workbook": 133, "excelread": 133, "load_sheet_by_nam": 133, "influenc": [133, 802, 818, 875], "pipelin": [133, 270, 307], "becom": [133, 160], "skip_empty_lin": 133, "correct": [133, 139, 438, 439, 478, 598, 616, 769, 818, 875, 879, 1009, 1010, 1046, 1128, 1147, 1232], "forc": [133, 215, 218, 266, 293, 307, 520, 813, 814, 863, 875, 1093, 1213, 1232], "best": [133, 218, 293, 307, 529, 769, 1093, 1232], "known": [133, 134, 356, 520, 863, 920, 1086], "ambigu": [133, 414, 415, 428, 656, 659, 712, 984, 985, 998, 1186, 1189], "memory_map": [134, 140, 145], "greatli": [134, 145], "repeat": [134, 145, 578, 580, 741, 760, 769], "o": [134, 145, 365, 366, 381, 629, 677, 678, 769, 928, 948, 1159, 1181, 1217, 1232, 1243], "That": [134, 818, 875], "filenam": 134, "my_fil": 134, "write_ipc": [134, 307], "read_ndjson": 137, "stringio": [137, 138, 180, 307, 384, 452, 541, 769, 796, 835, 875], "With": [137, 210, 251, 307, 351, 513, 610, 769, 837, 875, 915, 1045, 1079, 1140, 1232], "becaus": [138, 146, 186, 200, 216, 218, 275, 293, 307, 450, 492, 769, 809, 863, 875, 1006, 1058, 1093, 1232], "openoffic": 139, "od": [139, 781], "parallelstrategi": [140, 147], "use_statist": [140, 147], "hive_partit": [140, 147], "hive_schema": [140, 147], "retri": [140, 142, 145, 147], "row_group": [140, 147], "hive": [140, 147], "prune": [140, 147, 818, 875], "gcp": [140, 142, 144, 147], "stabl": [140, 177, 179, 201, 244, 255, 307, 459, 525, 769, 795, 822, 840, 841, 875, 1025, 1232], "read_tabl": 140, "scan_parquet": [140, 148], "scan_pyarrow_dataset": [140, 147], "with_column_nam": 142, "file_cache_ttl": [142, 145], "push": [142, 145, 146, 147, 148], "down": [142, 145, 146, 147, 148, 449, 769, 1019, 1232], "therebi": [142, 145, 146], "realloc": [142, 145, 146, 188, 307, 1013, 1232], "headerless": 142, "download": [142, 145, 838, 875], "polars_file_cache_ttl": [142, 145], "hour": [142, 145, 200, 215, 240, 277, 307, 403, 405, 406, 410, 411, 415, 416, 422, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 712, 713, 714, 715, 755, 756, 757, 769, 809, 814, 831, 875, 881, 981, 985, 992, 998, 1008, 1232, 1253], "my_long_fil": 142, "thing": [142, 149], "less": [142, 215, 307, 450, 480, 527, 528, 649, 769, 814, 875, 1179, 1259], "breezah": 142, "languag": [142, 200, 215, 240, 277, 307, 411, 415, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998, 1008, 1232], "hard": [142, 818, 875], "mydf": 142, "lambda": [142, 193, 218, 232, 233, 237, 293, 307, 356, 436, 437, 438, 439, 520, 528, 529, 551, 552, 705, 706, 719, 730, 731, 743, 769, 818, 826, 829, 863, 875, 920, 1007, 1008, 1009, 1010, 1086, 1093, 1232], "lower": [142, 179, 200, 235, 299, 307, 371, 466, 526, 551, 575, 579, 596, 597, 692, 710, 711, 713, 714, 742, 756, 757, 769, 795, 809, 828, 869, 875, 938, 950, 1031, 1092, 1112, 1115, 1127, 1220, 1232, 1248, 1250], "simpli": [142, 705, 719], "idx": [142, 200, 213, 284, 307, 343, 356, 520, 809, 855, 875, 920, 1086, 1163], "uint16": [142, 379, 380, 672, 769, 881, 946, 947, 1203, 1213, 1216, 1232], "u16": [142, 1259], "eu": [143, 144], "central": [143, 144, 478, 616, 769, 1046, 1147, 1232], "iceberg": [144, 781], "pyiceberg": [144, 150], "secret": [144, 147], "adlf": 144, "my": [144, 148, 664, 1194], "oauth": 144, "token": 144, "ya29": 144, "dr": 144, "afm": 144, "py": 144, "impl": 144, "fsspecfileio": 144, "give": [145, 146, 215, 224, 273, 307, 399, 450, 478, 580, 679, 683, 769, 781, 822, 846, 875, 965, 1046, 1221, 1232, 1255], "read_parquet": 147, "east": 147, "allow_pyarrow_filt": 148, "comparison": 148, "dset": 148, "folder": 148, "04": [148, 172, 179, 200, 277, 307, 393, 394, 408, 409, 414, 415, 417, 420, 421, 422, 425, 427, 431, 589, 591, 593, 595, 597, 600, 602, 604, 656, 697, 709, 712, 713, 715, 769, 787, 795, 809, 875, 881, 960, 972, 976, 978, 979, 980, 984, 987, 990, 991, 992, 995, 997, 1001, 1186], "seed": [149, 201, 244, 307, 459, 508, 577, 607, 612, 769, 1025, 1074, 1113, 1134, 1143, 1232], "shuffl": [149, 244, 270, 293, 307, 508, 607, 769, 863, 1074, 1134, 1232], "platform": 150, "maco": 150, "arm64": 150, "arm": 150, "64bit": [150, 579, 769, 1115, 1232], "main": [150, 791, 875], "feb": 150, "2024": [150, 389, 395, 396, 400, 403, 405, 406, 410, 416, 418, 697, 709, 712, 715, 881, 955, 1253], "21": [150, 179, 225, 257, 307, 392, 589, 591, 593, 595, 597, 600, 602, 604, 712, 721, 769, 795, 823, 875, 881, 958, 1247], "clang": 150, "1500": [150, 161], "adbc_driver_manag": 150, "cloudpickl": 150, "17": [150, 158, 186, 215, 286, 307, 437, 587, 605, 721, 756, 769, 856, 940, 942, 985, 1008, 1122, 1232, 1259], "hvplot": [150, 307, 310, 1232, 1236], "matplotlib": [150, 827, 838, 875], "nest_asyncio": 150, "pydant": 150, "torch": [150, 270, 307, 1216, 1232], "check_row_ord": [151, 152], "check_column_ord": [151, 152], "check_dtyp": [151, 152, 153, 154, 1005, 1232], "check_exact": [151, 152, 153, 154], "rtol": [151, 152, 153, 154], "atol": [151, 152, 153, 154], "categorical_as_str": [151, 152, 153, 154], "assertionerror": [151, 152, 153, 154], "compar": [151, 152, 153, 154, 185, 307, 434, 435, 455, 457, 466, 480, 527, 561, 562, 769, 932, 1005, 1232], "toler": [151, 152, 153, 154, 215, 307, 814, 875], "inexact": [151, 152, 153, 154], "share": [151, 152, 153, 154, 186, 307, 1006, 1232], "assert_series_equ": [151, 154, 1005, 1232, 1259], "assert_frame_not_equ": [151, 154], "pytest": [151, 153], "worthwhil": [151, 153], "shorten": [151, 153], "traceback": [151, 152, 153, 154, 266, 307, 1213, 1232], "tb": [151, 153, 186, 307, 1006, 1232], "short": [151, 153], "tend": [151, 153], "unhelpfulli": [151, 153], "recent": [151, 152, 153, 154, 266, 307, 568, 769, 1107, 1213, 1232, 1242, 1256], "assert_frame_equ": [152, 153, 185, 307, 1259], "assert_series_not_equ": [152, 153], "check_nam": [153, 154, 1005, 1232], "check_ord": [153, 154], "searchstrategi": [155, 157, 158, 159, 160, 162], "allow_nul": [155, 158, 162, 1259], "null_prob": [155, 158, 162], "percentag": [155, 158, 162, 568, 769, 1107, 1232], "chanc": [155, 158, 162, 1259], "1755e": [155, 158], "575050513": [155, 158], "inf": [155, 158, 162, 329, 382, 461, 468, 471, 574, 679, 769, 893, 942, 949, 1027, 1034, 1037, 1092, 1107, 1111, 1220, 1232, 1254], "min_col": [156, 158], "max_col": [156, 158], "comprehens": 156, "standalon": [156, 881], "itself": [156, 307, 310, 311, 529, 588, 590, 592, 594, 596, 598, 599, 601, 603, 745, 746, 769, 816, 875, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1232, 1236, 1240, 1256], "mincol": 156, "assign": [156, 200, 292, 307, 356, 520, 567, 577, 648, 649, 769, 809, 862, 875, 920, 1086, 1113, 1178, 1179, 1232], "especi": [156, 585, 769, 802, 875, 1121, 1232], "hypothesi": [156, 158, 161, 162, 1259], "test_unique_xyz": 156, "assert_someth": 156, "inner_dtyp": [157, 160], "select_from": [157, 160, 162], "min_siz": [157, 158, 160, 162, 1259], "max_siz": [157, 158, 160, 162, 1259], "randomli": 157, "innermost": [157, 160], "2x": 157, "lst": 157, "11330": 157, "24030": 157, "116": 157, "include_col": 158, "allow_chunk": [158, 162], "allowed_dtyp": [158, 159, 162, 1259], "excluded_dtyp": [158, 159, 162], "allow_time_zon": [158, 159, 162], "describ": [158, 198, 307, 875, 1232], "desir": [158, 356, 431, 520, 920, 1001, 1086], "onto": 158, "exclud": [158, 162, 200, 307, 366, 377, 380, 389, 466, 535, 678, 697, 769, 809, 875, 881, 955, 1031, 1232], "pct": 158, "preced": [158, 881], "allow_infin": [158, 162], "disallow": 158, "usag": [158, 162, 252, 307, 881, 1142, 1232], "deploi": [158, 162], "characterist": [158, 162], "concret": [158, 162], "test_df_height": 158, "interact": [158, 162, 179, 307, 795, 875], "col0": [158, 1259], "col1": [158, 233, 307, 875, 1259], "col2": [158, 233, 307, 875, 1259], "1844": 158, "06": [158, 172, 277, 307, 389, 393, 407, 413, 414, 415, 416, 428, 429, 709, 712, 787, 875, 881, 955, 984, 985, 998], "848808": 158, "1436e16": 158, "9914e218": 158, "2068": 158, "412277": 158, "7415e16": 158, "2095": 158, "647961": 158, "15836": 158, "nesting_level": 159, "pick": [159, 759], "prioriti": 159, "complex": [159, 365, 366, 381, 677, 678, 769, 928, 948, 1217, 1232], "fulli": [160, 232, 244, 266, 307], "profil": [161, 163, 790, 875], "balanc": [161, 163, 1259], "set_environ": 161, "polars_hypothesis_profil": [161, 163], "max_data_s": 162, "test_series_len": 162, "zz": [162, 179, 255, 307, 795, 875, 1246, 1252, 1258], "polars_max_thread": 164, "behind": 164, "lock": 164, "reason": [164, 179, 307, 520, 528, 769, 795, 875], "temporarili": [164, 167, 200, 240, 307, 586, 769, 809, 831, 875], "pyspark": 164, "udf": [164, 218, 232, 293, 307, 384, 529, 571, 731, 769, 796, 826, 863, 875, 1093, 1232], "recommend": [164, 179, 212, 232, 307, 786, 795, 875, 881], "thread_pool_s": 165, "easi": 167, "restor": 167, "restore_default": 167, "set_tbl_row": 167, "scope": [167, 780, 881, 1242, 1245, 1256], "lifetim": [167, 780, 1245], "whatev": 167, "were": [167, 581, 765, 769, 1117, 1232], "enter": 167, "advantag": [167, 232, 307], "set_": 167, "set_verbos": 167, "do_various_th": 167, "cleaner": 167, "init": [167, 1240], "breviti": 167, "vein": 167, "durat": [167, 215, 277, 307, 390, 398, 421, 422, 423, 424, 425, 426, 427, 431, 437, 676, 710, 711, 713, 714, 756, 757, 769, 814, 875, 881, 956, 964, 991, 992, 993, 994, 995, 996, 997, 1001, 1008, 1213, 1215, 1232], "set_ascii_t": 167, "write_ascii_frame_to_stdout": 167, "sy": 167, "stdout": [167, 198, 307, 542], "nan_as_nul": 169, "polarsdatafram": 169, "notimplementederror": 169, "num_row": 169, "get_column": [169, 268, 307], "dtypekind": 169, "approxim": [170, 307, 323, 437, 691, 769, 784, 875, 1008, 1232, 1251, 1259], "hyperloglog": [170, 307, 323, 691, 769, 784, 875], "algorithm": [170, 307, 323, 624, 644, 691, 769, 784, 875, 1154, 1174], "cardin": [170, 307, 323, 691, 769, 784, 875], "k": [171, 243, 271, 272, 307, 365, 366, 376, 478, 677, 678, 769, 785, 845, 875, 928, 943, 1046, 1217, 1232], "intoexpr": [171, 199, 200, 240, 246, 247, 251, 254, 271, 281, 282, 286, 307, 322, 340, 360, 363, 364, 366, 389, 437, 443, 461, 465, 466, 489, 509, 510, 511, 512, 567, 581, 589, 591, 593, 595, 597, 600, 602, 604, 608, 610, 619, 624, 644, 647, 648, 649, 654, 655, 670, 678, 688, 690, 695, 698, 699, 700, 701, 703, 705, 708, 712, 719, 733, 735, 738, 744, 747, 751, 753, 769, 785, 808, 809, 831, 833, 834, 837, 840, 845, 851, 852, 856, 875, 879, 904, 923, 926, 927, 955, 1008, 1014, 1030, 1031, 1055, 1117, 1136, 1140, 1177, 1178, 1179, 1184, 1185, 1232], "revers": [171, 186, 271, 307, 366, 376, 377, 378, 379, 380, 551, 553, 555, 678, 704, 769, 785, 845, 875, 943, 944, 945, 946, 947, 1232, 1248, 1250], "smallest": [171, 271, 307, 365, 366, 678, 769, 785, 845, 875, 928, 1232, 1247, 1249], "wish": [171, 271, 307, 365, 366, 677, 678, 769, 785, 845, 875, 928, 1217, 1232], "bottom": [171, 307, 366, 769, 785, 875], "largest": [171, 271, 307, 366, 677, 678, 769, 785, 845, 875, 1217, 1232], "top_k": [171, 307, 365, 366, 678, 769, 785, 875, 928, 1232], "columnnameorselector": [172, 181, 183, 224, 231, 233, 243, 263, 273, 274, 275, 307, 787, 797, 798, 822, 846, 847, 875], "due": [172, 200, 215, 240, 243, 277, 307, 318, 398, 411, 415, 428, 550, 551, 553, 555, 557, 558, 586, 589, 591, 593, 595, 597, 600, 602, 604, 697, 710, 711, 713, 714, 756, 757, 769, 787, 809, 814, 831, 875, 964, 981, 985, 998], "overflow": [172, 307, 367, 379, 380, 661, 672, 769, 787, 875, 929, 946, 947, 1191, 1203, 1232], "u8": [172, 263, 264, 275, 307, 581, 686, 769, 787, 875, 881, 1117, 1208, 1232, 1259], "to_dict": [172, 307, 787, 875, 881], "as_seri": [172, 261, 307, 787, 875, 881], "greater": [173, 215, 307, 455, 457, 466, 616, 640, 641, 649, 666, 769, 814, 875, 1031, 1147, 1170, 1171, 1179, 1196, 1232], "cheap": [173, 174, 247, 282, 307, 788, 789, 834, 852, 875, 937, 939, 1232], "deepcopi": [173, 307, 788, 875, 937, 1232], "13": [173, 174, 179, 189, 190, 197, 205, 216, 228, 240, 281, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 318, 389, 395, 396, 400, 403, 405, 406, 410, 416, 418, 538, 540, 586, 660, 699, 705, 708, 712, 719, 753, 755, 758, 769, 788, 789, 795, 803, 804, 816, 831, 851, 859, 861, 864, 865, 866, 867, 868, 869, 870, 875, 955, 985, 998, 999, 1093, 1190, 1232], "facilit": [175, 307], "code": [175, 307, 360, 361, 362, 363, 364, 384, 529, 609, 769, 796, 802, 816, 875, 1138, 1232], "appl": [176, 204, 214, 237, 238, 261, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 307, 366, 583, 628, 650, 678, 769, 813, 829, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 875, 1158, 1180, 1246, 1252], "banana": [176, 261, 289, 291, 294, 295, 296, 297, 298, 299, 300, 307, 366, 583, 628, 650, 678, 769, 859, 861, 864, 865, 866, 867, 868, 869, 870, 1252], "orang": [176, 288, 289, 291, 292, 294, 295, 297, 299, 300, 307, 366, 678, 769, 858, 859, 861, 862, 864, 865, 867, 869, 870, 1252], "pairwis": [177, 307], "pearson": [177, 307, 478, 616, 701, 769, 1046, 1147, 1232], "correl": [177, 307, 701, 745], "coeffici": [177, 307, 616, 769, 1147, 1232], "corrcoef": [177, 307], "percentil": [179, 307, 795, 875, 950, 1232], "interpol": [179, 235, 299, 307, 445, 465, 532, 575, 596, 597, 742, 769, 795, 828, 869, 875, 950, 1030, 1112, 1127, 1232], "rollinginterpolationmethod": [179, 235, 299, 307, 575, 596, 597, 742, 769, 795, 828, 869, 875, 950, 1112, 1127, 1232], "summari": [179, 307, 795, 875, 950, 1232, 1246], "midpoint": [179, 235, 299, 307, 575, 596, 597, 742, 769, 795, 828, 869, 875, 950, 1112, 1127, 1232], "linear": [179, 206, 235, 299, 307, 464, 465, 487, 532, 575, 596, 597, 699, 700, 742, 769, 795, 812, 828, 869, 875, 950, 1029, 1030, 1053, 1112, 1127, 1232], "deem": [179, 307, 795, 875], "programmat": [179, 307, 795, 875], "versu": [179, 307, 795, 875], "explor": [179, 307, 795, 875], "glimps": [179, 202, 307], "median": [179, 233, 307, 445, 592, 593, 769, 795, 853, 875, 950, 1125, 1232, 1250], "266667": [179, 307, 795, 875], "666667": [179, 206, 278, 295, 307, 436, 734, 769, 795, 812, 849, 865, 875, 1007, 1232], "std": [179, 307, 599, 600, 769, 795, 875, 950, 1129, 1232], "101514": [179, 307, 795, 875], "071068": [179, 307, 795, 875], "36": [179, 307, 795, 875], "41": [179, 307, 602, 769, 795, 875, 1247, 1259], "34": [179, 307, 656, 795, 875, 1186], "43": [179, 240, 307, 380, 586, 602, 769, 795, 831, 875], "70": [179, 307, 686, 769, 795, 875, 1046, 1232], "88": [179, 307, 795, 875], "90": [179, 307, 660, 795, 875, 1190, 1254], "49": [179, 307, 795, 875, 881], "33": [179, 225, 307, 605, 769, 795, 823, 875, 1127, 1232], "subset": [183, 229, 273, 307, 798, 846, 875], "preserv": [183, 191, 199, 214, 218, 266, 267, 307, 387, 388, 389, 408, 409, 446, 491, 613, 629, 769, 798, 805, 813, 875, 953, 954, 955, 1017, 1057, 1144, 1159, 1214, 1232], "all_horizont": [183, 307, 687, 798, 875], "is_nul": [183, 307, 769, 798, 875, 1232], "null_equ": [185, 307, 1005, 1232], "sizeunit": [186, 307, 1006, 1232], "heap": [186, 307, 769, 879, 1006, 1232], "bitmap": [186, 307, 1006, 1232], "therefor": [186, 307, 529, 759, 769, 1006, 1232], "structarrai": [186, 307, 1006, 1232], "constant": [186, 240, 307, 390, 437, 443, 769, 831, 875, 956, 1006, 1008, 1014, 1232], "unchang": [186, 307, 581, 676, 769, 818, 863, 875, 1006, 1117, 1215, 1232], "capac": [186, 252, 307, 1006, 1142, 1232], "ffi": [186, 307, 1006, 1232], "kb": [186, 307, 1006, 1232], "mb": [186, 307, 1006, 1232], "gb": [186, 307, 1006, 1232], "1_000_000": [186, 307, 1006, 1232], "17888890": [186, 307], "0601749420166": [186, 307], "more_column": [187, 274, 307, 440, 717, 769, 801, 847, 875, 881], "long": [187, 224, 275, 307, 801, 822, 875], "letter": [187, 290, 301, 307, 440, 624, 631, 644, 717, 769, 801, 860, 871, 875, 881, 1154, 1161, 1174, 1252], "onlin": [188, 307, 1013, 1232], "rerun": [188, 307, 1013, 1232], "finish": [188, 307, 1013, 1232], "conveni": [188, 270, 307, 887, 1013, 1232], "Not": [189, 307, 444, 473, 474, 769, 803, 875, 1015, 1232], "fillnullstrategi": [190, 307, 445, 769, 804, 875, 1016, 1232], "matches_supertyp": [190, 307, 804, 875], "forward": [190, 215, 251, 307, 351, 389, 408, 445, 451, 513, 610, 769, 804, 814, 837, 875, 915, 955, 978, 1016, 1079, 1140, 1232], "consecut": [190, 307, 359, 445, 451, 622, 635, 769, 804, 875, 1016, 1152, 1165, 1232], "fill_nan": [190, 307, 445, 769, 804, 875, 1016, 1232], "intoexprcolumn": [191, 307, 339, 343, 344, 351, 365, 366, 371, 415, 443, 446, 488, 496, 499, 508, 513, 568, 572, 607, 610, 630, 634, 637, 646, 651, 652, 653, 657, 661, 666, 677, 678, 692, 697, 710, 711, 713, 714, 725, 726, 756, 757, 759, 769, 805, 837, 875, 903, 907, 908, 915, 938, 985, 1014, 1054, 1062, 1065, 1074, 1079, 1107, 1160, 1164, 1167, 1176, 1181, 1182, 1183, 1187, 1196, 1232], "constraint": [191, 307, 446, 550, 551, 553, 555, 557, 558, 759, 769, 805, 875, 881], "discard": [191, 307, 446, 769, 805, 875, 1017, 1232], "behav": [191, 307, 446, 529, 652, 653, 769, 805, 875], "eq": [191, 307, 435, 446, 769, 805, 875, 1232], "implicitli": [191, 307, 446, 759, 769, 805, 875], "reduct": [193, 307], "supercast": [193, 307], "parent": [193, 307], "arithmet": [193, 307], "zip_with": [193, 307, 1232], "foo11": [193, 307], "bar22": [193, 307], "nth": [194, 307, 454, 649, 769, 807, 875, 1021, 1179, 1232], "th": [194, 307, 454, 496, 509, 616, 634, 657, 769, 807, 875, 1021, 1062, 1075, 1147, 1164, 1187, 1232], "retriev": [195, 265, 307, 337, 338, 485, 486, 667, 740, 901, 902, 1051, 1052, 1197, 1211, 1232, 1246], "max_items_per_column": [198, 307], "max_colname_length": [198, 307], "return_as_str": [198, 307, 542], "preview": [198, 307], "few": [198, 307], "exce": [198, 307], "ellipsi": [198, 307], "head": [198, 217, 259, 307, 322, 482, 567, 769, 817, 875, 1048, 1204, 1232], "tail": [198, 202, 307, 322, 616, 769, 875, 1026, 1147, 1232], "usd": [198, 307, 1259], "eur": [198, 307, 1259], "named_bi": [199, 307, 808, 875], "groupbi": [199, 307, 529, 731, 769], "consist": [199, 231, 266, 307, 656, 710, 711, 808, 875, 881, 887, 1013, 1186, 1213, 1232], "agg": [199, 200, 233, 240, 307, 317, 366, 446, 448, 453, 456, 528, 529, 541, 567, 618, 619, 678, 685, 731, 769, 790, 791, 800, 802, 808, 809, 827, 831, 838, 875, 881], "Or": [199, 200, 215, 240, 254, 277, 286, 307, 437, 567, 586, 619, 710, 711, 713, 714, 756, 757, 759, 769, 808, 809, 814, 831, 840, 856, 875, 1008, 1232], "index_column": [200, 240, 307, 586, 769, 809, 831, 875], "timedelta": [200, 215, 240, 277, 307, 411, 415, 428, 437, 586, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 881, 969, 975, 981, 985, 998, 1008, 1102, 1103, 1151, 1222, 1232], "include_boundari": [200, 307, 809, 875], "closedinterv": [200, 240, 307, 466, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 831, 875, 1031, 1232], "label": [200, 265, 270, 307, 311, 382, 574, 587, 588, 590, 592, 594, 596, 599, 601, 603, 769, 809, 827, 875, 949, 1111, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1232], "group_bi": [200, 229, 233, 240, 277, 306, 307, 317, 366, 446, 448, 453, 456, 528, 529, 567, 618, 619, 678, 685, 731, 769, 790, 791, 800, 802, 809, 827, 831, 838, 874, 875, 881], "start_bi": [200, 307, 809, 875], "startbi": [200, 307, 809, 875], "dynamicgroupbi": [200, 307], "member": [200, 307, 809, 875, 1036, 1232], "earliest": [200, 307, 414, 656, 659, 712, 809, 875, 984, 1186, 1189], "datapoint": [200, 307, 809, 875], "descript": [200, 307, 809, 875, 1246, 1247, 1248, 1249, 1251, 1253, 1257, 1258], "ascend": [200, 240, 307, 586, 769, 809, 831, 875], "dynam": [200, 307, 356, 520, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 769, 809, 875, 879, 920, 1086], "matter": [200, 212, 240, 242, 243, 262, 307, 586, 652, 653, 769, 809, 831, 875], "interv": [200, 240, 277, 307, 382, 415, 428, 461, 466, 574, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 831, 875, 949, 963, 965, 966, 972, 974, 976, 977, 980, 982, 983, 985, 989, 998, 999, 1027, 1031, 1111, 1232], "_lower_boundari": [200, 307, 809, 875], "_upper_boundari": [200, 307, 809, 875], "impact": [200, 307, 809, 875, 1240, 1256], "harder": [200, 307, 809, 875], "inclus": [200, 240, 307, 466, 586, 589, 591, 593, 595, 597, 600, 602, 604, 647, 648, 692, 710, 711, 713, 714, 725, 726, 756, 757, 769, 809, 831, 875, 1031, 1177, 1178, 1232], "boundari": [200, 307, 371, 461, 769, 809, 875, 938, 1027, 1232], "mondai": [200, 307, 389, 428, 430, 697, 809, 875, 955, 998, 1000], "tuesdai": [200, 307, 809, 875], "wednesdai": [200, 307, 417, 420, 809, 875, 987, 990], "thursdai": [200, 307, 389, 697, 809, 875, 955], "fridai": [200, 307, 389, 417, 420, 697, 809, 875, 955, 987, 990], "saturdai": [200, 307, 809, 875], "sundai": [200, 307, 389, 417, 420, 430, 697, 809, 875, 955, 987, 990, 1000], "weekli": [200, 307, 428, 809, 875, 998], "week": [200, 215, 240, 277, 307, 389, 411, 415, 428, 430, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 697, 710, 711, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 881, 955, 981, 985, 998, 1000, 1008, 1232, 1253], "shift": [200, 307, 359, 385, 451, 490, 568, 699, 769, 809, 875, 951, 1056, 1107, 1232], "front": [200, 307, 809, 875], "roll": [200, 307, 389, 408, 409, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 699, 745, 746, 769, 809, 875, 955, 978, 979, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1232], "re": [200, 211, 307, 408, 409, 417, 420, 809, 875, 978, 979, 987, 990, 1256], "1d": [200, 215, 240, 277, 307, 391, 411, 415, 422, 425, 428, 431, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 715, 729, 756, 757, 769, 809, 814, 831, 875, 881, 957, 965, 971, 981, 985, 989, 992, 995, 998, 1008, 1232], "set_index": [200, 307, 809, 875], "resampl": [200, 307, 809, 875], "unlik": [200, 307, 809, 875], "evenli": [200, 307, 809, 875], "upsampl": [200, 307, 809, 875], "1n": [200, 215, 240, 277, 307, 411, 415, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998, 1008, 1232], "1u": [200, 215, 240, 277, 307, 411, 415, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998, 1008, 1232], "1m": [200, 215, 240, 277, 307, 411, 415, 427, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 993, 994, 996, 997, 998, 1008, 1232], "millisecond": [200, 215, 240, 277, 307, 400, 406, 411, 415, 424, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 881, 981, 985, 994, 998, 1008, 1232, 1253], "minut": [200, 215, 240, 277, 307, 400, 403, 405, 410, 411, 415, 416, 425, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 712, 713, 714, 715, 755, 756, 757, 769, 809, 814, 831, 875, 881, 981, 985, 995, 998, 1008, 1232, 1253], "1h": [200, 215, 240, 277, 307, 398, 411, 415, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 713, 714, 756, 757, 769, 809, 814, 831, 875, 964, 966, 981, 985, 998, 1008, 1232], "1w": [200, 215, 240, 277, 307, 411, 415, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998, 1008, 1232], "1mo": [200, 215, 240, 277, 307, 394, 408, 409, 411, 414, 415, 421, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 960, 977, 978, 979, 981, 982, 983, 984, 985, 991, 998, 999, 1008, 1232], "month": [200, 215, 240, 277, 307, 397, 408, 409, 411, 415, 417, 420, 428, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 709, 710, 711, 712, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 963, 978, 979, 981, 985, 987, 990, 998, 1008, 1232, 1253], "1q": [200, 215, 240, 277, 307, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998], "quarter": [200, 215, 240, 277, 307, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998, 1253], "1y": [200, 215, 240, 277, 307, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 756, 757, 769, 809, 814, 831, 875, 981, 985, 998], "1i": [200, 240, 277, 307, 437, 586, 769, 809, 831, 875, 1008, 1232], "3d12h4m25": [200, 215, 240, 277, 307, 415, 428, 437, 586, 713, 714, 756, 757, 769, 809, 814, 831, 875, 985, 998, 1008, 1232], "correspond": [200, 215, 240, 266, 277, 307, 366, 402, 411, 415, 428, 529, 577, 586, 589, 591, 593, 595, 597, 600, 602, 604, 678, 710, 711, 713, 714, 756, 757, 769, 790, 809, 814, 831, 875, 968, 981, 985, 998, 1113, 1232], "daylight": [200, 215, 240, 277, 307, 390, 398, 411, 415, 428, 586, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 713, 714, 715, 756, 757, 769, 809, 814, 831, 875, 964, 981, 985, 998], "10i": [200, 307, 809, 875], "datetime_rang": [200, 307, 391, 394, 408, 409, 411, 414, 415, 421, 422, 423, 424, 425, 426, 427, 428, 431, 589, 591, 593, 595, 597, 600, 602, 604, 710, 711, 769, 809, 875, 956, 957, 960, 964, 965, 966, 971, 972, 974, 976, 978, 979, 980, 981, 984, 985, 989, 991, 992, 993, 994, 995, 996, 997, 998], "30m": [200, 307, 415, 428, 809, 875, 985, 998], "eager": [200, 215, 233, 275, 307, 391, 394, 397, 399, 408, 409, 411, 412, 414, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 589, 591, 593, 595, 597, 600, 602, 604, 692, 696, 710, 711, 713, 714, 721, 725, 726, 741, 744, 748, 751, 756, 757, 760, 768, 769, 809, 818, 875, 956, 957, 960, 963, 964, 965, 966, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1240, 1241, 1242, 1243, 1244, 1245, 1256], "lower_bound": [200, 307, 371, 466, 769, 809, 875, 938, 1031, 1220, 1232], "upper_bound": [200, 307, 371, 466, 520, 769, 809, 875, 938, 1031, 1092, 1232], "bys": [200, 307, 809, 875], "int_rang": [200, 275, 284, 293, 307, 692, 728, 809, 818, 855, 863, 875], "2i": [200, 307, 809, 875], "3i": [200, 240, 307, 809, 875], "a_agg_list": [200, 307, 809, 875], "seed_1": [201, 307, 459, 769, 1025, 1232], "seed_2": [201, 307, 459, 769, 1025, 1232], "seed_3": [201, 307, 459, 769, 1025, 1232], "hash": [201, 307, 769, 1232], "Its": [201, 307, 459, 769, 1025, 1232], "stabil": [201, 307, 459, 769, 1025, 1232], "u64": [201, 284, 307, 459, 579, 769, 827, 855, 875, 881, 1025, 1115, 1232], "10783150408545073287": [201, 307], "1438741209321515184": [201, 307], "10047419486152048166": [201, 307], "2047317070637311557": [201, 307], "ab": [202, 217, 259, 281, 307, 667, 669, 769, 851, 875, 881, 1026, 1048, 1204, 1232, 1250, 1252], "in_plac": [204, 252, 279, 307, 1114, 1142, 1149, 1232], "grown": [204, 307], "baz": [205, 206, 233, 274, 307, 632, 647, 649, 718, 727, 740, 765, 812, 847, 875, 881, 1162, 1179, 1244, 1249, 1252], "intermedi": [206, 307, 812, 875, 1259], "333333": [206, 307, 550, 812, 875, 1107, 1131, 1232, 1247], "mask": [207, 209, 307, 361, 467, 469, 472, 477, 569, 570, 623, 626, 633, 769, 924, 1017, 1024, 1031, 1032, 1035, 1038, 1044, 1108, 1109, 1137, 1153, 1156, 1163, 1223, 1232], "visual": [207, 209, 307, 838, 875], "scalar": [210, 218, 241, 307, 528, 608, 634, 639, 646, 657, 729, 731, 769, 879, 1045, 1136, 1164, 1169, 1176, 1187, 1232], "buffer_s": [212, 307], "fit": [212, 252, 275, 307, 611, 744, 769, 1141, 1142, 1232], "signific": [212, 218, 307, 529, 606, 769, 1093, 1133, 1232], "4x": [212, 307], "materialis": [212, 213, 241, 242, 307], "rows_by_kei": [212, 242, 307], "iter_row": [213, 241, 242, 243, 307], "17_500": [213, 307], "klmnoopqrstuvwxyz": [213, 307], "__name__": [213, 307], "7500": [213, 307], "15_000": [213, 307], "record_batch": [213, 307], "to_arrow": [213, 307, 1213, 1232], "to_batch": [213, 307], "date32": [213, 307], "large_str": [213, 260, 267, 307], "15000": [213, 307], "2500": [213, 270, 307], "left_on": [214, 215, 276, 307, 813, 814, 848, 875], "right_on": [214, 215, 276, 307, 813, 814, 848, 875], "suffix": [214, 215, 246, 281, 286, 307, 318, 363, 366, 473, 474, 475, 476, 534, 551, 553, 556, 557, 558, 567, 583, 628, 652, 655, 678, 769, 813, 814, 833, 851, 853, 856, 875, 881, 926, 1158, 1185], "_right": [214, 215, 307, 813, 814, 875], "joinvalid": [214, 307, 813, 875], "join_nul": [214, 307, 813, 875], "coalesc": [214, 276, 307, 464, 656, 769, 813, 848, 875, 1186, 1246, 1250], "fashion": [214, 307, 800, 802, 827, 838, 875], "semi": [214, 307, 813, 875, 1246], "anti": [214, 307, 813, 863, 875, 1135, 1137, 1232, 1246], "cross": [214, 307, 813, 875, 1246], "cartesian": [214, 307, 813, 875], "many_to_mani": [214, 307, 813, 875], "one_to_on": [214, 307, 813, 875], "one_to_mani": [214, 307, 813, 875], "many_to_on": [214, 307, 813, 875], "join_asof": [214, 307, 813, 875], "other_df": [214, 307], "ham_right": [214, 307, 813, 875], "by_left": [215, 307, 814, 875], "by_right": [215, 307, 814, 875], "asofjoinstrategi": [215, 307, 814, 875], "allow_parallel": [215, 307, 813, 814, 875], "force_parallel": [215, 307, 813, 814, 875], "asof": [215, 307, 814, 875], "rather": [215, 307, 452, 528, 542, 574, 585, 666, 769, 814, 875, 1111, 1121, 1196, 1232], "asof_join": [215, 307], "search": [215, 307, 520, 624, 644, 814, 840, 875, 1154, 1174], "distanc": [215, 307, 461, 769, 814, 875, 1027, 1232], "plan": [215, 216, 307, 384, 769, 786, 790, 796, 800, 813, 814, 835, 838, 875, 1258], "gdp": [215, 307, 814, 875], "date_rang": [215, 277, 307, 397, 399, 412, 419, 430, 713, 714, 963, 977, 982, 983, 999, 1000], "2016": [215, 307, 814, 875], "4164": [215, 307, 814, 875], "4411": [215, 307, 814, 875], "4566": [215, 307, 814, 875], "4696": [215, 307, 814, 875], "4827": [215, 307], "2017": [215, 307, 814, 875], "2018": [215, 307, 414, 814, 875, 984], "2019": [215, 307, 814, 875], "popul": [215, 307, 814, 875], "82": [215, 307, 814, 875], "66": [215, 276, 307, 602, 686, 769, 814, 848, 875, 1046, 1127, 1232], "83": [215, 307, 814, 875], "quit": [215, 307], "earlier": [215, 307], "later": [215, 307, 541, 835, 875], "countri": [215, 307, 390, 956], "gdp_date": [215, 307], "gdp2": [215, 307], "germani": [215, 307], "netherland": [215, 307], "784": [215, 307], "833": [215, 307], "914": [215, 307], "910": [215, 307, 631, 1161], "909": [215, 307], "pop2": [215, 307], "request": [216, 307], "describe_plan": [216, 307], "unoptim": [216, 307], "describe_optimized_plan": [216, 307], "show_graph": [216, 307, 875], "un": [216, 307], "graphviz": [216, 307, 838, 875], "inference_s": [218, 307], "256": [218, 307, 1107, 1232, 1251], "much": [218, 275, 293, 307, 381, 495, 529, 638, 639, 731, 769, 863, 948, 1061, 1093, 1168, 1169, 1232], "intens": [218, 293, 307, 567, 769, 1093, 1232], "materi": [218, 243, 293, 307, 790, 827, 863, 875, 881, 1093, 1232], "parallelis": [218, 293, 307, 1093, 1232], "achiev": [218, 293, 307, 529, 639, 769, 1093, 1169, 1232], "tri": [218, 307], "black": [218, 307, 360, 361, 362, 363, 364], "arbitrarili": [218, 307], "rearrang": [218, 307], "transform": [218, 255, 307, 528, 662, 664, 665, 748, 769, 841, 875], "lru_cach": [218, 307, 529, 769, 1093, 1232], "column_1": [218, 272, 307, 1254], "better": [218, 265, 266, 293, 307, 529, 639, 769, 786, 863, 875, 1135, 1137, 1169, 1232], "spam": [221, 307, 631, 1161], "ignore_nul": [222, 258, 307, 319, 321, 344, 436, 438, 439, 499, 622, 635, 687, 689, 700, 769, 885, 886, 908, 1007, 1009, 1010, 1065, 1152, 1165, 1232], "id_var": [224, 307, 822, 875], "value_var": [224, 307, 822, 875], "variable_nam": [224, 307, 822, 875], "value_nam": [224, 307, 822, 875], "unpivot": [224, 307, 822, 875], "massag": [224, 307, 822, 875], "measur": [224, 307, 311, 822, 875], "axi": [224, 307, 693, 694, 822, 875], "df0": [225, 307, 823, 875, 1245], "steve": [225, 307, 823, 875], "elis": [225, 307, 823, 875], "ag": [225, 307, 823, 875, 1257], "anna": [225, 307, 823, 875], "megan": [225, 307, 823, 875], "thoma": [225, 307, 823, 875], "what": [229, 307, 310, 389, 528, 624, 644, 769, 955, 1154, 1174, 1232, 1236], "pack": [229, 307], "expr_unique_subset": [229, 307], "df_nuniqu": [229, 307], "df_agg_nuniqu": [229, 307], "more_bi": [231, 254, 307, 619, 769, 840, 875], "include_kei": [231, 243, 307], "offer": [232, 307, 571, 769, 826, 875, 1253], "cast_str_to_int": [232, 307, 826, 875], "col_nam": [232, 307, 529, 759, 769, 826, 875], "tdf": [232, 307], "aggregate_funct": [233, 307, 881], "pivotagg": [233, 307], "sort_column": [233, 307], "section": [233, 307, 623, 630, 631, 633, 642, 643, 710, 711, 713, 714, 756, 757, 1153, 1160, 1161, 1163, 1172, 1173], "predefin": [233, 307], "predict": [233, 236, 277, 307], "transpos": [233, 307], "discoveri": [233, 307], "col3": [233, 307, 1259], "tanh": [233, 307, 769, 1232], "998347": [233, 307], "964028": [233, 307], "999954": [233, 307], "unique_column_valu": [233, 307], "ix": [233, 307], "column_nam": [237, 272, 307, 829, 875], "coo": [237, 307, 829, 875], "car": [237, 261, 307, 583, 769, 829, 875], "cam": [237, 307, 829, 875], "rollinggroupbi": [240, 307], "group_by_dynam": [240, 307, 831, 875], "t_0": [240, 307, 586, 589, 591, 593, 595, 597, 600, 602, 604, 769, 831, 875], "t_1": [240, 307, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 769, 831, 875, 1008, 1232], "t_n": [240, 307, 437, 586, 589, 591, 593, 595, 597, 600, 602, 604, 769, 831, 875, 1008, 1232], "strptime": [240, 307, 414, 586, 769, 831, 875, 984], "set_sort": [240, 277, 307, 586, 769, 814, 831, 875, 1232], "2d": [240, 265, 266, 307, 411, 586, 729, 769, 831, 875, 956, 963], "sum_a": [240, 307, 586, 769, 831, 875], "min_a": [240, 307, 586, 769, 831, 875], "max_a": [240, 307, 586, 769, 831, 875], "by_pred": [241, 307], "accord": [241, 307, 574, 710, 711, 713, 714, 756, 757, 769, 968, 1111, 1232], "mutual": [241, 307], "exclus": [241, 307, 686, 692, 725, 726, 769, 881], "clariti": [241, 307], "toomanyrowsreturnederror": [241, 307], "norowsreturnederror": [241, 307], "inherit": [241, 307, 384, 769, 796, 875], "rowserror": [241, 307], "littl": [242, 307], "peak": [242, 307, 569, 570, 769, 1108, 1109, 1232], "flat": [243, 307, 493, 582, 769, 1059, 1118, 1232], "high": [243, 307, 311, 574, 769, 781, 1111, 1232], "cost": [243, 307], "reoconstruct": [243, 307], "q": [243, 307, 751, 1243], "defaultdict": [243, 307], "assum": [243, 307, 818, 863, 875, 1253], "with_replac": [244, 307, 508, 607, 769, 1074, 1134, 1232], "named_expr": [246, 247, 281, 282, 307, 670, 747, 751, 833, 834, 851, 852, 875], "threshold": [246, 307, 833, 875], "set_auto_structifi": [246, 281, 307, 833, 851, 875], "auto_structifi": [246, 281, 307, 833, 851, 875], "is_odd": [246, 307, 833, 875, 881], "_is_odd": [246, 307, 833, 875], "bit_set": [248, 307, 835, 875], "incorrect": [249, 307, 431, 528, 609, 769, 836, 863, 875, 1001, 1138, 1232], "fill_valu": [251, 275, 307, 610, 769, 837, 875, 1140, 1232], "opposit": [251, 307, 351, 513, 610, 769, 837, 875, 915, 1079, 1140, 1232], "lag": [251, 307, 351, 513, 610, 699, 769, 837, 875, 915, 1079, 1140, 1232], "shrink": [252, 307, 611, 769, 1141, 1142, 1232], "hold": [252, 266, 307, 1213, 1232], "nulls_last": [254, 307, 332, 352, 515, 618, 619, 695, 769, 840, 875, 896, 916, 1043, 1081, 1149, 1232], "multithread": [254, 307, 619, 695, 769, 840, 875, 916, 1081, 1149, 1232], "although": [255, 307, 841, 875], "sqlcontext": [255, 307, 748, 841, 875, 1255], "registr": [255, 307, 748, 781, 841, 875, 1245], "1999": [255, 307, 411, 881, 981], "2010": [255, 307, 881], "2077": [255, 307, 881, 1253], "alias": [255, 307, 535, 841, 875], "AS": [255, 307, 748, 749, 841, 875, 1240, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1256, 1258], "a_is_even": [255, 307, 748, 841, 875], "concat_w": [255, 307, 748, 841, 875, 1250], "b_b": [255, 307], "float4": [255, 307, 748, 841, 875], "ddof": [256, 278, 307, 353, 358, 516, 522, 599, 600, 603, 604, 621, 684, 701, 703, 745, 746, 750, 758, 769, 842, 849, 875, 917, 922, 1082, 1088, 1129, 1131, 1151, 1222, 1232], "deviat": [256, 307, 438, 599, 600, 621, 750, 769, 842, 875, 1009, 1151, 1232, 1247], "degre": [256, 278, 307, 516, 522, 576, 599, 600, 603, 604, 621, 684, 694, 701, 703, 745, 746, 750, 758, 769, 842, 849, 875, 1129, 1131, 1151, 1222, 1232, 1250], "freedom": [256, 278, 307, 516, 522, 599, 600, 603, 604, 621, 684, 701, 703, 745, 746, 750, 758, 769, 842, 849, 875, 1129, 1131, 1151, 1222, 1232], "divisor": [256, 278, 307, 516, 522, 599, 600, 603, 604, 621, 684, 701, 703, 745, 746, 750, 758, 769, 842, 849, 875, 1129, 1131, 1151, 1222, 1232], "816497": [256, 307], "mostli": [260, 307, 446, 769], "categoricaltyp": [260, 307], "fruit": [261, 307, 583, 628, 650, 657, 769, 1158, 1180, 1187], "beetl": [261, 307, 583, 769], "audi": [261, 307, 583, 769], "28": [261, 266, 307, 316, 414, 431, 769, 984, 1001, 1213, 1232, 1253, 1254, 1258, 1259], "300": [261, 307, 458, 565, 769, 881, 1123, 1124, 1126, 1232, 1249], "drop_first": [263, 307, 1208, 1232], "dummi": [263, 307, 1208, 1232], "foo_1": [263, 307], "foo_2": [263, 307], "bar_3": [263, 307], "bar_4": [263, 307], "ham_a": [263, 307], "ham_b": [263, 307], "instantiat": [264, 307, 1210, 1232], "from_repr": [264, 307, 1210, 1232], "df_from_str_repr": [264, 307], "eval": [264, 307, 528, 529, 716, 769, 1093, 1210, 1232], "return_typ": [265, 270, 307], "jaxexporttyp": [265, 307], "devic": [265, 307, 1211, 1232], "jax": [265, 307, 1211, 1232], "indexord": [265, 266, 307], "fortran": [265, 266, 307], "gpu": [265, 307, 1211, 1232], "tpu": [265, 307, 1211, 1232], "design": [265, 270, 307], "32bit": [265, 307], "jax_enable_x64": [265, 307], "startup": [265, 307], "to_dummi": [265, 270, 307, 1232], "to_numpi": [265, 270, 307, 528, 769, 1232], "to_torch": [265, 307, 1232], "lbl": [265, 270, 307], "feat1": [265, 270, 307], "feat2": [265, 270, 307], "gpudevic": [265, 307], "process_index": [265, 307], "gpu_devic": [265, 307], "downstream": [266, 307, 609, 769, 1138, 1232], "applic": [266, 307, 529, 769], "prevent": [266, 307, 318, 379, 380, 550, 672, 769, 875, 946, 947, 1203, 1232], "reshap": [266, 307, 493, 769, 1059, 1232], "immut": [266, 307, 1213, 1232], "arr": [266, 307, 761, 1213, 1224, 1232], "writeabl": [266, 307, 1213, 1232], "runtimeerror": [266, 307, 1213, 1232], "c_contigu": [266, 307], "u1": [266, 307], "f4": [266, 307], "use_pyarrow_extension_arrai": [267, 307, 1214, 1232], "extens": [267, 307, 1214, 1232], "na": [267, 307, 650, 1214, 1232], "doubl": [267, 307], "four": [269, 307], "five": [269, 307, 1259], "torchexporttyp": [270, 307], "tensor": [270, 307, 1216, 1232], "polarsdataset": [270, 307], "pytorch": [270, 307, 1216, 1232], "tensordataset": [270, 307], "label_column": [270, 307], "to_jax": [270, 307, 1232], "0000": [270, 307, 1216, 1232, 1259], "5000": [270, 307, 1216, 1232], "opt": [270, 307], "half": [270, 307, 415, 436, 437, 438, 439, 769, 985, 1007, 1008, 1009, 1010, 1232], "experiment": [270, 307, 851, 875], "model": [270, 307], "float16": [270, 307], "dataload": [270, 307], "util": [270, 307, 721, 802, 875, 879], "dl": [270, 307], "scikit": [270, 307], "learn": [270, 307], "sklearn": [270, 307], "fetch_california_h": [270, 307], "hous": [270, 307], "feature_nam": [270, 307], "train": [270, 307], "loader": [270, 307], "bottom_k": [271, 307, 366, 677, 678, 769, 845, 875, 1217, 1232], "header_nam": [272, 307], "perhap": [272, 307], "column_2": [272, 307, 1254], "name_gener": [272, 307], "base_nam": [272, 307], "my_column_": [272, 307], "my_column_0": [272, 307], "my_column_1": [272, 307], "my_column_2": [272, 307], "j": [272, 307], "new_id": [272, 307], "uniquekeepstrategi": [273, 307, 846, 875], "kept": [273, 307, 846, 875], "decompos": [274, 307, 847, 875], "t_a": [274, 307, 847, 875], "t_b": [274, 307, 847, 875], "t_c": [274, 307, 847, 875], "t_d": [274, 307, 847, 875], "womp": [274, 307, 847, 875], "t_": [274, 307, 437, 769, 847, 875, 1008, 1232], "t_struct": [274, 307, 847, 875], "step": [275, 307, 450, 692, 725, 726, 769], "unstackdirect": [275, 307], "pivot": [275, 307, 881], "ascii_uppercas": [275, 307], "h": [275, 307, 316, 417, 420, 611, 642, 643, 656, 659, 663, 769, 1172, 1173, 1186, 1189, 1193, 1253], "x_0": [275, 307, 436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "x_1": [275, 307, 437, 769, 1008, 1232], "y_0": [275, 307, 436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "y_1": [275, 307], "z_0": [275, 307], "z_1": [275, 307], "include_nul": [276, 307, 848, 875], "implicit": [276, 307, 848, 875], "syntact": [276, 307, 581, 687, 689, 691, 702, 704, 707, 717, 722, 723, 724, 732, 734, 736, 737, 739, 741, 742, 747, 750, 752, 754, 758, 760, 769, 848, 875, 1117, 1150, 1232], "sugar": [276, 307, 581, 687, 689, 691, 702, 704, 707, 717, 722, 723, 724, 732, 734, 736, 737, 739, 741, 742, 747, 750, 752, 754, 758, 760, 769, 848, 875, 1117, 1150, 1232], "400": [276, 307, 423, 424, 426, 848, 875, 1123, 1124, 1126, 1232, 1249], "600": [276, 307, 423, 424, 426, 848, 875, 881], "700": [276, 307, 848, 875], "new_df": [276, 307, 848, 875], "time_column": [277, 307], "frequenc": [277, 307, 683, 769, 1221, 1232], "forward_fil": [277, 307, 359, 377, 380, 610, 769], "varianc": [278, 307, 439, 478, 603, 604, 684, 758, 769, 849, 875, 1010, 1046, 1131, 1222, 1232, 1250], "grow": [279, 307], "not_": [281, 307, 769, 851, 875, 881, 1232], "not_c": [281, 307, 851, 875], "52": [281, 307, 429, 605, 769, 814, 851, 875], "diff": [281, 307, 421, 422, 423, 424, 425, 426, 427, 509, 769, 851, 875, 991, 992, 993, 994, 995, 996, 997, 1075, 1232], "_diff": [281, 307, 851, 875], "row_nr": [283, 307, 854, 875], "1001": [284, 307, 855, 875], "1002": [284, 307, 855, 875], "named_agg": [286, 856], "_sum": [286, 856], "_mean_squar": [286, 856], "b_sum": [286, 856], "c_mean_squar": [286, 856], "toward": [288, 481, 501, 704, 769, 858, 1047, 1067, 1232], "nr": [290, 301, 860, 871], "sub": [293, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 358, 499, 506, 769, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 917, 918, 922, 1065, 1072], "triangl": [293, 863], "group_df": [293, 863], "maxim": [294, 330, 769, 864, 894, 1232], "833333": [295, 865], "minim": [297, 331, 338, 486, 611, 619, 769, 867, 895, 902, 1052, 1097, 1141, 1232], "overview": [307, 769, 781, 875, 1232, 1255, 1259], "frameinittyp": [307, 875], "entri": [307, 875, 1256], "workaround": 307, "pola": 307, "2846": 307, "df4": 307, "df5": 307, "df6": 307, "approx_n_uniqu": [307, 769, 875], "corr": 307, "deseri": [307, 452, 541, 769, 835, 875], "drop_in_plac": 307, "drop_nul": [307, 387, 769, 875, 953, 1232], "estimated_s": [307, 1232], "explod": [307, 366, 448, 567, 582, 678, 769, 875, 879, 1118, 1232, 1248], "fold": [307, 539, 698, 705, 706, 743], "gather_everi": [307, 769, 875, 1232], "get_column_index": 307, "hash_row": 307, "insert_column": 307, "is_dupl": [307, 769, 1232], "is_empti": [307, 1232], "is_uniqu": [307, 769, 1232], "iter_column": 307, "iter_slic": 307, "map_row": 307, "max_horizont": [307, 732], "mean_horizont": [307, 734], "melt": [307, 875], "merge_sort": [307, 875], "min_horizont": [307, 737, 747], "n_chunk": [307, 887, 1013, 1114, 1232], "n_uniqu": [307, 323, 769, 1232], "pipe": [307, 769, 875], "plot": [307, 827, 838, 875, 1232], "hvplottabularpolar": [307, 1232], "defer": [307, 310, 311, 1232, 1236], "galleri": [307, 310, 1232, 1236], "scatter": [307, 310, 1232], "speci": [307, 310], "setosa": [307, 310], "versicolor": [307, 310], "stock_1": [307, 310], "stock_2": [307, 310], "quantil": [307, 574, 596, 597, 769, 875, 1111, 1127, 1232], "replace_column": 307, "select_seq": [307, 875], "shrink_to_fit": [307, 1232], "gt": [307, 311, 769, 1232], "great": [307, 311], "helper": [307, 311, 765], "great_tabl": [307, 311], "loc": [307, 311], "site_id": [307, 311], "measure_a": [307, 311], "measure_b": [307, 311], "emphas": [307, 311], "tab_stub": [307, 311], "rowname_col": [307, 311], "background": [307, 311, 790, 875], "highest": [307, 311, 577, 682, 701, 769, 875, 1113, 1232], "tab_styl": [307, 311], "yellow": [307, 311, 360, 361, 362, 363, 364], "spanner": [307, 311], "tab_spann": [307, 311], "fmt_number": [307, 311], "to_panda": [307, 1232], "to_struct": [307, 631], "unnest": [307, 382, 574, 584, 631, 632, 648, 649, 669, 670, 683, 769, 875, 920, 949, 1086, 1111, 1120, 1178, 1179, 1232, 1250, 1255], "unstack": 307, "with_columns_seq": [307, 875], "with_row_count": [307, 875], "write_avro": 307, "write_databas": 307, "write_delta": 307, "write_excel": 307, "write_ipc_stream": 307, "write_json": 307, "write_parquet": 307, "cum_prod": [316, 769, 1232], "ghi": [316, 631, 769, 881, 1161], "94": [317, 769], "to_uppercas": [318, 557, 632, 769], "confus": [319, 473, 474, 644, 769], "kleen": [319, 321, 687, 688, 689, 690, 769, 885, 886, 1232], "bitwis": [320, 566, 686, 687, 688, 689, 690, 769], "upcast": [322, 769], "approx": [323, 769], "1005": [323, 769], "invers": [324, 325, 326, 327, 328, 329, 769, 888, 889, 890, 891, 892, 893, 1213, 1232, 1254], "cosin": [324, 325, 372, 373, 528, 769, 888, 889, 940, 941, 1232, 1254], "570796": [324, 326, 769, 888, 890, 1232, 1254], "hyperbol": [325, 327, 329, 373, 615, 675, 769, 889, 891, 893, 941, 1146, 1206, 1232], "sine": [326, 327, 528, 614, 615, 769, 890, 891, 1145, 1146, 1232, 1254], "881374": [327, 769, 891, 1232], "tangent": [328, 329, 674, 675, 769, 892, 893, 1205, 1206, 1232, 1254], "785398": [328, 693, 694, 769, 892, 1232, 1254], "rank": [332, 492, 695, 701, 716, 769, 896, 1058, 1232], "arg_wher": [333, 769], "subarrai": [335, 336, 899, 900], "membership": [339, 488, 903, 1054], "number_of_two": [340, 489], "null_on_oob": [343, 495, 497, 907, 1061, 1063], "sublist": [343, 485, 486, 488, 490, 494, 495, 496, 497, 498, 499, 500, 509, 514, 518, 520, 907, 1036, 1051, 1052, 1054, 1056, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1075, 1080, 1084, 1086, 1232], "propag": [344, 435, 499, 559, 560, 562, 622, 635, 700, 769, 908, 1065, 1102, 1103, 1152, 1165, 1232], "x_y": [344, 499], "707107": [353, 438, 599, 600, 693, 769, 917, 1009, 1232, 1254], "i8": [355, 356, 397, 400, 403, 405, 406, 407, 410, 412, 413, 416, 429, 430, 519, 611, 741, 744, 760, 769, 919, 920, 951, 963, 966, 976, 977, 983, 986, 999, 1000, 1085, 1119, 1141, 1220, 1232, 1253], "field_0": [356, 520, 920, 1086], "field_1": [356, 520, 920, 1086], "field_n": [356, 520, 920, 1086], "n0": [356, 520], "n1": [356, 520], "c1": 356, "c2": 356, "c3": 356, "seen": [359, 451, 769], "substr": [360, 363, 364, 623, 628, 633, 642, 643, 646, 647, 648, 649, 650, 881, 923, 926, 927, 1153, 1158, 1163, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1250], "ends_with": [360, 364, 623, 650, 881, 1180, 1250], "x00": [360, 361, 362, 363, 364, 626, 923, 924, 925, 926, 927, 1156], "xff": [360, 361, 362, 363, 364, 626, 923, 924, 925, 926, 927, 1156], "contains_with_lit": 360, "contains_with_expr": 360, "transferencod": [361, 362, 626, 627, 924, 925, 1156, 1157], "hex": [361, 362, 626, 627, 661, 924, 925, 1156, 1157, 1191], "base64": [361, 362, 626, 627, 924, 925, 1156, 1157], "000000": [361, 362, 626, 924, 925, 1156], "ffff00": [361, 362, 626, 924, 925, 1156], "0000ff": [361, 362, 626, 924, 925, 1156], "anywher": [363, 364, 656, 658, 659, 1186, 1188, 1189], "ends_with_lit": 363, "ends_with_expr": 363, "starts_with_lit": 364, "starts_with_expr": 364, "top_k_bi": [365, 366, 677, 769], "bottom_k_bi": [365, 677, 678, 769], "_btm_by_a": [366, 769], "_btm_by_b": [366, 769], "a_btm_by_a": [366, 769], "b_btm_by_a": [366, 769], "c_btm_by_a": [366, 769], "a_btm_by_b": [366, 769], "b_btm_by_b": [366, 769], "c_btm_by_b": [366, 769], "_by_ca": [366, 678, 769], "_by_cb": [366, 678, 769], "a_by_ca": [366, 678, 769], "b_by_ca": [366, 678, 769], "c_by_ca": [366, 678, 769], "a_by_cb": [366, 678, 769], "b_by_cb": [366, 678, 769], "c_by_cb": [366, 678, 769], "wrap_numer": [367, 769, 929, 1232], "mark": [367, 769, 929, 1232], "to_fram": [368, 399, 415, 419, 428, 656, 949, 1111, 1135, 1137, 1178, 1179, 1186, 1232], "259921": [369, 769, 934, 1232, 1251], "587401": [369, 769, 1251], "numericliter": [371, 769, 938, 1232], "temporalliter": [371, 769, 938, 970, 971, 1232], "outsid": [371, 769, 938, 1232], "543081": [373, 769, 941, 1232], "cotang": [374, 769, 942, 1232, 1254], "cumul": [376, 377, 378, 379, 380, 704, 705, 706, 707, 708, 769, 943, 944, 945, 946, 947, 1232], "cum_count_revers": [376, 769], "cum_max_revers": [377, 769], "cum_max_all_fil": [377, 769], "cum_min_revers": [378, 769], "cum_prod_revers": [379, 769], "cum_sum_revers": [380, 769], "value_cum_sum": [380, 769], "value_cum_sum_all_fil": [380, 769], "min_period": [381, 436, 438, 439, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 745, 746, 769, 948, 1007, 1009, 1010, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1232], "slide": [381, 769, 948, 1232], "slot": [381, 385, 490, 769, 948, 951, 1056, 1232], "realli": [381, 624, 644, 769, 948, 1154, 1174, 1232], "visit": [381, 769, 948, 1232], "left_clos": [382, 574, 769, 949, 1111, 1232], "include_break": [382, 574, 769, 949, 1111, 1232], "bin": [382, 461, 574, 661, 686, 762, 769, 949, 1027, 1111, 1191, 1226, 1232], "discret": [382, 385, 433, 461, 490, 509, 574, 769, 949, 951, 1004, 1027, 1056, 1075, 1111, 1232], "plu": [382, 525, 769, 949, 1091, 1111, 1232, 1251], "endpoint": [382, 574, 769, 949, 1111, 1232], "observ": [382, 436, 437, 438, 439, 574, 769, 949, 1007, 1008, 1009, 1010, 1111, 1232], "fall": [382, 574, 769, 949, 1111, 1232], "qcut": [382, 769, 949, 1232], "breakpoint": [382, 461, 574, 769, 949, 1027, 1111, 1232], "radian": [383, 693, 769, 1250], "720": [383, 576, 769], "540": [383, 576, 769], "360": [383, 576, 769, 1254], "180": [383, 576, 769, 1254], "pickl": [384, 769, 796, 875], "secur": [384, 769, 796, 875], "implic": [384, 769, 796, 875], "trust": [384, 769, 796, 875], "meta": [384, 769], "ba": [384, 440, 541, 650, 717, 769, 881], "null_behavior": [385, 490, 769, 951, 1056, 1232], "nullbehavior": [385, 490, 769, 951, 1056, 1232], "drop_nan": [388, 769, 954, 1232], "week_mask": [389, 697, 955], "holidai": [389, 697, 955], "busi": [389, 697, 955], "handi": [389, 697, 955], "pip": [389, 697, 955], "dutch": [389, 697, 955], "my_holidai": [389, 697, 955], "country_holidai": [389, 697, 955], "nl": [389, 697, 955], "2025": [389, 697, 881, 955], "business_day_count": [389, 955], "land": [389, 955], "weekend": [389, 697, 955], "rolled_forward": 389, "vari": [390, 956, 1259], "rare": [390, 956], "switch": [390, 956], "samoa": [390, 956], "apia": [390, 956], "did": [390, 956], "2011": [390, 956], "dst_offset": [390, 956], "2012": [390, 956], "replace_time_zon": [390, 396, 398, 961, 962, 988], "pacif": [390, 956], "11h": [390, 956], "13h": [390, 956], "lose": [391, 957], "time_unit_m": [391, 957], "time_unit_n": [391, 957], "999": [392, 404, 881, 958, 973, 1249, 1259], "1897": [392, 404, 958, 973], "2000": [392, 401, 404, 408, 409, 411, 881, 958, 967, 973, 978, 979, 981, 986, 1240], "3002": [392, 404, 958, 973], "cent": 392, "0999": [392, 404], "naiv": [393, 394, 659, 959, 960, 1189], "compon": [393, 416, 656, 659, 715, 959, 986, 1186, 1189], "resolv": [393, 792, 793, 799, 832, 850, 875], "tm": [393, 881], "456000": [393, 959], "101000": 393, "d1": 393, "d2": 393, "d3": 393, "europ": [394, 398, 414, 960, 964, 984], "london": [394, 398, 414, 960, 964, 984], "gmt": [394, 398, 414, 960, 964, 984], "bst": [394, 398, 414, 960, 964, 984], "1978": [395, 396, 400, 402, 403, 405, 406, 410, 416, 418, 432], "500_000": [395, 396, 400, 403, 405, 406, 410, 416, 418], "2065": [395, 396, 400, 403, 405, 406, 410, 416, 418], "60_000": [395, 396, 400, 403, 405, 406, 410, 416, 418], "060": [395, 396, 400, 403, 405, 406, 410, 416, 418], "weekdai": [397, 412], "ordinal_dai": [397, 430], "day_of_month": [397, 412, 430], "day_of_year": [397, 412, 430], "356": [397, 412, 430], "357": [397, 412, 430], "358": [397, 412, 430], "359": [397, 412, 430], "base_utc_offset": [398, 964], "0m": [398, 964], "epochtimeunit": [399, 721, 965], "epoch_n": [399, 965], "epoch_": [399, 965], "978307200000000": [399, 419, 965, 989], "978307200": [399, 965], "978393600000000": [399, 419, 965, 989], "978393600": [399, 965], "978480000000000": [399, 419, 965, 989], "978480000": [399, 965], "leap": [401, 411, 967, 981], "leap_year": 401, "iso": [402, 429, 430, 968, 999, 1000, 1253], "1977": [402, 432], "1979": [402, 432], "calendar_year": [402, 432], "1976": [402, 432], "500000": [403, 972], "60000": 403, "mlnm": 404, "think": [408, 409, 978, 979], "vectoris": [408, 409, 978, 979], "tseri": [408, 409, 978, 979], "monthend": [408, 978], "rollforward": [408, 978], "monthbegin": [409, 979], "rollback": [409, 979], "500000000": [410, 980], "60000000": 410, "minu": [411, 563, 769, 981], "dictat": [411, 769, 879, 981], "2005": [411, 981], "date_plus_1i": [411, 981], "1y2mo": [411, 981], "date_min": 411, "1998": [411, 981], "2003": [411, 721, 981], "2004": [411, 981], "2006": [411, 981], "new_dat": 411, "ordin": [412, 577, 769, 982, 1113, 1232, 1257], "366": [412, 982], "non_exist": [414, 984], "nonexist": [414, 984], "convert_time_zon": [414, 984], "london_timezon": [414, 984], "amsterdam": [414, 984], "london_to_amsterdam": [414, 984], "cet": [414, 984], "cest": [414, 984], "ts_local": [414, 984], "brussel": [414, 984], "localis": [415, 428, 998], "dst": [415, 428, 985, 998], "cst": [415, 428, 985, 998], "cdt": [415, 428, 985, 998], "225": [415, 428, 1254], "10m": [415, 428, 985, 998], "milli": [416, 986], "micro": [416, 986], "to_str": [417, 987], "datetime_str": [417, 420], "day_nam": [417, 420], "month_nam": [417, 420], "march": [417, 420, 987, 990], "april": [417, 420, 987, 990], "timestamp_u": [419, 989], "timestamp_m": 419, "978307200000": 419, "978393600000": 419, "978480000000": 419, "days_diff": 421, "hours_diff": 422, "200m": [423, 424, 426], "milliseconds_diff": [423, 424, 426], "200": [423, 424, 426, 581, 769, 881, 1117, 1123, 1124, 1126, 1232, 1249], "200000": [423, 818, 875], "800": [423, 424, 426], "minutes_diff": 425, "1440": [425, 995], "200000000": 426, "seconds_diff": 427, "truncate_str": 428, "truncate_td": 428, "53": [429, 999], "time_unit_u": 431, "32971": [431, 1001], "32974": [431, 1001], "32976": [431, 1001], "iso_year": 432, "pk": [433, 769, 1004, 1232], "probabl": [433, 574, 769, 1004, 1111, 1232], "459148": [433, 769], "754888": [433, 769], "span": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "half_lif": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "alpha": [436, 438, 439, 769, 800, 802, 827, 838, 875, 881, 1007, 1009, 1010, 1232], "adjust": [436, 438, 439, 616, 769, 1007, 1009, 1010, 1147, 1232], "exponenti": [436, 437, 438, 439, 441, 572, 769, 1007, 1008, 1009, 1010, 1011, 1232, 1251], "weight": [436, 437, 438, 439, 587, 588, 590, 592, 594, 596, 599, 601, 603, 616, 769, 1007, 1008, 1009, 1010, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1147, 1232], "decai": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "term": [436, 438, 439, 634, 646, 657, 769, 1007, 1009, 1010, 1164, 1176, 1187, 1232], "mass": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "gamma": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "frac": [436, 438, 439, 616, 769, 1007, 1009, 1010, 1147, 1232], "foral": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "geq": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "theta": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "life": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "exp": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232, 1250], "ln": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232, 1250], "smooth": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "factor": [436, 438, 439, 676, 769, 1007, 1009, 1010, 1215, 1232], "leq": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "imbal": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "ew": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "w_i": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "recurs": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "y_t": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "y_": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "x_t": [436, 438, 439, 769, 1007, 1009, 1010, 1232], "x_2": [436, 437, 438, 439, 769, 1007, 1008, 1009, 1010, 1232], "428571": [436, 769, 1007, 1232], "ldot": [437, 769, 1008, 1232], "x_n": [437, 769, 1008, 1232], "t_2": [437, 769, 1008, 1232], "ewma": [437, 769, 1008, 1232], "alpha_i": [437, 769, 1008, 1232], "t_i": [437, 769, 1008, 1232], "y_i": [437, 769, 1008, 1232], "x_i": [437, 769, 1008, 1232], "quad": [437, 769, 1008, 1232], "370h": [437, 769, 1008, 1232], "4d": [437, 769, 1008, 1232], "292893": [437, 769, 1008, 1232], "492474": [437, 769, 1008, 1232], "254508": [437, 769, 1008, 1232], "bia": [438, 439, 478, 598, 616, 769, 1009, 1010, 1046, 1128, 1147, 1232], "unbias": [438, 439, 769, 1009, 1010, 1232], "963624": [438, 769, 1009, 1232], "928571": [439, 769, 1010, 1232], "wildcard": [440, 667, 705, 706, 719, 743, 769, 879], "regex": [440, 535, 536, 623, 625, 628, 630, 631, 632, 633, 642, 643, 650, 667, 717, 769, 881, 1153, 1155, 1158, 1160, 1161, 1162, 1163, 1172, 1173, 1180], "aa": [440, 623, 633, 717, 769, 881, 950, 1153, 1163, 1232, 1252], "cc": [440, 717, 769, 881, 950, 1232, 1252], "718282": [441, 769, 1011, 1232, 1251], "389056": [441, 769, 1011, 1232, 1251], "54": [441, 769, 1046, 1232, 1251, 1259], "59815": [441, 769, 1251], "extrem": [443, 587, 769, 1014, 1122, 1232], "expressioin": [443, 769, 1014, 1232], "group_col": [446, 685, 769], "g1": [446, 685, 769], "g2": [446, 685, 769], "lt": [446, 685, 769, 1232], "gte": [446, 685, 769], "n_1": [446, 769], "n_2": [446, 769], "n_3": [446, 769], "exprlistnamespac": [448, 769], "divis": [450, 679, 769, 1251], "truediv": [450, 769], "subtli": [450, 769], "intuit": [450, 769, 881], "backward_fil": [451, 610, 769], "enclos": [452, 769], "350": [458, 565, 769, 1124, 1232], "650": [458, 565, 769], "850": [458, 565, 769], "9774092659964970114": [459, 769], "13614470193936745724": [459, 769], "1101441246220388612": [459, 769], "11638928888656214026": [459, 769], "13382926553367784577": [459, 769], "bin_count": [461, 769, 1027, 1232], "include_categori": [461, 769, 1027, 1232], "include_breakpoint": [461, 769, 1027, 1232], "occurr": [461, 469, 472, 683, 769, 1027, 1035, 1038, 1221, 1232], "cum_sum": [463, 671, 708, 769, 811, 875, 1045, 1232], "interpolationmethod": [464, 769, 1029, 1232], "regrid": [464, 769], "grid": [464, 769], "df_original_grid": [464, 769], "grid_point": [464, 769], "df_new_grid": [464, 769], "a_interpol": [465, 769], "285714": [465, 769, 1030, 1232], "714286": [465, 769, 1030, 1232], "satisfi": [466, 769, 1031, 1232], "conflat": [466, 769], "between_ab": [466, 769], "finit": [468, 679, 701, 769, 1034, 1232], "optional_memb": [470, 769, 1036, 1232], "infinit": [471, 679, 769, 1037, 1232], "_isnan": [473, 769], "b_isnan": [473, 769], "_is_not_nan": [474, 769], "b_is_not_nan": [474, 769], "_not_nul": [475, 769], "a_not_nul": [475, 769], "b_not_nul": [475, 769], "_isnul": [476, 769], "a_isnul": [476, 769], "b_isnul": [476, 769], "fisher": [478, 616, 769, 1046, 1147, 1232], "fourth": [478, 769, 1046, 1232], "subtract": [478, 671, 769, 1046, 1232], "distribut": [478, 616, 769, 1046, 1147, 1232], "elimin": [478, 769, 1046, 1232], "bias": [478, 616, 769, 1046, 1147, 1232], "scipi": [478, 616, 769, 1046, 1147, 1232, 1236], "stat": [478, 616, 769, 835, 875, 1046, 1147, 1232], "153061": [478, 769], "blindli": [492, 1058], "worth": [492, 1058], "enough": [492, 616, 769, 1058, 1147, 1232], "concat_list": [492, 716], "exprnamespac": 493, "cheaper": [495, 1061], "symmetr": [511, 1077], "sdiff": 511, "taken": [514, 646, 1080, 1176], "363961": [516, 1082], "n_field_strategi": [520, 1086], "tostructstrategi": [520, 1086], "first_non_nul": [520, 1086], "max_width": [520, 1086], "pre": [520, 529, 574, 741, 744, 760, 769, 1111, 1232], "eagerli": [520, 1240], "obtain": 520, "ok": 520, "longest": 520, "logarithm": [523, 524, 525, 769, 1089, 1090, 1091, 1232, 1251], "584963": [523, 769], "30103": [524, 769, 1251], "60206": [524, 769, 1251], "natur": [525, 769, 1091, 1232, 1251], "693147": [525, 769, 1089, 1091, 1232, 1251], "098612": [525, 769, 1089, 1091, 1232, 1251], "386294": [525, 769, 1091, 1232, 1251], "lowest": [526, 769], "9223372036854775808": [526, 769], "agg_list": [528, 769], "is_elementwis": [528, 769, 879], "returns_scalar": [528, 731, 769, 879], "whole": [528, 618, 619, 630, 769, 863, 875, 1160], "presum": [528, 769], "stai": [528, 769], "elementwis": [528, 587, 588, 590, 592, 594, 596, 599, 601, 603, 769, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1232], "third": [528, 769], "parti": [528, 769], "map_to_scalar": [528, 769], "invok": [528, 769], "assumpt": [528, 769], "someth": [528, 769], "bug": [528, 529, 769, 818, 863, 875, 1093, 1232], "argmax": [528, 769], "skip_nul": [529, 769, 1093, 1232], "pass_nam": [529, 769], "mapelementsstrategi": [529, 769], "thread_loc": [529, 769], "suppos": [529, 769, 1093, 1232], "sqrt": [529, 616, 670, 769, 1093, 1147, 1232, 1250], "field_nam": [529, 769, 1093, 1232], "with_field": [529, 769], "gil": [529, 769], "discourag": [529, 769], "loop": [529, 769], "a_times_2": [529, 769], "tip": [529, 769], "view": [529, 769], "again": [529, 769], "exprmetanamespac": [533, 537], "foo_bar": [533, 537, 647, 729, 1244], "foo_bar2": [533, 537], "_foo": 534, "allow_alias": 535, "bare": [535, 881], "foo_": [536, 647, 720], "raise_if_undetermin": 538, "computeerror": [538, 661, 1191], "e_filt": [538, 540], "e_sum_ov": [538, 540], "e_sum_slic": [538, 540], "order_bi": [541, 567, 769], "groupstorow": 541, "tree": [542, 800, 875], "undo": [543, 550, 551, 553, 555, 557, 558], "modulu": [546, 769], "xlog2": [548, 572, 769], "purpos": [549, 769, 790, 802, 875], "x_uniqu": [549, 769], "y_uniqu": [549, 769], "chain": [550, 551, 553, 555, 557, 558, 759], "a_revers": [551, 555, 583, 769], "b_revers": [551, 555, 583, 769], "rstrip": 551, "_revers": [551, 555, 583, 769], "reverse_": 553, "reverse_a": 553, "reverse_b": 553, "prefix_": 554, "prefix_a": 554, "prefix_b": 554, "_suffix": 556, "a_suffix": 556, "b_suffix": 556, "lowercas": [557, 662, 1192, 1252], "uppercas": [558, 665, 1195, 1252], "to_lowercas": 558, "poison": [559, 560, 769, 1102, 1103, 1232], "nanmax": [559, 560, 769, 1102, 1103, 1232], "inequ": [561, 769], "ne": [562, 769, 1232], "unari": [563, 769], "negat": [564, 769, 1105, 1232], "more_expr": [567, 695, 698, 699, 700, 769], "mapping_strategi": [567, 769], "windowmappingstrategi": [567, 769], "group_to_row": [567, 769], "outcom": [567, 769], "group_dtyp": [567, 769], "_max": [567, 769], "c_max": [567, 769], "_min": [567, 769], "c_min": [567, 769], "sort_bi": [567, 769], "percent": [568, 769, 1107, 1232], "090909": [568, 769], "extract_numb": [571, 769], "scale_negative_even": [571, 769], "expon": [572, 769, 1232, 1251], "x_squar": [572, 769], "x_invers": [572, 769], "allow_dupl": [574, 769, 1111, 1232], "duplicateerror": [574, 769, 1111, 1232], "cut": [574, 769, 1111, 1232], "566371": [576, 769], "424778": [576, 769], "283185": [576, 769], "141593": [576, 769, 888, 1232, 1251, 1254], "rankmethod": [577, 769, 1113, 1232], "ti": [577, 769, 1113, 1232], "competit": [577, 769, 1113, 1232], "immedi": [577, 692, 696, 710, 711, 713, 714, 725, 726, 741, 744, 751, 756, 757, 760, 769, 1113, 1232], "safe": [579, 769, 1115, 1232], "nodefault": [581, 769, 1117, 1232], "_nodefault": [581, 769, 1117, 1232], "no_default": [581, 769, 1117, 1232], "fruits_revers": [583, 769], "cars_revers": [583, 769], "rle_id": [584, 769, 1232], "rle": [585, 769, 1121, 1232], "rle_id_a": [585, 769], "rle_id_ab": [585, 769], "window_s": [587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 745, 746, 769, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1232], "multipli": [587, 588, 590, 592, 594, 596, 599, 601, 603, 670, 769, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1232], "rolling_sum": [587, 769, 1122, 1232], "nansum": [587, 769, 1122, 1232], "travers": [588, 590, 592, 594, 596, 599, 601, 603, 769, 1123, 1124, 1126, 1129, 1130, 1131, 1232], "vector": [588, 590, 592, 594, 596, 599, 601, 603, 769, 1123, 1124, 1126, 1129, 1130, 1131, 1232], "df_tempor": [589, 591, 593, 595, 597, 600, 602, 604, 769], "rolling_row_max": [589, 769], "2h": [589, 591, 593, 595, 597, 600, 602, 604, 769], "closur": [589, 591, 600, 602, 604, 769], "rolling_row_mean": [591, 769], "rolling_row_median": [593, 769], "rolling_row_min": [595, 769], "625": [596, 769], "rolling_row_quantil": [597, 769], "skew": [598, 769, 1128, 1232], "381802": [598, 769, 1128, 1232], "47033": [598, 769, 1128, 1232], "38180177416060584": [598, 769, 1128, 1232], "47033046033698594": [598, 769, 1128, 1232], "433013": [599, 769, 842, 875], "rolling_row_std": [600, 769], "rolling_row_sum": [602, 769], "39": [602, 721, 769], "57": [602, 769, 1132, 1232, 1254, 1259], "63": [602, 769], "69": [602, 769, 1046, 1232], "1875": [603, 769, 849, 875], "rolling_row_var": [604, 769], "figur": [606, 769, 838, 875, 1133, 1232], "01234": [606, 769, 1133, 1232], "012": [606, 769, 1133, 1232], "1200": [606, 769, 1133, 1232], "searchsortedsid": [608, 769, 1136, 1232], "leftmost": [608, 769, 1136, 1232, 1252], "rightmost": [608, 769, 1136, 1232, 1252], "six": [608, 769], "extrema": [611, 769, 1141, 1232], "112": [611, 769, 1259], "129": [611, 769], "8589934592": [611, 769], "1073741824": [611, 769], "175201": [615, 769, 1146, 1232], "unimod": [616, 769, 1147, 1232], "skewtest": [616, 769, 1147, 1232], "speak": [616, 769, 1147, 1232], "g_1": [616, 769, 1147, 1232], "m_3": [616, 769, 1147, 1232], "m_2": [616, 769, 1147, 1232], "m_i": [616, 769, 1147, 1232], "sum_": [616, 769, 1147, 1232], "texttt": [616, 769, 1147, 1232], "k_3": [616, 769, 1147, 1232], "k_2": [616, 769, 1147, 1232], "343622": [616, 769], "value1": [619, 769], "value2": [619, 769], "attain": [619, 769], "414214": [620, 769, 1150, 1232, 1251], "hyphen": [622, 1152], "sensit": [623, 631, 633, 642, 643, 1153, 1161, 1163, 1172, 1173], "ilmsuxu": [623, 630, 631, 633, 642, 643, 1153, 1160, 1161, 1163, 1172, 1173], "default_match": [623, 633], "insensitive_match": [623, 633], "crab": [623, 633, 1153, 1163], "dog": [623, 662, 665, 700, 1153, 1192, 1195], "rab": [623, 645, 1153, 1175, 1248], "ascii_case_insensit": [624, 644, 1154, 1174], "aho": [624, 644, 1154, 1174], "corasick": [624, 644, 1154, 1174], "insensit": [624, 631, 642, 643, 644, 881, 1153, 1154, 1161, 1163, 1172, 1173, 1174], "set_fmt_str_length": [624, 644, 1154, 1174], "lyric": [624, 644, 1154, 1174], "everybodi": [624, 644, 1154, 1174], "tell": [624, 644, 1154, 1174], "me": [624, 644, 1154, 1174], "feel": [624, 644, 1154, 1174], "love": [624, 644, 1154, 1174], "tonight": [624, 644, 1154, 1174], "success": [625, 631, 1155, 1161], "overlap": [625, 631, 1155, 1161], "bla": [625, 631, 1155, 1161], "asd": [625, 631, 1155, 1161], "678": [625, 631, 1155, 1161], "910t": [625, 631, 1155, 1161], "count_digit": 625, "dbc": [625, 1155], "3xy": [625, 1155], "1zy3": [625, 1155], "strings_hex": 627, "666f6f": [627, 1157], "626172": [627, 1157], "mango": [628, 650, 1158, 1180], "has_suffix": 628, "le": [628, 769, 1232], "nu": 628, "group_index": [630, 1160], "captur": [630, 632, 642, 643, 1160, 1162, 1172, 1173], "nthose": [630, 1160], "nodd": [630, 1160], "nthe": [630, 1160], "odd": 630, "vote": [630, 632, 1160, 1162], "ballon_dor": [630, 632, 1160, 1162], "404": [630, 632, 1160, 1162], "ref": [630, 632, 1160, 1162], "unknown": [630, 729, 1160], "candid": [630, 632, 1160, 1162], "messi": [630, 632, 1160, 1162], "ronaldo": [630, 1160], "haystack": [631, 1161], "email": [631, 1161], "real": [631, 1161], "some_account": [631, 1161], "somewher": [631, 1161], "net": [631, 1161], "jkl": [631, 1161], "uvw": [631, 1161], "co": [631, 769, 1161, 1232, 1250], "uk": [631, 1161], "address": 631, "xi": [631, 1161], "quantifi": [631, 1161], "email_part": [631, 1161], "extracted_nr": 631, "unnam": [632, 1162], "weghorst": [632, 1162], "err": 632, "lobster": [633, 1163], "crustaceon": [633, 1163], "pat": [633, 1163], "bc": [633, 643, 752, 1163], "aeiuo": [633, 1163], "find_pat": 633, "fewer": [634, 657, 802, 875, 1164, 1187], "pear": [634, 646, 657, 1164, 1176, 1187], "papaya": [634, 646, 657, 1164, 1176, 1187], "dragonfruit": [634, 646, 657, 1164, 1176, 1187], "s_head_5": 634, "papai": [634, 1164], "drago": [634, 1164], "s_head_n": 634, "pea": 634, "papa": 634, "dragon": 634, "json_path_match": [636, 1166], "jsonpath": [636, 637, 1166, 1167], "json_path": [637, 1167], "json_val": [637, 1167], "len_char": [638, 1168], "_o": [638, 639, 1168, 1169], "caf\u00e9": [638, 639, 881, 1168, 1169], "345": [638, 639, 1168, 1169], "\u6771\u4eac": [638, 639, 881, 1168, 1169], "n_byte": [638, 639, 1252], "n_char": [638, 639, 1252], "fill_char": [640, 641, 1170, 1171], "pad": [640, 641, 666, 1170, 1171, 1196], "reach": [640, 641, 666, 1170, 1171, 1196], "pad_start": [640, 666, 1170, 1196], "cow": [640, 641, 1170, 1171], "monkei": [640, 641, 1170, 1171], "hippopotamu": [640, 641, 1170, 1171], "pad_end": [641, 1171], "zfill": [641, 686, 769, 1171], "replace_al": [642, 1172], "dollar": [642, 643, 1172, 1173], "123abc": [642, 1172, 1173], "abc456": [642, 1172, 1173, 1252], "hat": [642, 643, 1172, 1173], "hut": [642, 643, 1172, 1173], "vowel": [642, 643, 1172, 1173], "bad": [642, 643, 1172, 1173], "bud": [642, 643, 1172, 1173], "citi": [642, 643], "philadelphia": [642, 643], "season": [642, 643], "spring": [642, 643], "summer": [642, 643], "autumn": [642, 643], "winter": [642, 643], "weather": [642, 643, 1172, 1173], "raini": [642, 643, 1172, 1173], "sunni": [642, 643, 1172, 1173], "cloudi": [642, 643], "snowi": [642, 643], "foggi": [642, 643, 1172, 1173], "abcabc": 643, "123a123": 643, "replace_with": [644, 1174], "broadcast": [644, 881, 1174], "removes_pronoun": 644, "man": [645, 1175], "ana": [645, 1175], "oof": [645, 1175, 1248, 1252], "anan": [645, 1175], "am": [645, 1175], "ear": [646, 657, 1176], "aya": [646, 1176, 1187], "uit": [646, 1176], "ya": [646, 1176], "onf": [646, 1176], "foo_bar_baz": 647, "split_inclus": 647, "bar_": 647, "a_1": [648, 1178, 1208, 1232], "d_4": [648, 1178], "rename_field": [648, 649, 1178, 1179], "first_part": [648, 649, 1178, 1179], "second_part": [648, 649, 1178, 1179], "remaind": [649, 1179, 1251], "app": [650, 1180], "has_prefix": 650, "nworld": 651, "foo_strip": 651, "ow": 651, "hell": [651, 1181], "rld": [651, 653, 1183], "strip_suffix": [652, 654], "strip_chars_start": [652, 654], "foo_strip_end": 652, "oldw": 652, "he": 652, "abcdeff": 652, "fed": 652, "strip_prefix": [653, 655], "strip_chars_end": [653, 655], "tworld": [653, 1181, 1183], "foo_strip_start": 653, "wod": [653, 1183], "aabcdef": 653, "cba": 653, "foobar": [654, 655, 1184, 1185, 1252], "foofoobar": [654, 1184], "foobarbar": [655, 1185], "polarstemporaltyp": [656, 1186], "penalti": [656, 658, 659, 1186, 1188, 1189], "clean": [656, 658, 659, 1186, 1188, 1189], "beforehand": [656, 658, 659, 1186, 1188, 1189], "certainli": [656, 658, 659, 1186, 1188, 1189], "00z": [656, 659, 1186, 1189], "sun": [656, 1186], "jul": [656, 1186], "s_tail_5": 657, "apaya": [657, 1187], "s_tail_n": 657, "paya": 657, "nfruit": 657, "tz": [659, 1189], "inference_length": [660, 1190], "3420": [660, 1190], "120134": [660, 1190], "3212": [660, 1190], "143": [660, 1190, 1259], "numbers_decim": 660, "radix": [661, 1191], "parseerror": [661, 1191], "silent": [661, 1191], "110": [661, 1191], "fa1e": [661, 1191], "ff00": [661, 1191], "cafe": [661, 1191], "64030": [661, 1191], "65280": [661, 1191], "51966": [661, 1191], "variant": [662, 664, 665], "foo_low": [662, 1252], "titlecas": [664, 1194], "sing": [664, 1194], "welcom": [664, 1194], "THERE": [664, 1194], "NO": [664, 881, 1194], "foo_titl": 664, "There": [664, 1194], "foo_upp": [665, 1252], "999999": [666, 712, 755, 756, 757, 881, 1196], "0123": [666, 1196], "more_nam": [667, 765], "__getitem__": 667, "struct_col": [667, 669], "cd": [667, 669, 881], "expans": 667, "www": 669, "xxx": 669, "yyi": 669, "zzz": 669, "obvious": 669, "structfieldnotfounderror": 669, "coord": 670, "y_mul": 670, "761594": [675, 769, 1206, 1232], "replic": [676, 769, 1215, 1232], "vals_phys": [676, 769], "_top_by_a": [678, 769], "_top_by_b": [678, 769], "a_top_by_a": [678, 769], "b_top_by_a": [678, 769], "c_top_by_a": [678, 769], "a_top_by_b": [678, 769], "b_top_by_b": [678, 769], "c_top_by_b": [678, 769], "floordiv": [679, 769], "ieee": [679, 769], "754": [679, 769], "mathemat": [679, 716, 769, 1250], "undefin": [679, 769], "On": [679, 769], "operand": [679, 769], "infin": [679, 769], "value_count": [681, 769, 1232], "9223372036854775807": [682, 769], "proport": [683, 769, 1221, 1232], "binary_str": [686, 769], "250": [686, 769, 1124, 1232, 1249, 1259], "bin_x": [686, 769], "bin_i": [686, 769], "xor_xi": [686, 769], "bin_xor_xi": [686, 769], "00001010": [686, 769], "00001011": [686, 769], "00001000": [686, 769], "00000010": [686, 769], "11111010": [686, 769], "00000011": [686, 769], "249": [686, 769], "11111001": [686, 769], "01000010": [686, 769], "00000100": [686, 769], "01000110": [686, 769], "AND": [687, 688, 748, 881], "OR": [689, 690, 805, 875, 881], "any_horizont": 689, "polarsintegertyp": [692, 725, 726], "arctan": [693, 694, 769, 1232], "angl": [693, 694], "plane": [693, 694], "rai": [693, 694], "atan2": [693, 694, 1250], "356194": [693, 694, 1254], "arctan2": 694, "atan2d": [694, 1250], "135": [694, 1254], "arg_tru": [696, 769, 1232], "oppos": 697, "mimic": 699, "a_lag_": 699, "a_rol": 699, "swim": 700, "walk": 700, "full_sent": 700, "correlationmethod": 701, "propagate_nan": 701, "spearman": 701, "544705": 701, "covari": [703, 746, 769, 879], "acc": [705, 706, 719, 743], "include_init": 705, "accumul": [705, 706, 719, 743], "fn": [705, 706, 719, 743], "new_valu": [705, 706, 719, 743], "cum_reduc": 705, "cumsum_horizont": 707, "1w2d": [710, 711], "1985": [710, 713], "australia": 712, "sydnei": 712, "aedt": 712, "america": 713, "new_york": 713, "est": 713, "contrast": 715, "offset_bi": 715, "sometim": [715, 768], "tbl_width_char": 715, "120": [715, 1254], "add_week": 715, "add_dai": 715, "add_second": 715, "add_milli": 715, "add_hour": 715, "002": [715, 993, 994, 996], "add_calendar_dai": 715, "add_calendar_month": 715, "mo": 715, "add_calendar_year": 715, "a_b_doubl": 716, "presenc": [718, 727, 881, 1024, 1232], "f_string": 720, "placehold": 720, "hello_": 720, "_world": 720, "_bar_": 720, "foo_a_bar_1": 720, "foo_b_bar_2": 720, "foo_c_bar_3": 720, "timestep": 721, "1666683077": 721, "1666683099": 721, "12345": [721, 935, 1019, 1132, 1232], "12346": 721, "agg_group": [722, 769], "allow_object": 729, "valueexcept": 729, "test_func": 730, "list_of_seri": 731, "my_custom_aggreg": 731, "understood": 731, "lf1": [748, 841, 875, 1243, 1245, 1257], "lf2": [748, 841, 875, 1243, 1245, 1257], "888": [748, 841, 875], "freeli": [748, 841, 875, 881], "c_c_c": [748, 841, 875], "BY": [748, 841, 875, 1240, 1242, 1248, 1255], "pl_frame": 748, "pd_frame": 748, "pa_tabl": 748, "from_arrai": 748, "power": [749, 1232, 1251], "a_a": 749, "a_txt": 749, "605551": 750, "605551275463989": 750, "my_struct": 751, "statement": [759, 1244, 1257], "elif": 759, "met": 759, "own": [759, 1213, 1232, 1259], "isn": 759, "technic": 765, "further": 765, "columnfactori": 765, "__call__": 765, "lookup": 765, "__getattr__": 765, "idiomat": [765, 793, 799, 832, 850, 863, 875], "quick": [765, 950, 1232, 1259], "prototyp": 765, "keystrok": 765, "drawback": 765, "readabl": 765, "and_": 769, "arcco": [769, 1232], "arccosh": [769, 1232], "arcsin": [769, 1232], "arcsinh": [769, 1232], "arctanh": [769, 1232], "arg_max": [769, 1232], "arg_min": [769, 1232], "arg_sort": [769, 1232], "arg_uniqu": [769, 1232], "cbrt": [769, 1232, 1250], "clip": [769, 1232], "cosh": [769, 1232], "cot": [769, 1232, 1250], "cum_count": [769, 1232], "cum_max": [769, 1232], "cum_min": [769, 1232], "cumulative_ev": [769, 1232], "entropi": [769, 1232], "eq_miss": [769, 1232], "ewm_mean": [769, 1232], "ewm_mean_bi": [769, 1232], "ewm_std": [769, 1232], "ewm_var": [769, 1232], "extend_const": [769, 1232], "flatten": 769, "from_json": 769, "ge": [769, 1232], "has_nul": [769, 1024, 1232], "hist": [769, 1232, 1236], "implod": [769, 1232, 1248], "inspect": [769, 875], "interpolate_bi": [769, 1232], "is_between": [769, 1232], "is_finit": [769, 1232], "is_first_distinct": [769, 1232], "is_infinit": [769, 1232], "is_last_distinct": [769, 1232], "is_nan": [769, 1232], "is_not_nan": [769, 1232], "is_not_nul": [769, 1232], "kurtosi": [769, 1232], "log10": [769, 1232, 1250], "log1p": [769, 1232, 1250], "map_batch": [769, 875], "mod": [769, 1250], "mul": 769, "nan_max": [769, 1232], "nan_min": [769, 1232], "ne_miss": [769, 1232], "or_": 769, "pct_chang": [769, 1232], "peak_max": [769, 1232], "peak_min": [769, 1232], "pow": [769, 1232, 1250], "register_plugin": 769, "lib": [769, 1207, 1232], "input_wildcard_expans": [769, 879], "cast_to_supertyp": [769, 879], "pass_name_to_appli": [769, 879], "changes_length": [769, 879], "register_plugin_funct": [769, 879], "guid": [769, 879, 1259], "serializ": [769, 879], "ran": [769, 879], "highli": [769, 879], "unsaf": [769, 879], "reinterpret": [769, 1232], "repeat_bi": 769, "rolling_map": [769, 1232], "rolling_max": [769, 1232], "rolling_max_bi": 769, "rolling_mean": [769, 1232], "rolling_mean_bi": 769, "rolling_median": [769, 1232], "rolling_median_bi": 769, "rolling_min": [769, 1232], "rolling_min_bi": 769, "rolling_quantil": [769, 1232], "rolling_quantile_bi": 769, "rolling_skew": [769, 1232], "rolling_std": [769, 1232], "rolling_std_bi": 769, "rolling_sum_bi": 769, "rolling_var": [769, 1232], "rolling_var_bi": 769, "round_sig_fig": [769, 1232], "search_sort": [769, 1232], "shrink_dtyp": [769, 1232], "sin": [769, 1232, 1250], "sinh": [769, 1232], "tan": [769, 1232, 1250], "to_phys": [769, 932, 1232], "unique_count": [769, 1232], "xor": 769, "expos": 781, "miscellan": 781, "claus": [781, 1248, 1255], "parametr": 781, "hit": [786, 875], "node": [786, 790, 811, 818, 822, 827, 829, 875], "job": [786, 875], "_eager": [790, 875], "_kwarg": [790, 875], "inprocessqueri": [790, 875], "cancel": [790, 875], "set_streaming_chunk_s": [790, 875], "collect_all_async": [791, 875], "symmetri": [793, 799, 832, 850, 875], "snippet": [798, 875], "explainformat": [800, 875], "plain": [800, 875], "tree_format": [800, 875], "Be": [802, 875], "suscept": [802, 875], "lazygroupbi": [808, 809, 831, 875], "other_lf": [813, 875], "jan": [814, 875], "1st": [814, 875], "12th": [814, 875], "validate_output_schema": [818, 875], "streamabl": [818, 822, 875], "paramount": [818, 875], "elig": [818, 875], "invari": [818, 875], "upheld": [818, 875], "100_000": [818, 875], "199998": [818, 875], "199996": [818, 875], "199994": [818, 875], "199992": [818, 875], "show_plot": [827, 875], "truncate_nod": [827, 875], "figsiz": [827, 838, 875], "gantt": [827, 875], "group_by_partit": [827, 875], "470": [827, 875], "475": [827, 875], "1964": [827, 875], "swap": [829, 875], "mapfunct": [835, 875], "dataframescan": [835, 875], "output_schema": [835, 875], "output_path": [838, 875], "raw_output": [838, 875], "render": [838, 875], "wors": [840, 875], "290994": [842, 875], "118034": [842, 875], "new_lf": [848, 875], "extern": [853, 875], "lf_other": [853, 875], "afoo": [853, 875], "cfoo": [853, 875], "train_lf": [853, 875], "feature_0": [853, 875], "feature_1": [853, 875], "test_lf": [853, 875], "_train": [853, 875], "feature_0_train": [853, 875], "opaqu": 863, "my_column": 863, "struct_seri": 863, "lf3": [875, 1243], "lf4": [875, 1243], "lf5": 875, "lf6": 875, "sink_csv": 875, "sink_ipc": 875, "sink_ndjson": 875, "sink_parquet": 875, "with_context": 875, "resourc": 879, "plugin_path": 879, "function_nam": 879, "emploi": 881, "complement": 881, "plenti": 881, "cde": [881, 1252], "fgg": 881, "jjk": 881, "lmn": 881, "opp": 881, "qqr": 881, "by_dtyp": 881, "as_expr": 881, "dispatch": 881, "1_234_500": 881, "5_000_555": 881, "1234500": 881, "5000555": 881, "ascii_onli": 881, "ignore_spac": 881, "alphabet": [881, 1259], "accent": 881, "idiograph": 881, "no1": 881, "espresso": 881, "latt": 881, "mocha": 881, "hmm": 881, "\u90fd\u5e02": 881, "\u5927\u962a": 881, "\u4eac\u90fd": 881, "kanji": 881, "alphanumer": 881, "1st_col": 881, "00prefix": 881, "bb": [881, 950, 1232, 1252], "n_even": 881, "invert": 881, "by_nam": 881, "by_index": 881, "4_500_000": 881, "4500000": 881, "3265500": 881, "c00": 881, "c01": 881, "c02": 881, "c96": 881, "c97": 881, "c98": 881, "c99": 881, "c20": 881, "c40": 881, "c60": 881, "c80": 881, "c75": 881, "c50": 881, "c25": 881, "ones": 881, "51": 881, "c03": 881, "c05": 881, "c93": 881, "c95": 881, "46": 881, "require_al": 881, "zap": 881, "moos": 881, "bear": 881, "2031": 881, "tokyo_tz": 881, "utc_tz": 881, "tstamp_tokyo": 881, "123465": 881, "tstamp_utc": 881, "999000": 881, "666000": 881, "tstamp": 881, "600000": 881, "123000": 881, "666": 881, "0005": 881, "5555": 881, "00050": 881, "55550": 881, "\u0967\u096f\u096f\u096f": 881, "\u0968\u0966\u096d\u096d": 881, "3000": 881, "td1": 881, "987000": 881, "td2": 881, "456789": [881, 986], "td3": 881, "2m": [881, 976], "456m": 881, "7d": 881, "456789\u00b5": 881, "18d": 881, "999999\u00b5": 881, "23h": 881, "987m": 881, "14d": 881, "16h": 881, "39m": 881, "21d": 881, "456001\u00b5": 881, "simpler": 881, "expand_selector": 881, "broader": 881, "colz": [881, 1259], "desc": [881, 1240, 1242, 1246, 1248], "everyth": 881, "signed_integ": 881, "unsigned_integ": 881, "is_selector": 881, "obj": 881, "3456": 881, "7654": 881, "4321": 881, "include_categor": 881, "2345": 881, "292432": [889, 1232], "549306": [893, 1232], "innter": 907, "field_2": [920, 1086], "n00": [920, 1086], "n01": [920, 1086], "n02": [920, 1086], "hexadecim": [924, 925], "aaaa": [924, 925], "8a": [924, 925], "aad": [924, 925], "invalid_valu": 924, "44225": [934, 1232], "56789": [935, 1019, 1132, 1232], "901234": [935, 1019, 1132, 1232], "1232e": [940, 942, 1232], "1656e15": [942, 1232], "581139": [950, 1232], "arraylik": [952, 1232], "ser": [961, 962, 988], "kathmandu": [961, 962, 988], "0545": [961, 962, 988], "500m": [972, 974, 980], "date_minus_1y_2mon": 981, "165": [985, 998], "round_str": 985, "round_td": 985, "111110": 986, "765431": 986, "11111": 986, "timestamp_n": 989, "978307200000000000": 989, "978393600000000000": 989, "978480000000000000": 989, "005": [1004, 1232], "06293300616044681": [1004, 1232], "65": [1004, 1232], "8568409950394724": [1004, 1232], "4000000": [1006, 1232], "814697265625": [1006, 1232], "085537": [1011, 1232], "sorted_asc": [1018, 1232], "sorted_desc": [1018, 1232], "bitmask": [1024, 1232], "absenc": [1024, 1232], "confirm": [1024, 1232], "10734580197236529959": [1025, 1232], "3022416320763508302": [1025, 1232], "13756996518000038261": [1025, 1232], "grade": [1046, 1232], "79": [1046, 1232], "93": [1046, 1232], "0522623626787952": [1046, 1232], "9477376373212048": [1046, 1232], "1040361802642726": [1046, 1232], "2147483648": [1092, 1232], "pythonliter": [1094, 1095, 1096, 1097, 1135, 1232], "166667": [1107, 1232], "142857": [1107, 1232], "1152921504606846976": [1115, 1232], "17293822569102704640": [1115, 1232], "18446744073709551614": [1115, 1232], "150": [1124, 1232], "450": [1124, 1232], "dev": [1129, 1232], "527525": [1129, 1232], "frequent": [1135, 1137, 1232], "2246e": [1145, 1205, 1232], "34776706224699483": [1147, 1232], "732051": [1150, 1232], "idx_rx": 1163, "idx_lit": 1163, "3rd": [1164, 1187], "pap": 1164, "dragonfr": 1164, "orld": 1182, "gonfruit": 1187, "6331e16": [1205, 1232, 1254], "int64arrai": [1207, 1232], "a_2": [1208, 1232], "a_3": [1208, 1232], "s_from_str_repr": [1210, 1232], "zero_copy_onli": [1213, 1232], "127": [1220, 1232], "position": 1232, "scenario": 1232, "chunk_length": 1232, "get_chunk": 1232, "has_valid": 1232, "is_sort": 1232, "new_from_index": 1232, "histogram": [1232, 1236], "kde": [1232, 1236], "037037": 1232, "015625": 1232, "godfath": 1240, "1972": 1240, "6_000_000": 1240, "134_821_952": 1240, "dark": 1240, "knight": 1240, "2008": 1240, "185_000_000": 1240, "533_316_061": 1240, "schindler": 1240, "1993": 1240, "22_000_000": 1240, "96_067_179": 1240, "pulp": 1240, "fiction": 1240, "1994": 1240, "8_000_000": 1240, "107_930_000": 1240, "shawshank": 1240, "redempt": 1240, "25_000_000": 1240, "28_341_469": 1240, "release_year": 1240, "budget": 1240, "gross": 1240, "imdb_scor": 1240, "ctx": [1240, 1241, 1242, 1243, 1244, 1245], "film": 1240, "decad": [1240, 1253], "total_gross": 1240, "n_film": 1240, "533316061": 1240, "232338648": 1240, "134821952": 1240, "compatibleframetyp": [1241, 1243, 1256], "register_glob": [1241, 1243, 1245, 1256], "register_mani": [1241, 1242, 1245], "unregist": [1241, 1242, 1243, 1256], "frame_data": [1241, 1244], "all_compat": 1242, "named_fram": [1243, 1256], "tbl1": [1243, 1245], "tbl2": [1243, 1245], "tbl3": 1243, "tbl4": 1243, "hello_world": 1244, "hello_data": 1244, "persist": 1245, "tbl0": 1245, "misc": 1245, "testing1234": 1245, "test1": 1245, "test2": 1245, "test3": 1245, "delet": [1246, 1258], "greatest": [1247, 1250], "bar_avg": 1247, "n_bar": 1247, "n_foo_uniqu": 1247, "ff": 1247, "bar_max": 1247, "bar_median": 1247, "bar_min": 1247, "foo_std": 1247, "bar_std": 1247, "429101": 1247, "686241": 1247, "foo_sum": [1247, 1248], "bar_sum": 1247, "foo_var": 1247, "bar_var": 1247, "arr_foo": 1248, "arr_bar": 1248, "has_two": 1248, "foo_at_1": 1248, "bar_at_2": 1248, "n_elem": 1248, "min_elem": 1248, "foo_mean": 1248, "s_foo": 1248, "s_bar": 1248, "foo_uniqu": 1248, "max_elem": 1248, "expr1": 1249, "expr2": 1249, "avg": 1250, "stddev": 1250, "array_agg": 1250, "array_contain": 1250, "array_get": 1250, "array_length": 1250, "array_low": 1250, "array_mean": 1250, "array_revers": 1250, "array_sum": 1250, "array_to_str": 1250, "array_uniqu": 1250, "array_upp": 1250, "IF": 1250, "ifnul": 1250, "nullif": 1250, "div": 1250, "log2": 1250, "bit_length": 1250, "initcap": 1250, "ltrim": 1250, "octet_length": 1250, "regexp_lik": 1250, "rtrim": 1250, "strpo": 1250, "date_part": 1250, "trigonometri": [1250, 1255], "aco": 1250, "acosd": 1250, "asin": 1250, "asind": 1250, "atan": 1250, "atand": 1250, "cotd": 1250, "cosd": 1250, "sind": 1250, "tand": 1250, "quotient": 1251, "awai": 1251, "\ud835\udf0b": 1251, "abs_a": 1251, "cbrt_a": 1251, "ceil_a": 1251, "a_div_2": 1251, "a_div_5": 1251, "exp_a": 1251, "floor_a": 1251, "ln_a": 1251, "log16_a": 1251, "a_log2": 1251, "log10_a": 1251, "log1p_a": 1251, "609438": 1251, "a_mod_2": 1251, "x_pow_8": 1251, "65536": 1251, "81": 1251, "x_round": 1251, "x_round_1": 1251, "sign_x": 1251, "4096": 1251, "sqrt_x": 1251, "togeth": 1252, "interleav": 1252, "capit": 1252, "strpost": 1252, "portion": 1252, "dddd": 1252, "n_bit": 1252, "ww": [1252, 1258], "aazz": 1252, "byi": 1252, "cxx": 1252, "ddww": 1252, "ends_a": 1252, "abcd": 1252, "efgh": 1252, "ijkl": 1252, "mnop": 1252, "foo1": 1252, "bar2": 1252, "iso_lang": 1252, "de": 1252, "ru": 1252, "wei\u00df": 1252, "\u0441\u0438\u043d\u0438\u0439": 1252, "amarillo": 1252, "abc123": 1252, "4ab4a": 1252, "321cba": 1252, "ends_in_digit": 1252, "11aabb": 1252, "bcbc45": 1252, "c123": 1252, "11aa": 1252, "c45": 1252, "grape": 1252, "elppa": 1252, "ananab": 1252, "egnaro": 1252, "eparg": 1252, "fghi": 1252, "jklmn": 1252, "mn": 1252, "avocado": 1252, "starts_a": 1252, "pos_a": 1252, "foo_3_4": 1252, "ple": 1252, "nana": 1252, "ang": 1252, "ap": 1252, "8601": 1253, "str_date": 1253, "1969": 1253, "millennium": 1253, "millennia": 1253, "centuri": 1253, "isoyear": 1253, "mon": 1253, "dayofyear": 1253, "doi": 1253, "dayofweek": 1253, "dow": 1253, "isoweek": 1253, "isodow": 1253, "sec": [1253, 1259], "2026": 1253, "196": 1253, "202": 1253, "207": 1253, "rad": 1254, "094395": 1254, "047198": 1254, "deg": 1254, "848062": 1254, "523599": 1254, "107149": 1254, "atan2_ab": 1254, "927295": 1254, "270": 1254, "atan2d_ab": 1254, "434949": 1254, "963757": 1254, "457658": 1254, "642093": 1254, "636253": 1254, "289962": 1254, "416147": 1254, "540302": 1254, "712389": 1254, "execute_glob": 1256, "two_a": 1256, "__enter__": 1256, "__exit__": 1256, "exc_typ": 1256, "baseexcept": 1256, "exc_val": 1256, "exc_tb": 1256, "tracebacktyp": 1256, "compos": 1257, "david": 1257, "new_tabl": 1258, "old_tabl": 1258, "machin": 1259, "xdist": 1259, "hardwar": 1259, "setup": 1259, "numeric_dtyp": 1259, "test_numer": 1259, "is_numer": 1259, "col4": 1259, "29096": 1259, "485": 1259, "2147483647": 1259, "8257e14": 1259, "7508": 1259, "37338": 1259, "7264": 1259, "16996": 1259, "121": 1259, "361": 1259, "63204": 1259, "1443e235": 1259, "conform": 1259, "st": 1259, "ascii_lett": 1259, "id_char": 1259, "ccy": 1259, "sampled_from": 1259, "gbp": 1259, "jpy": 1259, "price": 1259, "min_valu": 1259, "max_valu": 1259, "test_price_calcul": 1259, "a101": 1259, "8nin": 1259, "qhoo": 1259, "714": 1259, "544": 1259, "i0e0": 1259, "uint8_pair": 1259, "drawfn": 1259, "uint": 1259, "zip": 1259, "test_miscellan": 1259, "235": 1259, "87": 1259, "186": 1259, "174": 1259, "179": 1259, "213": 1259, "149": 1259, "221": 1259, "86": 1259, "255": 1259}, "objects": {"polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[169, 0, 1, "", "__dataframe__"], [170, 0, 1, "", "approx_n_unique"], [171, 0, 1, "", "bottom_k"], [172, 0, 1, "", "cast"], [173, 0, 1, "", "clear"], [174, 0, 1, "", "clone"], [175, 0, 1, "", "collect_schema"], [176, 1, 1, "", "columns"], [177, 0, 1, "", "corr"], [178, 0, 1, "", "count"], [179, 0, 1, "", "describe"], [180, 0, 1, "", "deserialize"], [181, 0, 1, "", "drop"], [182, 0, 1, "", "drop_in_place"], [183, 0, 1, "", "drop_nulls"], [184, 1, 1, "", "dtypes"], [185, 0, 1, "", "equals"], [186, 0, 1, "", "estimated_size"], [187, 0, 1, "", "explode"], [188, 0, 1, "", "extend"], [189, 0, 1, "", "fill_nan"], [190, 0, 1, "", "fill_null"], [191, 0, 1, "", "filter"], [192, 1, 1, "", "flags"], [193, 0, 1, "", "fold"], [194, 0, 1, "", "gather_every"], [195, 0, 1, "", "get_column"], [196, 0, 1, "", "get_column_index"], [197, 0, 1, "", "get_columns"], [198, 0, 1, "", "glimpse"], [199, 0, 1, "", "group_by"], [200, 0, 1, "", "group_by_dynamic"], [201, 0, 1, "", "hash_rows"], [202, 0, 1, "", "head"], [203, 1, 1, "", "height"], [204, 0, 1, "", "hstack"], [205, 0, 1, "", "insert_column"], [206, 0, 1, "", "interpolate"], [207, 0, 1, "", "is_duplicated"], [208, 0, 1, "", "is_empty"], [209, 0, 1, "", "is_unique"], [210, 0, 1, "", "item"], [211, 0, 1, "", "iter_columns"], [212, 0, 1, "", "iter_rows"], [213, 0, 1, "", "iter_slices"], [214, 0, 1, "", "join"], [215, 0, 1, "", "join_asof"], [216, 0, 1, "", "lazy"], [217, 0, 1, "", "limit"], [218, 0, 1, "", "map_rows"], [219, 0, 1, "", "max"], [220, 0, 1, "", "max_horizontal"], [221, 0, 1, "", "mean"], [222, 0, 1, "", "mean_horizontal"], [223, 0, 1, "", "median"], [224, 0, 1, "", "melt"], [225, 0, 1, "", "merge_sorted"], [226, 0, 1, "", "min"], [227, 0, 1, "", "min_horizontal"], [228, 0, 1, "", "n_chunks"], [229, 0, 1, "", "n_unique"], [230, 0, 1, "", "null_count"], [231, 0, 1, "", "partition_by"], [232, 0, 1, "", "pipe"], [233, 0, 1, "", "pivot"], [234, 0, 1, "", "product"], [235, 0, 1, "", "quantile"], [236, 0, 1, "", "rechunk"], [237, 0, 1, "", "rename"], [238, 0, 1, "", "replace_column"], [239, 0, 1, "", "reverse"], [240, 0, 1, "", "rolling"], [241, 0, 1, "", "row"], [242, 0, 1, "", "rows"], [243, 0, 1, "", "rows_by_key"], [244, 0, 1, "", "sample"], [245, 1, 1, "", "schema"], [246, 0, 1, "", "select"], [247, 0, 1, "", "select_seq"], [248, 0, 1, "", "serialize"], [249, 0, 1, "", "set_sorted"], [250, 1, 1, "", "shape"], [251, 0, 1, "", "shift"], [252, 0, 1, "", "shrink_to_fit"], [253, 0, 1, "", "slice"], [254, 0, 1, "", "sort"], [255, 0, 1, "", "sql"], [256, 0, 1, "", "std"], [311, 1, 1, "", "style"], [257, 0, 1, "", "sum"], [258, 0, 1, "", "sum_horizontal"], [259, 0, 1, "", "tail"], [260, 0, 1, "", "to_arrow"], [261, 0, 1, "", "to_dict"], [262, 0, 1, "", "to_dicts"], [263, 0, 1, "", "to_dummies"], [264, 0, 1, "", "to_init_repr"], [265, 0, 1, "", "to_jax"], [266, 0, 1, "", "to_numpy"], [267, 0, 1, "", "to_pandas"], [268, 0, 1, "", "to_series"], [269, 0, 1, "", "to_struct"], [270, 0, 1, "", "to_torch"], [271, 0, 1, "", "top_k"], [272, 0, 1, "", "transpose"], [273, 0, 1, "", "unique"], [274, 0, 1, "", "unnest"], [275, 0, 1, "", "unstack"], [276, 0, 1, "", "update"], [277, 0, 1, "", "upsample"], [278, 0, 1, "", "var"], [279, 0, 1, "", "vstack"], [280, 1, 1, "", "width"], [281, 0, 1, "", "with_columns"], [282, 0, 1, "", "with_columns_seq"], [283, 0, 1, "", "with_row_count"], [284, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[315, 0, 1, "", "abs"], [316, 0, 1, "", "add"], [317, 0, 1, "", "agg_groups"], [318, 0, 1, "", "alias"], [319, 0, 1, "", "all"], [320, 0, 1, "", "and_"], [321, 0, 1, "", "any"], [322, 0, 1, "", "append"], [323, 0, 1, "", "approx_n_unique"], [324, 0, 1, "", "arccos"], [325, 0, 1, "", "arccosh"], [326, 0, 1, "", "arcsin"], [327, 0, 1, "", "arcsinh"], [328, 0, 1, "", "arctan"], [329, 0, 1, "", "arctanh"], [330, 0, 1, "", "arg_max"], [331, 0, 1, "", "arg_min"], [332, 0, 1, "", "arg_sort"], [333, 0, 1, "", "arg_true"], [334, 0, 1, "", "arg_unique"], [359, 0, 1, "", "backward_fill"], [365, 0, 1, "", "bottom_k"], [366, 0, 1, "", "bottom_k_by"], [367, 0, 1, "", "cast"], [369, 0, 1, "", "cbrt"], [370, 0, 1, "", "ceil"], [371, 0, 1, "", "clip"], [372, 0, 1, "", "cos"], [373, 0, 1, "", "cosh"], [374, 0, 1, "", "cot"], [375, 0, 1, "", "count"], [376, 0, 1, "", "cum_count"], [377, 0, 1, "", "cum_max"], [378, 0, 1, "", "cum_min"], [379, 0, 1, "", "cum_prod"], [380, 0, 1, "", "cum_sum"], [381, 0, 1, "", "cumulative_eval"], [382, 0, 1, "", "cut"], [383, 0, 1, "", "degrees"], [384, 0, 1, "", "deserialize"], [385, 0, 1, "", "diff"], [386, 0, 1, "", "dot"], [387, 0, 1, "", "drop_nans"], [388, 0, 1, "", "drop_nulls"], [433, 0, 1, "", "entropy"], [434, 0, 1, "", "eq"], [435, 0, 1, "", "eq_missing"], [436, 0, 1, "", "ewm_mean"], [437, 0, 1, "", "ewm_mean_by"], [438, 0, 1, "", "ewm_std"], [439, 0, 1, "", "ewm_var"], [440, 0, 1, "", "exclude"], [441, 0, 1, "", "exp"], [442, 0, 1, "", "explode"], [443, 0, 1, "", "extend_constant"], [444, 0, 1, "", "fill_nan"], [445, 0, 1, "", "fill_null"], [446, 0, 1, "", "filter"], [447, 0, 1, "", "first"], [448, 0, 1, "", "flatten"], [449, 0, 1, "", "floor"], [450, 0, 1, "", "floordiv"], [451, 0, 1, "", "forward_fill"], [452, 0, 1, "", "from_json"], [453, 0, 1, "", "gather"], [454, 0, 1, "", "gather_every"], [455, 0, 1, "", "ge"], [456, 0, 1, "", "get"], [457, 0, 1, "", "gt"], [458, 0, 1, "", "has_nulls"], [459, 0, 1, "", "hash"], [460, 0, 1, "", "head"], [461, 0, 1, "", "hist"], [462, 0, 1, "", "implode"], [463, 0, 1, "", "inspect"], [464, 0, 1, "", "interpolate"], [465, 0, 1, "", "interpolate_by"], [466, 0, 1, "", "is_between"], [467, 0, 1, "", "is_duplicated"], [468, 0, 1, "", "is_finite"], [469, 0, 1, "", "is_first_distinct"], [470, 0, 1, "", "is_in"], [471, 0, 1, "", "is_infinite"], [472, 0, 1, "", "is_last_distinct"], [473, 0, 1, "", "is_nan"], [474, 0, 1, "", "is_not_nan"], [475, 0, 1, "", "is_not_null"], [476, 0, 1, "", "is_null"], [477, 0, 1, "", "is_unique"], [478, 0, 1, "", "kurtosis"], [479, 0, 1, "", "last"], [480, 0, 1, "", "le"], [481, 0, 1, "", "len"], [482, 0, 1, "", "limit"], [523, 0, 1, "", "log"], [524, 0, 1, "", "log10"], [525, 0, 1, "", "log1p"], [526, 0, 1, "", "lower_bound"], [527, 0, 1, "", "lt"], [528, 0, 1, "", "map_batches"], [529, 0, 1, "", "map_elements"], [530, 0, 1, "", "max"], [531, 0, 1, "", "mean"], [532, 0, 1, "", "median"], [545, 0, 1, "", "min"], [546, 0, 1, "", "mod"], [547, 0, 1, "", "mode"], [548, 0, 1, "", "mul"], [549, 0, 1, "", "n_unique"], [559, 0, 1, "", "nan_max"], [560, 0, 1, "", "nan_min"], [561, 0, 1, "", "ne"], [562, 0, 1, "", "ne_missing"], [563, 0, 1, "", "neg"], [564, 0, 1, "", "not_"], [565, 0, 1, "", "null_count"], [566, 0, 1, "", "or_"], [567, 0, 1, "", "over"], [568, 0, 1, "", "pct_change"], [569, 0, 1, "", "peak_max"], [570, 0, 1, "", "peak_min"], [571, 0, 1, "", "pipe"], [572, 0, 1, "", "pow"], [573, 0, 1, "", "product"], [574, 0, 1, "", "qcut"], [575, 0, 1, "", "quantile"], [576, 0, 1, "", "radians"], [577, 0, 1, "", "rank"], [578, 0, 1, "", "rechunk"], [579, 0, 1, "", "reinterpret"], [580, 0, 1, "", "repeat_by"], [581, 0, 1, "", "replace"], [582, 0, 1, "", "reshape"], [583, 0, 1, "", "reverse"], [584, 0, 1, "", "rle"], [585, 0, 1, "", "rle_id"], [586, 0, 1, "", "rolling"], [587, 0, 1, "", "rolling_map"], [588, 0, 1, "", "rolling_max"], [589, 0, 1, "", "rolling_max_by"], [590, 0, 1, "", "rolling_mean"], [591, 0, 1, "", "rolling_mean_by"], [592, 0, 1, "", "rolling_median"], [593, 0, 1, "", "rolling_median_by"], [594, 0, 1, "", "rolling_min"], [595, 0, 1, "", "rolling_min_by"], [596, 0, 1, "", "rolling_quantile"], [597, 0, 1, "", "rolling_quantile_by"], [598, 0, 1, "", "rolling_skew"], [599, 0, 1, "", "rolling_std"], [600, 0, 1, "", "rolling_std_by"], [601, 0, 1, "", "rolling_sum"], [602, 0, 1, "", "rolling_sum_by"], [603, 0, 1, "", "rolling_var"], [604, 0, 1, "", "rolling_var_by"], [605, 0, 1, "", "round"], [606, 0, 1, "", "round_sig_figs"], [607, 0, 1, "", "sample"], [608, 0, 1, "", "search_sorted"], [609, 0, 1, "", "set_sorted"], [610, 0, 1, "", "shift"], [611, 0, 1, "", "shrink_dtype"], [612, 0, 1, "", "shuffle"], [613, 0, 1, "", "sign"], [614, 0, 1, "", "sin"], [615, 0, 1, "", "sinh"], [616, 0, 1, "", "skew"], [617, 0, 1, "", "slice"], [618, 0, 1, "", "sort"], [619, 0, 1, "", "sort_by"], [620, 0, 1, "", "sqrt"], [621, 0, 1, "", "std"], [671, 0, 1, "", "sub"], [672, 0, 1, "", "sum"], [673, 0, 1, "", "tail"], [674, 0, 1, "", "tan"], [675, 0, 1, "", "tanh"], [676, 0, 1, "", "to_physical"], [677, 0, 1, "", "top_k"], [678, 0, 1, "", "top_k_by"], [679, 0, 1, "", "truediv"], [680, 0, 1, "", "unique"], [681, 0, 1, "", "unique_counts"], [682, 0, 1, "", "upper_bound"], [683, 0, 1, "", "value_counts"], [684, 0, 1, "", "var"], [685, 0, 1, "", "where"], [686, 0, 1, "", "xor"]], "polars.Expr.arr": [[335, 0, 1, "", "all"], [336, 0, 1, "", "any"], [337, 0, 1, "", "arg_max"], [338, 0, 1, "", "arg_min"], [339, 0, 1, "", "contains"], [340, 0, 1, "", "count_matches"], [341, 0, 1, "", "explode"], [342, 0, 1, "", "first"], [343, 0, 1, "", "get"], [344, 0, 1, "", "join"], [345, 0, 1, "", "last"], [346, 0, 1, "", "max"], [347, 0, 1, "", "median"], [348, 0, 1, "", "min"], [349, 0, 1, "", "n_unique"], [350, 0, 1, "", "reverse"], [351, 0, 1, "", "shift"], [352, 0, 1, "", "sort"], [353, 0, 1, "", "std"], [354, 0, 1, "", "sum"], [355, 0, 1, "", "to_list"], [356, 0, 1, "", "to_struct"], [357, 0, 1, "", "unique"], [358, 0, 1, "", "var"]], "polars.Expr.bin": [[360, 0, 1, "", "contains"], [361, 0, 1, "", "decode"], [362, 0, 1, "", "encode"], [363, 0, 1, "", "ends_with"], [364, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[368, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[389, 0, 1, "", "add_business_days"], [390, 0, 1, "", "base_utc_offset"], [391, 0, 1, "", "cast_time_unit"], [392, 0, 1, "", "century"], [393, 0, 1, "", "combine"], [394, 0, 1, "", "convert_time_zone"], [395, 0, 1, "", "date"], [396, 0, 1, "", "datetime"], [397, 0, 1, "", "day"], [398, 0, 1, "", "dst_offset"], [399, 0, 1, "", "epoch"], [400, 0, 1, "", "hour"], [401, 0, 1, "", "is_leap_year"], [402, 0, 1, "", "iso_year"], [403, 0, 1, "", "microsecond"], [404, 0, 1, "", "millennium"], [405, 0, 1, "", "millisecond"], [406, 0, 1, "", "minute"], [407, 0, 1, "", "month"], [408, 0, 1, "", "month_end"], [409, 0, 1, "", "month_start"], [410, 0, 1, "", "nanosecond"], [411, 0, 1, "", "offset_by"], [412, 0, 1, "", "ordinal_day"], [413, 0, 1, "", "quarter"], [414, 0, 1, "", "replace_time_zone"], [415, 0, 1, "", "round"], [416, 0, 1, "", "second"], [417, 0, 1, "", "strftime"], [418, 0, 1, "", "time"], [419, 0, 1, "", "timestamp"], [420, 0, 1, "", "to_string"], [421, 0, 1, "", "total_days"], [422, 0, 1, "", "total_hours"], [423, 0, 1, "", "total_microseconds"], [424, 0, 1, "", "total_milliseconds"], [425, 0, 1, "", "total_minutes"], [426, 0, 1, "", "total_nanoseconds"], [427, 0, 1, "", "total_seconds"], [428, 0, 1, "", "truncate"], [429, 0, 1, "", "week"], [430, 0, 1, "", "weekday"], [431, 0, 1, "", "with_time_unit"], [432, 0, 1, "", "year"]], "polars.Expr.list": [[483, 0, 1, "", "all"], [484, 0, 1, "", "any"], [485, 0, 1, "", "arg_max"], [486, 0, 1, "", "arg_min"], [487, 0, 1, "", "concat"], [488, 0, 1, "", "contains"], [489, 0, 1, "", "count_matches"], [490, 0, 1, "", "diff"], [491, 0, 1, "", "drop_nulls"], [492, 0, 1, "", "eval"], [493, 0, 1, "", "explode"], [494, 0, 1, "", "first"], [495, 0, 1, "", "gather"], [496, 0, 1, "", "gather_every"], [497, 0, 1, "", "get"], [498, 0, 1, "", "head"], [499, 0, 1, "", "join"], [500, 0, 1, "", "last"], [501, 0, 1, "", "len"], [502, 0, 1, "", "max"], [503, 0, 1, "", "mean"], [504, 0, 1, "", "median"], [505, 0, 1, "", "min"], [506, 0, 1, "", "n_unique"], [507, 0, 1, "", "reverse"], [508, 0, 1, "", "sample"], [509, 0, 1, "", "set_difference"], [510, 0, 1, "", "set_intersection"], [511, 0, 1, "", "set_symmetric_difference"], [512, 0, 1, "", "set_union"], [513, 0, 1, "", "shift"], [514, 0, 1, "", "slice"], [515, 0, 1, "", "sort"], [516, 0, 1, "", "std"], [517, 0, 1, "", "sum"], [518, 0, 1, "", "tail"], [519, 0, 1, "", "to_array"], [520, 0, 1, "", "to_struct"], [521, 0, 1, "", "unique"], [522, 0, 1, "", "var"]], "polars.Expr.meta": [[533, 0, 1, "", "eq"], [534, 0, 1, "", "has_multiple_outputs"], [535, 0, 1, "", "is_column_selection"], [536, 0, 1, "", "is_regex_projection"], [537, 0, 1, "", "ne"], [538, 0, 1, "", "output_name"], [539, 0, 1, "", "pop"], [540, 0, 1, "", "root_names"], [541, 0, 1, "", "serialize"], [542, 0, 1, "", "tree_format"], [543, 0, 1, "", "undo_aliases"], [544, 0, 1, "", "write_json"]], "polars.Expr.name": [[550, 0, 1, "", "keep"], [551, 0, 1, "", "map"], [552, 0, 1, "", "map_fields"], [553, 0, 1, "", "prefix"], [554, 0, 1, "", "prefix_fields"], [555, 0, 1, "", "suffix"], [556, 0, 1, "", "suffix_fields"], [557, 0, 1, "", "to_lowercase"], [558, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[622, 0, 1, "", "concat"], [623, 0, 1, "", "contains"], [624, 0, 1, "", "contains_any"], [625, 0, 1, "", "count_matches"], [626, 0, 1, "", "decode"], [627, 0, 1, "", "encode"], [628, 0, 1, "", "ends_with"], [629, 0, 1, "", "explode"], [630, 0, 1, "", "extract"], [631, 0, 1, "", "extract_all"], [632, 0, 1, "", "extract_groups"], [633, 0, 1, "", "find"], [634, 0, 1, "", "head"], [635, 0, 1, "", "join"], [636, 0, 1, "", "json_decode"], [637, 0, 1, "", "json_path_match"], [638, 0, 1, "", "len_bytes"], [639, 0, 1, "", "len_chars"], [640, 0, 1, "", "pad_end"], [641, 0, 1, "", "pad_start"], [642, 0, 1, "", "replace"], [643, 0, 1, "", "replace_all"], [644, 0, 1, "", "replace_many"], [645, 0, 1, "", "reverse"], [646, 0, 1, "", "slice"], [647, 0, 1, "", "split"], [648, 0, 1, "", "split_exact"], [649, 0, 1, "", "splitn"], [650, 0, 1, "", "starts_with"], [651, 0, 1, "", "strip_chars"], [652, 0, 1, "", "strip_chars_end"], [653, 0, 1, "", "strip_chars_start"], [654, 0, 1, "", "strip_prefix"], [655, 0, 1, "", "strip_suffix"], [656, 0, 1, "", "strptime"], [657, 0, 1, "", "tail"], [658, 0, 1, "", "to_date"], [659, 0, 1, "", "to_datetime"], [660, 0, 1, "", "to_decimal"], [661, 0, 1, "", "to_integer"], [662, 0, 1, "", "to_lowercase"], [663, 0, 1, "", "to_time"], [664, 0, 1, "", "to_titlecase"], [665, 0, 1, "", "to_uppercase"], [666, 0, 1, "", "zfill"]], "polars.Expr.struct": [[667, 0, 1, "", "field"], [668, 0, 1, "", "json_encode"], [669, 0, 1, "", "rename_fields"], [670, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[784, 0, 1, "", "approx_n_unique"], [785, 0, 1, "", "bottom_k"], [786, 0, 1, "", "cache"], [787, 0, 1, "", "cast"], [788, 0, 1, "", "clear"], [789, 0, 1, "", "clone"], [790, 0, 1, "", "collect"], [791, 0, 1, "", "collect_async"], [792, 0, 1, "", "collect_schema"], [793, 1, 1, "", "columns"], [794, 0, 1, "", "count"], [795, 0, 1, "", "describe"], [796, 0, 1, "", "deserialize"], [797, 0, 1, "", "drop"], [798, 0, 1, "", "drop_nulls"], [799, 1, 1, "", "dtypes"], [800, 0, 1, "", "explain"], [801, 0, 1, "", "explode"], [802, 0, 1, "", "fetch"], [803, 0, 1, "", "fill_nan"], [804, 0, 1, "", "fill_null"], [805, 0, 1, "", "filter"], [806, 0, 1, "", "first"], [807, 0, 1, "", "gather_every"], [808, 0, 1, "", "group_by"], [809, 0, 1, "", "group_by_dynamic"], [810, 0, 1, "", "head"], [811, 0, 1, "", "inspect"], [812, 0, 1, "", "interpolate"], [813, 0, 1, "", "join"], [814, 0, 1, "", "join_asof"], [815, 0, 1, "", "last"], [816, 0, 1, "", "lazy"], [817, 0, 1, "", "limit"], [818, 0, 1, "", "map_batches"], [819, 0, 1, "", "max"], [820, 0, 1, "", "mean"], [821, 0, 1, "", "median"], [822, 0, 1, "", "melt"], [823, 0, 1, "", "merge_sorted"], [824, 0, 1, "", "min"], [825, 0, 1, "", "null_count"], [826, 0, 1, "", "pipe"], [827, 0, 1, "", "profile"], [828, 0, 1, "", "quantile"], [829, 0, 1, "", "rename"], [830, 0, 1, "", "reverse"], [831, 0, 1, "", "rolling"], [832, 1, 1, "", "schema"], [833, 0, 1, "", "select"], [834, 0, 1, "", "select_seq"], [835, 0, 1, "", "serialize"], [836, 0, 1, "", "set_sorted"], [837, 0, 1, "", "shift"], [838, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [839, 0, 1, "", "slice"], [840, 0, 1, "", "sort"], [841, 0, 1, "", "sql"], [842, 0, 1, "", "std"], [843, 0, 1, "", "sum"], [844, 0, 1, "", "tail"], [845, 0, 1, "", "top_k"], [846, 0, 1, "", "unique"], [847, 0, 1, "", "unnest"], [848, 0, 1, "", "update"], [849, 0, 1, "", "var"], [850, 1, 1, "", "width"], [851, 0, 1, "", "with_columns"], [852, 0, 1, "", "with_columns_seq"], [853, 0, 1, "", "with_context"], [854, 0, 1, "", "with_row_count"], [855, 0, 1, "", "with_row_index"]], "polars": [[1256, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [687, 4, 1, "", "all"], [688, 4, 1, "", "all_horizontal"], [689, 4, 1, "", "any"], [690, 4, 1, "", "any_horizontal"], [691, 4, 1, "", "approx_n_unique"], [692, 4, 1, "", "arange"], [693, 4, 1, "", "arctan2"], [694, 4, 1, "", "arctan2d"], [695, 4, 1, "", "arg_sort_by"], [696, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [697, 4, 1, "", "business_day_count"], [698, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [699, 4, 1, "", "concat_list"], [700, 4, 1, "", "concat_str"], [701, 4, 1, "", "corr"], [702, 4, 1, "", "count"], [703, 4, 1, "", "cov"], [704, 4, 1, "", "cum_count"], [705, 4, 1, "", "cum_fold"], [706, 4, 1, "", "cum_reduce"], [707, 4, 1, "", "cum_sum"], [708, 4, 1, "", "cum_sum_horizontal"], [709, 4, 1, "", "date"], [710, 4, 1, "", "date_range"], [711, 4, 1, "", "date_ranges"], [712, 4, 1, "", "datetime"], [713, 4, 1, "", "datetime_range"], [714, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [715, 4, 1, "", "duration"], [716, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [717, 4, 1, "", "exclude"], [718, 4, 1, "", "first"], [719, 4, 1, "", "fold"], [720, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [721, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [722, 4, 1, "", "groups"], [723, 4, 1, "", "head"], [724, 4, 1, "", "implode"], [725, 4, 1, "", "int_range"], [726, 4, 1, "", "int_ranges"], [727, 4, 1, "", "last"], [728, 4, 1, "", "len"], [729, 4, 1, "", "lit"], [730, 4, 1, "", "map_batches"], [731, 4, 1, "", "map_groups"], [732, 4, 1, "", "max"], [733, 4, 1, "", "max_horizontal"], [734, 4, 1, "", "mean"], [735, 4, 1, "", "mean_horizontal"], [736, 4, 1, "", "median"], [737, 4, 1, "", "min"], [738, 4, 1, "", "min_horizontal"], [739, 4, 1, "", "n_unique"], [740, 4, 1, "", "nth"], [741, 4, 1, "", "ones"], [879, 6, 0, "-", "plugins"], [742, 4, 1, "", "quantile"], [126, 4, 1, "", "read_avro"], [127, 4, 1, "", "read_clipboard"], [128, 4, 1, "", "read_csv"], [129, 4, 1, "", "read_csv_batched"], [130, 4, 1, "", "read_database"], [131, 4, 1, "", "read_database_uri"], [132, 4, 1, "", "read_delta"], [133, 4, 1, "", "read_excel"], [134, 4, 1, "", "read_ipc"], [135, 4, 1, "", "read_ipc_schema"], [136, 4, 1, "", "read_ipc_stream"], [137, 4, 1, "", "read_json"], [138, 4, 1, "", "read_ndjson"], [139, 4, 1, "", "read_ods"], [140, 4, 1, "", "read_parquet"], [141, 4, 1, "", "read_parquet_schema"], [743, 4, 1, "", "reduce"], [744, 4, 1, "", "repeat"], [745, 4, 1, "", "rolling_corr"], [746, 4, 1, "", "rolling_cov"], [142, 4, 1, "", "scan_csv"], [143, 4, 1, "", "scan_delta"], [144, 4, 1, "", "scan_iceberg"], [145, 4, 1, "", "scan_ipc"], [146, 4, 1, "", "scan_ndjson"], [147, 4, 1, "", "scan_parquet"], [148, 4, 1, "", "scan_pyarrow_dataset"], [747, 4, 1, "", "select"], [881, 6, 0, "-", "selectors"], [149, 4, 1, "", "set_random_seed"], [150, 4, 1, "", "show_versions"], [748, 4, 1, "", "sql"], [749, 4, 1, "", "sql_expr"], [750, 4, 1, "", "std"], [751, 4, 1, "", "struct"], [752, 4, 1, "", "sum"], [753, 4, 1, "", "sum_horizontal"], [754, 4, 1, "", "tail"], [164, 4, 1, "", "thread_pool_size"], [165, 4, 1, "", "threadpool_size"], [755, 4, 1, "", "time"], [756, 4, 1, "", "time_range"], [757, 4, 1, "", "time_ranges"], [166, 4, 1, "", "using_string_cache"], [758, 4, 1, "", "var"], [759, 4, 1, "", "when"], [760, 4, 1, "", "zeros"]], "polars.SQLContext": [[1256, 0, 1, "", "__enter__"], [1256, 0, 1, "", "__exit__"], [1256, 0, 1, "", "__init__"], [1240, 0, 1, "", "execute"], [1241, 0, 1, "", "register"], [1242, 0, 1, "", "register_globals"], [1243, 0, 1, "", "register_many"], [1244, 0, 1, "", "tables"], [1245, 0, 1, "", "unregister"]], "polars.Series": [[883, 0, 1, "", "abs"], [884, 0, 1, "", "alias"], [885, 0, 1, "", "all"], [886, 0, 1, "", "any"], [887, 0, 1, "", "append"], [888, 0, 1, "", "arccos"], [889, 0, 1, "", "arccosh"], [890, 0, 1, "", "arcsin"], [891, 0, 1, "", "arcsinh"], [892, 0, 1, "", "arctan"], [893, 0, 1, "", "arctanh"], [894, 0, 1, "", "arg_max"], [895, 0, 1, "", "arg_min"], [896, 0, 1, "", "arg_sort"], [897, 0, 1, "", "arg_true"], [898, 0, 1, "", "arg_unique"], [928, 0, 1, "", "bottom_k"], [929, 0, 1, "", "cast"], [934, 0, 1, "", "cbrt"], [935, 0, 1, "", "ceil"], [936, 0, 1, "", "chunk_lengths"], [937, 0, 1, "", "clear"], [938, 0, 1, "", "clip"], [939, 0, 1, "", "clone"], [940, 0, 1, "", "cos"], [941, 0, 1, "", "cosh"], [942, 0, 1, "", "cot"], [943, 0, 1, "", "cum_count"], [944, 0, 1, "", "cum_max"], [945, 0, 1, "", "cum_min"], [946, 0, 1, "", "cum_prod"], [947, 0, 1, "", "cum_sum"], [948, 0, 1, "", "cumulative_eval"], [949, 0, 1, "", "cut"], [950, 0, 1, "", "describe"], [951, 0, 1, "", "diff"], [952, 0, 1, "", "dot"], [953, 0, 1, "", "drop_nans"], [954, 0, 1, "", "drop_nulls"], [1003, 3, 1, "", "dtype"], [1004, 0, 1, "", "entropy"], [1005, 0, 1, "", "equals"], [1006, 0, 1, "", "estimated_size"], [1007, 0, 1, "", "ewm_mean"], [1008, 0, 1, "", "ewm_mean_by"], [1009, 0, 1, "", "ewm_std"], [1010, 0, 1, "", "ewm_var"], [1011, 0, 1, "", "exp"], [1012, 0, 1, "", "explode"], [1013, 0, 1, "", "extend"], [1014, 0, 1, "", "extend_constant"], [1015, 0, 1, "", "fill_nan"], [1016, 0, 1, "", "fill_null"], [1017, 0, 1, "", "filter"], [1018, 3, 1, "", "flags"], [1019, 0, 1, "", "floor"], [1020, 0, 1, "", "gather"], [1021, 0, 1, "", "gather_every"], [1022, 0, 1, "", "get_chunks"], [1023, 0, 1, "", "has_nulls"], [1024, 0, 1, "", "has_validity"], [1025, 0, 1, "", "hash"], [1026, 0, 1, "", "head"], [1027, 0, 1, "", "hist"], [1028, 0, 1, "", "implode"], [1029, 0, 1, "", "interpolate"], [1030, 0, 1, "", "interpolate_by"], [1031, 0, 1, "", "is_between"], [1032, 0, 1, "", "is_duplicated"], [1033, 0, 1, "", "is_empty"], [1034, 0, 1, "", "is_finite"], [1035, 0, 1, "", "is_first_distinct"], [1036, 0, 1, "", "is_in"], [1037, 0, 1, "", "is_infinite"], [1038, 0, 1, "", "is_last_distinct"], [1039, 0, 1, "", "is_nan"], [1040, 0, 1, "", "is_not_nan"], [1041, 0, 1, "", "is_not_null"], [1042, 0, 1, "", "is_null"], [1043, 0, 1, "", "is_sorted"], [1044, 0, 1, "", "is_unique"], [1045, 0, 1, "", "item"], [1046, 0, 1, "", "kurtosis"], [1047, 0, 1, "", "len"], [1048, 0, 1, "", "limit"], [1089, 0, 1, "", "log"], [1090, 0, 1, "", "log10"], [1091, 0, 1, "", "log1p"], [1092, 0, 1, "", "lower_bound"], [1093, 0, 1, "", "map_elements"], [1094, 0, 1, "", "max"], [1095, 0, 1, "", "mean"], [1096, 0, 1, "", "median"], [1097, 0, 1, "", "min"], [1098, 0, 1, "", "mode"], [1099, 0, 1, "", "n_chunks"], [1100, 0, 1, "", "n_unique"], [1101, 3, 1, "", "name"], [1102, 0, 1, "", "nan_max"], [1103, 0, 1, "", "nan_min"], [1104, 0, 1, "", "new_from_index"], [1105, 0, 1, "", "not_"], [1106, 0, 1, "", "null_count"], [1107, 0, 1, "", "pct_change"], [1108, 0, 1, "", "peak_max"], [1109, 0, 1, "", "peak_min"], [1110, 0, 1, "", "product"], [1111, 0, 1, "", "qcut"], [1112, 0, 1, "", "quantile"], [1113, 0, 1, "", "rank"], [1114, 0, 1, "", "rechunk"], [1115, 0, 1, "", "reinterpret"], [1116, 0, 1, "", "rename"], [1117, 0, 1, "", "replace"], [1118, 0, 1, "", "reshape"], [1119, 0, 1, "", "reverse"], [1120, 0, 1, "", "rle"], [1121, 0, 1, "", "rle_id"], [1122, 0, 1, "", "rolling_map"], [1123, 0, 1, "", "rolling_max"], [1124, 0, 1, "", "rolling_mean"], [1125, 0, 1, "", "rolling_median"], [1126, 0, 1, "", "rolling_min"], [1127, 0, 1, "", "rolling_quantile"], [1128, 0, 1, "", "rolling_skew"], [1129, 0, 1, "", "rolling_std"], [1130, 0, 1, "", "rolling_sum"], [1131, 0, 1, "", "rolling_var"], [1132, 0, 1, "", "round"], [1133, 0, 1, "", "round_sig_figs"], [1134, 0, 1, "", "sample"], [1135, 0, 1, "", "scatter"], [1136, 0, 1, "", "search_sorted"], [1137, 0, 1, "", "set"], [1138, 0, 1, "", "set_sorted"], [1139, 3, 1, "", "shape"], [1140, 0, 1, "", "shift"], [1141, 0, 1, "", "shrink_dtype"], [1142, 0, 1, "", "shrink_to_fit"], [1143, 0, 1, "", "shuffle"], [1144, 0, 1, "", "sign"], [1145, 0, 1, "", "sin"], [1146, 0, 1, "", "sinh"], [1147, 0, 1, "", "skew"], [1148, 0, 1, "", "slice"], [1149, 0, 1, "", "sort"], [1150, 0, 1, "", "sqrt"], [1151, 0, 1, "", "std"], [1203, 0, 1, "", "sum"], [1204, 0, 1, "", "tail"], [1205, 0, 1, "", "tan"], [1206, 0, 1, "", "tanh"], [1207, 0, 1, "", "to_arrow"], [1208, 0, 1, "", "to_dummies"], [1209, 0, 1, "", "to_frame"], [1210, 0, 1, "", "to_init_repr"], [1211, 0, 1, "", "to_jax"], [1212, 0, 1, "", "to_list"], [1213, 0, 1, "", "to_numpy"], [1214, 0, 1, "", "to_pandas"], [1215, 0, 1, "", "to_physical"], [1216, 0, 1, "", "to_torch"], [1217, 0, 1, "", "top_k"], [1218, 0, 1, "", "unique"], [1219, 0, 1, "", "unique_counts"], [1220, 0, 1, "", "upper_bound"], [1221, 0, 1, "", "value_counts"], [1222, 0, 1, "", "var"], [1223, 0, 1, "", "zip_with"]], "polars.Series.arr": [[899, 0, 1, "", "all"], [900, 0, 1, "", "any"], [901, 0, 1, "", "arg_max"], [902, 0, 1, "", "arg_min"], [903, 0, 1, "", "contains"], [904, 0, 1, "", "count_matches"], [905, 0, 1, "", "explode"], [906, 0, 1, "", "first"], [907, 0, 1, "", "get"], [908, 0, 1, "", "join"], [909, 0, 1, "", "last"], [910, 0, 1, "", "max"], [911, 0, 1, "", "median"], [912, 0, 1, "", "min"], [913, 0, 1, "", "n_unique"], [914, 0, 1, "", "reverse"], [915, 0, 1, "", "shift"], [916, 0, 1, "", "sort"], [917, 0, 1, "", "std"], [918, 0, 1, "", "sum"], [919, 0, 1, "", "to_list"], [920, 0, 1, "", "to_struct"], [921, 0, 1, "", "unique"], [922, 0, 1, "", "var"]], "polars.Series.bin": [[923, 0, 1, "", "contains"], [924, 0, 1, "", "decode"], [925, 0, 1, "", "encode"], [926, 0, 1, "", "ends_with"], [927, 0, 1, "", "starts_with"]], "polars.Series.cat": [[930, 0, 1, "", "get_categories"], [931, 0, 1, "", "is_local"], [932, 0, 1, "", "to_local"], [933, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[955, 0, 1, "", "add_business_days"], [956, 0, 1, "", "base_utc_offset"], [957, 0, 1, "", "cast_time_unit"], [958, 0, 1, "", "century"], [959, 0, 1, "", "combine"], [960, 0, 1, "", "convert_time_zone"], [961, 0, 1, "", "date"], [962, 0, 1, "", "datetime"], [963, 0, 1, "", "day"], [964, 0, 1, "", "dst_offset"], [965, 0, 1, "", "epoch"], [966, 0, 1, "", "hour"], [967, 0, 1, "", "is_leap_year"], [968, 0, 1, "", "iso_year"], [969, 0, 1, "", "max"], [970, 0, 1, "", "mean"], [971, 0, 1, "", "median"], [972, 0, 1, "", "microsecond"], [973, 0, 1, "", "millennium"], [974, 0, 1, "", "millisecond"], [975, 0, 1, "", "min"], [976, 0, 1, "", "minute"], [977, 0, 1, "", "month"], [978, 0, 1, "", "month_end"], [979, 0, 1, "", "month_start"], [980, 0, 1, "", "nanosecond"], [981, 0, 1, "", "offset_by"], [982, 0, 1, "", "ordinal_day"], [983, 0, 1, "", "quarter"], [984, 0, 1, "", "replace_time_zone"], [985, 0, 1, "", "round"], [986, 0, 1, "", "second"], [987, 0, 1, "", "strftime"], [988, 0, 1, "", "time"], [989, 0, 1, "", "timestamp"], [990, 0, 1, "", "to_string"], [991, 0, 1, "", "total_days"], [992, 0, 1, "", "total_hours"], [993, 0, 1, "", "total_microseconds"], [994, 0, 1, "", "total_milliseconds"], [995, 0, 1, "", "total_minutes"], [996, 0, 1, "", "total_nanoseconds"], [997, 0, 1, "", "total_seconds"], [998, 0, 1, "", "truncate"], [999, 0, 1, "", "week"], [1000, 0, 1, "", "weekday"], [1001, 0, 1, "", "with_time_unit"], [1002, 0, 1, "", "year"]], "polars.Series.list": [[1049, 0, 1, "", "all"], [1050, 0, 1, "", "any"], [1051, 0, 1, "", "arg_max"], [1052, 0, 1, "", "arg_min"], [1053, 0, 1, "", "concat"], [1054, 0, 1, "", "contains"], [1055, 0, 1, "", "count_matches"], [1056, 0, 1, "", "diff"], [1057, 0, 1, "", "drop_nulls"], [1058, 0, 1, "", "eval"], [1059, 0, 1, "", "explode"], [1060, 0, 1, "", "first"], [1061, 0, 1, "", "gather"], [1062, 0, 1, "", "gather_every"], [1063, 0, 1, "", "get"], [1064, 0, 1, "", "head"], [1065, 0, 1, "", "join"], [1066, 0, 1, "", "last"], [1067, 0, 1, "", "len"], [1068, 0, 1, "", "max"], [1069, 0, 1, "", "mean"], [1070, 0, 1, "", "median"], [1071, 0, 1, "", "min"], [1072, 0, 1, "", "n_unique"], [1073, 0, 1, "", "reverse"], [1074, 0, 1, "", "sample"], [1075, 0, 1, "", "set_difference"], [1076, 0, 1, "", "set_intersection"], [1077, 0, 1, "", "set_symmetric_difference"], [1078, 0, 1, "", "set_union"], [1079, 0, 1, "", "shift"], [1080, 0, 1, "", "slice"], [1081, 0, 1, "", "sort"], [1082, 0, 1, "", "std"], [1083, 0, 1, "", "sum"], [1084, 0, 1, "", "tail"], [1085, 0, 1, "", "to_array"], [1086, 0, 1, "", "to_struct"], [1087, 0, 1, "", "unique"], [1088, 0, 1, "", "var"]], "polars.Series.str": [[1152, 0, 1, "", "concat"], [1153, 0, 1, "", "contains"], [1154, 0, 1, "", "contains_any"], [1155, 0, 1, "", "count_matches"], [1156, 0, 1, "", "decode"], [1157, 0, 1, "", "encode"], [1158, 0, 1, "", "ends_with"], [1159, 0, 1, "", "explode"], [1160, 0, 1, "", "extract"], [1161, 0, 1, "", "extract_all"], [1162, 0, 1, "", "extract_groups"], [1163, 0, 1, "", "find"], [1164, 0, 1, "", "head"], [1165, 0, 1, "", "join"], [1166, 0, 1, "", "json_decode"], [1167, 0, 1, "", "json_path_match"], [1168, 0, 1, "", "len_bytes"], [1169, 0, 1, "", "len_chars"], [1170, 0, 1, "", "pad_end"], [1171, 0, 1, "", "pad_start"], [1172, 0, 1, "", "replace"], [1173, 0, 1, "", "replace_all"], [1174, 0, 1, "", "replace_many"], [1175, 0, 1, "", "reverse"], [1176, 0, 1, "", "slice"], [1177, 0, 1, "", "split"], [1178, 0, 1, "", "split_exact"], [1179, 0, 1, "", "splitn"], [1180, 0, 1, "", "starts_with"], [1181, 0, 1, "", "strip_chars"], [1182, 0, 1, "", "strip_chars_end"], [1183, 0, 1, "", "strip_chars_start"], [1184, 0, 1, "", "strip_prefix"], [1185, 0, 1, "", "strip_suffix"], [1186, 0, 1, "", "strptime"], [1187, 0, 1, "", "tail"], [1188, 0, 1, "", "to_date"], [1189, 0, 1, "", "to_datetime"], [1190, 0, 1, "", "to_decimal"], [1191, 0, 1, "", "to_integer"], [1192, 0, 1, "", "to_lowercase"], [1193, 0, 1, "", "to_time"], [1194, 0, 1, "", "to_titlecase"], [1195, 0, 1, "", "to_uppercase"], [1196, 0, 1, "", "zfill"]], "polars.Series.struct": [[1197, 0, 1, "", "field"], [1198, 3, 1, "", "fields"], [1199, 0, 1, "", "json_encode"], [1200, 0, 1, "", "rename_fields"], [1201, 3, 1, "", "schema"], [1202, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[285, 0, 1, "", "__iter__"], [286, 0, 1, "", "agg"], [287, 0, 1, "", "all"], [288, 0, 1, "", "count"], [289, 0, 1, "", "first"], [290, 0, 1, "", "head"], [291, 0, 1, "", "last"], [292, 0, 1, "", "len"], [293, 0, 1, "", "map_groups"], [294, 0, 1, "", "max"], [295, 0, 1, "", "mean"], [296, 0, 1, "", "median"], [297, 0, 1, "", "min"], [298, 0, 1, "", "n_unique"], [299, 0, 1, "", "quantile"], [300, 0, 1, "", "sum"], [301, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DuplicateError"], [92, 5, 1, "", "InvalidAssert"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequired"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "ParameterCollisionError"], [100, 5, 1, "", "PerformanceWarning"], [101, 5, 1, "", "PolarsError"], [102, 5, 1, "", "PolarsInefficientMapWarning"], [103, 5, 1, "", "PolarsPanicError"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[856, 0, 1, "", "agg"], [857, 0, 1, "", "all"], [858, 0, 1, "", "count"], [859, 0, 1, "", "first"], [860, 0, 1, "", "head"], [861, 0, 1, "", "last"], [862, 0, 1, "", "len"], [863, 0, 1, "", "map_groups"], [864, 0, 1, "", "max"], [865, 0, 1, "", "mean"], [866, 0, 1, "", "median"], [867, 0, 1, "", "min"], [868, 0, 1, "", "n_unique"], [869, 0, 1, "", "quantile"], [870, 0, 1, "", "sum"], [871, 0, 1, "", "tail"]], "polars.plugins": [[879, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[881, 4, 1, "", "all"], [881, 4, 1, "", "alpha"], [881, 4, 1, "", "alphanumeric"], [881, 4, 1, "", "binary"], [881, 4, 1, "", "boolean"], [881, 4, 1, "", "by_dtype"], [881, 4, 1, "", "by_index"], [881, 4, 1, "", "by_name"], [881, 4, 1, "", "categorical"], [881, 4, 1, "", "contains"], [881, 4, 1, "", "date"], [881, 4, 1, "", "datetime"], [881, 4, 1, "", "decimal"], [881, 4, 1, "", "digit"], [881, 4, 1, "", "duration"], [881, 4, 1, "", "ends_with"], [881, 4, 1, "", "exclude"], [881, 4, 1, "", "expand_selector"], [881, 4, 1, "", "first"], [881, 4, 1, "", "float"], [881, 4, 1, "", "integer"], [881, 4, 1, "", "is_selector"], [881, 4, 1, "", "last"], [881, 4, 1, "", "matches"], [881, 4, 1, "", "numeric"], [881, 4, 1, "", "signed_integer"], [881, 4, 1, "", "starts_with"], [881, 4, 1, "", "string"], [881, 4, 1, "", "temporal"], [881, 4, 1, "", "time"], [881, 4, 1, "", "unsigned_integer"]], "polars.testing": [[151, 4, 1, "", "assert_frame_equal"], [152, 4, 1, "", "assert_frame_not_equal"], [153, 4, 1, "", "assert_series_equal"], [154, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[155, 2, 1, "", "column"], [156, 4, 1, "", "columns"], [157, 4, 1, "", "create_list_strategy"], [158, 4, 1, "", "dataframes"], [159, 4, 1, "", "dtypes"], [160, 4, 1, "", "lists"], [161, 4, 1, "", "load_profile"], [162, 4, 1, "", "series"], [163, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[155, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 188, 1013], "api": [1, 48, 49, 50, 51, 781, 1256], "provid": 1, "new": 1, "function": [1, 768, 780, 881, 1250], "avail": 1, "registr": 1, "exampl": [1, 310, 881, 1236, 1259], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1240, 1241, 1242, 1243, 1244, 1245, 1259], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 167], "load": [2, 167], "load_from_fil": 3, "restore_default": 4, "save": [5, 167], "save_to_fil": 6, "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_streaming_chunk_s": 14, "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_verbos": 29, "state": [30, 167], "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 158, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 544], "write_ndjson": 40, "write_parquet": 41, "lazyfram": [42, 43, 44, 45, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "stringcach": [46, 780], "align_fram": 47, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_lazyframe_namespac": 50, "register_series_namespac": 51, "build_info": 52, "collect_al": 53, "collect_all_async": 54, "concat": [55, 487, 622, 1053, 1152, 1252], "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 312], "arrai": [56, 761, 1224, 1248], "binari": [57, 762, 775, 1226], "boolean": [58, 763, 1227], "categor": 59, "date": [61, 395, 709, 961, 1253], "datetim": [62, 396, 712, 962], "decim": 63, "durat": [64, 715], "enum": 65, "float32": 66, "float64": 67, "int16": 68, "int32": 69, "int64": 70, "int8": 71, "list": [72, 160, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 770, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1233], "null": 73, "object": 74, "string": [75, 312, 776, 1237, 1252], "struct": [76, 667, 668, 669, 670, 751, 777, 1197, 1198, 1199, 1200, 1201, 1202, 1238], "time": [77, 418, 755, 988], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "unknown": 82, "utf8": 83, "disable_string_cach": 84, "enable_string_cach": 85, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 313, 1257], "categoricalremappingwarn": 86, "chronoformatwarn": 87, "columnnotfounderror": 88, "computeerror": 89, "customufuncwarn": 90, "duplicateerror": 91, "invalidassert": 92, "invalidoperationerror": 93, "mapwithoutreturndtypewarn": 94, "moduleupgraderequir": 95, "nodataerror": 96, "norowsreturnederror": 97, "outofboundserror": 98, "parametercollisionerror": 99, "performancewarn": 100, "polarserror": 101, "polarsinefficientmapwarn": 102, "polarspanicerror": 103, "polarswarn": 104, "rowserror": 105, "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "schemaerror": 108, "schemafieldnotfounderror": 109, "shapeerror": 110, "stringcachemismatcherror": 111, "structfieldnotfounderror": 112, "toomanyrowsreturnederror": 113, "unstablewarn": 114, "unsuitablesqlerror": 115, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "get_index_typ": 124, "io": 125, "csv": [125, 782], "batched_read": 125, "batchedcsvread": 125, "next_batch": 125, "read_avro": 126, "read_clipboard": 127, "read_csv": 128, "read_csv_batch": 129, "read_databas": 130, "read_database_uri": 131, "read_delta": 132, "read_excel": 133, "read_ipc": 134, "read_ipc_schema": 135, "read_ipc_stream": 136, "read_json": 137, "read_ndjson": 138, "read_od": 139, "read_parquet": 140, "read_parquet_schema": 141, "scan_csv": 142, "scan_delta": 143, "scan_iceberg": 144, "scan_ipc": 145, "scan_ndjson": 146, "scan_parquet": 147, "scan_pyarrow_dataset": 148, "set_random_se": 149, "show_vers": 150, "test": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 1259], "assert_frame_equ": 151, "assert_frame_not_equ": 152, "assert_series_equ": 153, "assert_series_not_equ": 154, "parametr": [155, 156, 157, 158, 159, 160, 161, 162, 163, 1259], "column": [155, 156, 176, 766, 793], "create_list_strategi": 157, "dtype": [159, 184, 799, 1003], "load_profil": 161, "seri": [162, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1232], "set_profil": 163, "thread_pool_s": 164, "threadpool_s": 165, "using_string_cach": 166, "option": 167, "us": 167, "context": 167, "manag": 167, "decor": 167, "aggreg": [168, 314, 783, 882, 1247], "__dataframe__": 169, "approx_n_uniqu": [170, 323, 691, 784], "bottom_k": [171, 365, 785, 928], "cast": [172, 367, 787, 929], "clear": [173, 788, 937], "clone": [174, 789, 939], "collect_schema": [175, 792], "corr": [177, 701], "count": [178, 288, 375, 702, 794, 858, 1247], "describ": [179, 795, 950], "deseri": [180, 384, 796], "drop": [181, 797, 1258], "drop_in_plac": 182, "drop_nul": [183, 388, 491, 798, 954, 1057], "equal": [185, 1005], "estimated_s": [186, 1006], "explod": [187, 341, 442, 493, 629, 801, 905, 1012, 1059, 1159], "fill_nan": [189, 444, 803, 1015], "fill_nul": [190, 445, 804, 1016], "filter": [191, 446, 805, 1017], "flag": [192, 1018], "fold": [193, 719], "gather_everi": [194, 454, 496, 807, 1021, 1062], "get_column": [195, 197], "get_column_index": 196, "glimps": 198, "group_bi": [199, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 808, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "group_by_dynam": [200, 809], "hash_row": 201, "head": [202, 290, 460, 498, 634, 723, 810, 860, 1026, 1064, 1164], "height": 203, "hstack": 204, "insert_column": 205, "interpol": [206, 464, 812, 1029], "is_dupl": [207, 467, 1032], "is_empti": [208, 1033], "is_uniqu": [209, 477, 1044], "item": [210, 1045], "iter_column": 211, "iter_row": 212, "iter_slic": 213, "join": [214, 344, 499, 635, 813, 908, 1065, 1165, 1246], "join_asof": [215, 814], "lazi": [216, 816], "limit": [217, 482, 817, 1048, 1246], "map_row": 218, "max": [219, 294, 346, 502, 530, 732, 819, 864, 910, 969, 1068, 1094, 1247], "max_horizont": [220, 733], "mean": [221, 295, 503, 531, 734, 820, 865, 970, 1069, 1095], "mean_horizont": [222, 735], "median": [223, 296, 347, 504, 532, 736, 821, 866, 911, 971, 1070, 1096, 1247], "melt": [224, 822], "merge_sort": [225, 823], "min": [226, 297, 348, 505, 545, 737, 824, 867, 912, 975, 1071, 1097, 1247], "min_horizont": [227, 738], "n_chunk": [228, 1099], "n_uniqu": [229, 298, 349, 506, 549, 739, 868, 913, 1072, 1100], "null_count": [230, 565, 825, 1106], "partition_bi": 231, "pipe": [232, 571, 826], "pivot": 233, "product": [234, 573, 1110], "quantil": [235, 299, 575, 742, 828, 869, 1112], "rechunk": [236, 578, 1114], "renam": [237, 829, 1116], "replace_column": 238, "revers": [239, 350, 507, 583, 645, 830, 914, 1073, 1119, 1175, 1252], "roll": [240, 586, 831], "row": [241, 242], "rows_by_kei": 243, "sampl": [244, 508, 607, 1074, 1134], "schema": [245, 832, 880, 1201], "select": [246, 309, 747, 773, 833, 877, 1235, 1246], "select_seq": [247, 834], "serial": [248, 308, 541, 835, 876], "set_sort": [249, 609, 836, 1138], "shape": [250, 1139], "shift": [251, 351, 513, 610, 837, 915, 1079, 1140], "shrink_to_fit": [252, 1142], "slice": [253, 514, 617, 646, 839, 1080, 1148, 1176], "sort": [254, 352, 515, 618, 840, 916, 1081, 1149], "sql": [255, 748, 841, 1246, 1250, 1255], "std": [256, 353, 516, 621, 750, 842, 917, 1082, 1151], "sum": [257, 300, 354, 517, 672, 752, 843, 870, 918, 1083, 1203, 1247], "sum_horizont": [258, 753], "tail": [259, 301, 518, 657, 673, 754, 844, 871, 1084, 1187, 1204], "to_arrow": [260, 1207], "to_dict": [261, 262], "to_dummi": [263, 1208], "to_init_repr": [264, 1210], "to_jax": [265, 1211], "to_numpi": [266, 1213], "to_panda": [267, 1214], "to_seri": 268, "to_struct": [269, 356, 520, 920, 1086], "to_torch": [270, 1216], "top_k": [271, 677, 845, 1217], "transpos": 272, "uniqu": [273, 357, 521, 680, 846, 921, 1087, 1218], "unnest": [274, 847, 1202, 1248, 1258], "unstack": 275, "updat": [276, 848], "upsampl": 277, "var": [278, 358, 522, 684, 758, 849, 922, 1088, 1222], "vstack": 279, "width": [280, 850], "with_column": [281, 851], "with_columns_seq": [282, 852], "with_row_count": [283, 854], "with_row_index": [284, 855], "groupbi": [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 874], "__iter__": 285, "agg": [286, 856], "all": [287, 319, 335, 483, 687, 857, 885, 899, 1049, 1257], "first": [289, 342, 447, 494, 718, 806, 859, 906, 1060, 1247], "last": [291, 345, 479, 500, 727, 815, 861, 909, 1066, 1247], "len": [292, 481, 501, 728, 862, 1047, 1067], "map_group": [293, 731, 863], "attribut": [302, 872, 1225], "comput": [303, 767, 1229], "descript": [304, 873, 1230], "export": [305, 1231], "miscellan": [308, 772, 780, 876, 1234], "manipul": [309, 773, 877, 1235], "plot": [310, 1236], "style": 311, "data": 312, "type": 312, "numer": [312, 775], "tempor": [312, 778, 1239, 1253], "nest": 312, "other": 312, "error": 313, "warn": 313, "expr": [315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "ab": [315, 883, 1251], "add": 316, "agg_group": 317, "alia": [318, 884], "and_": 320, "ani": [321, 336, 484, 689, 886, 900, 1050], "append": [322, 887], "arcco": [324, 888], "arccosh": [325, 889], "arcsin": [326, 890], "arcsinh": [327, 891], "arctan": [328, 892], "arctanh": [329, 893], "arg_max": [330, 337, 485, 894, 901, 1051], "arg_min": [331, 338, 486, 895, 902, 1052], "arg_sort": [332, 896], "arg_tru": [333, 897], "arg_uniqu": [334, 898], "arr": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "contain": [339, 360, 488, 623, 903, 923, 1054, 1153], "count_match": [340, 489, 625, 904, 1055, 1155], "get": [343, 456, 497, 907, 1063], "to_list": [355, 919, 1212], "backward_fil": 359, "bin": [360, 361, 362, 363, 364, 923, 924, 925, 926, 927], "decod": [361, 626, 924, 1156], "encod": [362, 627, 925, 1157], "ends_with": [363, 628, 926, 1158, 1252], "starts_with": [364, 650, 927, 1180, 1252], "bottom_k_bi": 366, "cat": [368, 930, 931, 932, 933], "get_categori": [368, 930], "cbrt": [369, 934, 1251], "ceil": [370, 935, 1251], "clip": [371, 938], "co": [372, 940, 1254], "cosh": [373, 941], "cot": [374, 942, 1254], "cum_count": [376, 704, 943], "cum_max": [377, 944], "cum_min": [378, 945], "cum_prod": [379, 946], "cum_sum": [380, 707, 947], "cumulative_ev": [381, 948], "cut": [382, 949], "degre": [383, 1254], "diff": [385, 490, 951, 1056], "dot": [386, 952], "drop_nan": [387, 953], "dt": [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002], "add_business_dai": [389, 955], "base_utc_offset": [390, 956], "cast_time_unit": [391, 957], "centuri": [392, 958], "combin": [393, 959], "convert_time_zon": [394, 960], "dai": [397, 963], "dst_offset": [398, 964], "epoch": [399, 965], "hour": [400, 966], "is_leap_year": [401, 967], "iso_year": [402, 968], "microsecond": [403, 972], "millennium": [404, 973], "millisecond": [405, 974], "minut": [406, 976], "month": [407, 977], "month_end": [408, 978], "month_start": [409, 979], "nanosecond": [410, 980], "offset_bi": [411, 981], "ordinal_dai": [412, 982], "quarter": [413, 983], "replace_time_zon": [414, 984], "round": [415, 605, 985, 1132, 1251], "second": [416, 986], "strftime": [417, 987], "timestamp": [419, 989], "to_str": [420, 990], "total_dai": [421, 991], "total_hour": [422, 992], "total_microsecond": [423, 993], "total_millisecond": [424, 994], "total_minut": [425, 995], "total_nanosecond": [426, 996], "total_second": [427, 997], "truncat": [428, 998, 1258], "week": [429, 999], "weekdai": [430, 1000], "with_time_unit": [431, 1001], "year": [432, 1002], "entropi": [433, 1004], "eq": [434, 533], "eq_miss": 435, "ewm_mean": [436, 1007], "ewm_mean_bi": [437, 1008], "ewm_std": [438, 1009], "ewm_var": [439, 1010], "exclud": [440, 717], "exp": [441, 1011, 1251], "extend_const": [443, 1014], "flatten": 448, "floor": [449, 1019, 1251], "floordiv": 450, "forward_fil": 451, "from_json": 452, "gather": [453, 495, 1020, 1061], "ge": 455, "gt": 457, "has_nul": [458, 1023], "hash": [459, 1025], "hist": [461, 1027], "implod": [462, 724, 1028], "inspect": [463, 811], "interpolate_bi": [465, 1030], "is_between": [466, 1031], "is_finit": [468, 1034], "is_first_distinct": [469, 1035], "is_in": [470, 1036], "is_infinit": [471, 1037], "is_last_distinct": [472, 1038], "is_nan": [473, 1039], "is_not_nan": [474, 1040], "is_not_nul": [475, 1041], "is_nul": [476, 1042], "kurtosi": [478, 1046], "le": 480, "eval": [492, 1058], "set_differ": [509, 1075], "set_intersect": [510, 1076], "set_symmetric_differ": [511, 1077], "set_union": [512, 1078], "to_arrai": [519, 1085], "log": [523, 1089, 1251], "log10": [524, 1090, 1251], "log1p": [525, 1091, 1251], "lower_bound": [526, 1092], "lt": 527, "map_batch": [528, 730, 818], "map_el": [529, 1093], "meta": [533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 771], "has_multiple_output": 534, "is_column_select": 535, "is_regex_project": 536, "ne": [537, 561], "output_nam": 538, "pop": 539, "root_nam": 540, "tree_format": 542, "undo_alias": 543, "mod": [546, 1251], "mode": [547, 1098], "mul": 548, "name": [550, 551, 552, 553, 554, 555, 556, 557, 558, 766, 774, 1101, 1257], "keep": 550, "map": 551, "map_field": 552, "prefix": 553, "prefix_field": 554, "suffix": 555, "suffix_field": 556, "to_lowercas": [557, 662, 1192], "to_uppercas": [558, 665, 1195], "nan_max": [559, 1102], "nan_min": [560, 1103], "ne_miss": 562, "neg": 563, "not_": [564, 1105], "or_": 566, "over": 567, "pct_chang": [568, 1107], "peak_max": [569, 1108], "peak_min": [570, 1109], "pow": [572, 1251], "qcut": [574, 1111], "radian": [576, 1254], "rank": [577, 1113], "reinterpret": [579, 1115], "repeat_bi": 580, "replac": [581, 642, 1117, 1172, 1252], "reshap": [582, 1118], "rle": [584, 1120], "rle_id": [585, 1121], "rolling_map": [587, 1122], "rolling_max": [588, 1123], "rolling_max_bi": 589, "rolling_mean": [590, 1124], "rolling_mean_bi": 591, "rolling_median": [592, 1125], "rolling_median_bi": 593, "rolling_min": [594, 1126], "rolling_min_bi": 595, "rolling_quantil": [596, 1127], "rolling_quantile_bi": 597, "rolling_skew": [598, 1128], "rolling_std": [599, 1129], "rolling_std_bi": 600, "rolling_sum": [601, 1130], "rolling_sum_bi": 602, "rolling_var": [603, 1131], "rolling_var_bi": 604, "round_sig_fig": [606, 1133], "search_sort": [608, 1136], "shrink_dtyp": [611, 1141], "shuffl": [612, 1143], "sign": [613, 1144, 1251], "sin": [614, 1145, 1254], "sinh": [615, 1146], "skew": [616, 1147], "sort_bi": 619, "sqrt": [620, 1150, 1251], "str": [622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196], "contains_ani": [624, 1154], "extract": [630, 1160, 1253], "extract_al": [631, 1161], "extract_group": [632, 1162], "find": [633, 1163], "json_decod": [636, 1166], "json_path_match": [637, 1167], "len_byt": [638, 1168], "len_char": [639, 1169], "pad_end": [640, 1170], "pad_start": [641, 1171], "replace_al": [643, 1173], "replace_mani": [644, 1174], "split": [647, 1177], "split_exact": [648, 1178], "splitn": [649, 1179], "strip_char": [651, 1181], "strip_chars_end": [652, 1182], "strip_chars_start": [653, 1183], "strip_prefix": [654, 1184], "strip_suffix": [655, 1185], "strptime": [656, 1186], "to_dat": [658, 1188], "to_datetim": [659, 1189], "to_decim": [660, 1190], "to_integ": [661, 1191], "to_tim": [663, 1193], "to_titlecas": [664, 1194], "zfill": [666, 1196], "field": [667, 1197, 1198], "json_encod": [668, 1199], "rename_field": [669, 1200], "with_field": 670, "sub": 671, "tan": [674, 1205, 1254], "tanh": [675, 1206], "to_phys": [676, 1215], "top_k_bi": 678, "truediv": 679, "unique_count": [681, 1219], "upper_bound": [682, 1220], "value_count": [683, 1221], "where": [685, 1246], "xor": 686, "all_horizont": 688, "any_horizont": 690, "arang": 692, "arctan2": 693, "arctan2d": 694, "arg_sort_bi": 695, "arg_wher": 696, "business_day_count": 697, "coalesc": [698, 1249], "concat_list": 699, "concat_str": 700, "cov": 703, "cum_fold": 705, "cum_reduc": 706, "cum_sum_horizont": 708, "date_rang": [710, 711], "datetime_rang": [713, 714], "element": 716, "format": 720, "from_epoch": 721, "group": [722, 1246], "int_rang": [725, 726], "lit": 729, "nth": 740, "ones": 741, "reduc": 743, "repeat": 744, "rolling_corr": 745, "rolling_cov": 746, "sql_expr": 749, "time_rang": [756, 757], "when": 759, "zero": 760, "categori": [764, 1228], "col": 765, "express": 769, "oper": [775, 881, 1257, 1258], "conjunct": 775, "comparison": 775, "window": 779, "convers": 780, "parallel": 780, "random": 780, "python": [781, 1256], "refer": 781, "input": 782, "output": 782, "avro": 782, "clipboard": 782, "databas": 782, "delta": 782, "lake": 782, "excel": 782, "od": 782, "feather": 782, "ipc": 782, "iceberg": 782, "json": 782, "parquet": 782, "pyarrow": 782, "dataset": 782, "cach": 786, "collect": 790, "collect_async": 791, "explain": [800, 1258], "fetch": 802, "profil": [827, 1259], "show_graph": 838, "with_context": 853, "lazygroupbi": [856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "metadata": 878, "plugin": 879, "selector": 881, "import": 881, "set": [881, 1137, 1257], "is_loc": 931, "to_loc": 932, "uses_lexical_ord": 933, "chunk_length": 936, "get_chunk": 1022, "has_valid": 1024, "is_sort": 1043, "new_from_index": 1104, "scatter": 1135, "to_fram": 1209, "zip_with": 1223, "sqlcontext": [1240, 1241, 1242, 1243, 1244, 1245, 1256], "execut": 1240, "regist": 1241, "register_glob": 1242, "register_mani": 1243, "tabl": [1244, 1258], "unregist": 1245, "claus": 1246, "from": 1246, "BY": [1246, 1257], "have": 1246, "order": 1246, "offset": 1246, "avg": 1247, "stddev": 1247, "varianc": 1247, "array_agg": 1248, "array_contain": 1248, "array_get": 1248, "array_length": 1248, "array_low": 1248, "array_mean": 1248, "array_revers": 1248, "array_sum": 1248, "array_to_str": 1248, "array_uniqu": 1248, "array_upp": 1248, "condit": 1249, "greatest": 1249, "IF": 1249, "ifnul": 1249, "least": 1249, "nullif": 1249, "math": 1251, "div": 1251, "ln": 1251, "log2": 1251, "pi": 1251, "bit_length": 1252, "concat_w": 1252, "initcap": 1252, "left": 1252, "length": 1252, "lower": 1252, "ltrim": 1252, "octet_length": 1252, "regexp_lik": 1252, "right": 1252, "rtrim": 1252, "strpo": 1252, "substr": 1252, "upper": 1252, "date_part": 1253, "trigonometri": 1254, "aco": 1254, "acosd": 1254, "asin": 1254, "asind": 1254, "atan": 1254, "atand": 1254, "atan2": 1254, "atan2d": 1254, "cotd": 1254, "cosd": 1254, "sind": 1254, "tand": 1254, "interfac": 1255, "method": 1256, "intersect": 1257, "union": 1257, "creat": 1258, "show": 1258, "assert": 1259, "strategi": 1259, "helper": 1259}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.join_asof": [[215, "polars-dataframe-join-asof"]], "polars.DataFrame.estimated_size": [[186, "polars-dataframe-estimated-size"]], "polars.DataFrame.cast": [[172, "polars-dataframe-cast"]], "polars.DataFrame.get_columns": [[197, "polars-dataframe-get-columns"]], "polars.DataFrame.height": [[203, "polars-dataframe-height"]], "polars.DataFrame.iter_columns": [[211, "polars-dataframe-iter-columns"]], "polars.DataFrame.max": [[219, "polars-dataframe-max"]], "polars.DataFrame.fill_nan": [[189, "polars-dataframe-fill-nan"]], "polars.DataFrame.get_column": [[195, "polars-dataframe-get-column"]], "polars.DataFrame.hash_rows": [[201, "polars-dataframe-hash-rows"]], "polars.DataFrame.interpolate": [[206, "polars-dataframe-interpolate"]], "polars.DataFrame.is_unique": [[209, "polars-dataframe-is-unique"]], "polars.DataFrame.max_horizontal": [[220, "polars-dataframe-max-horizontal"]], "polars.DataFrame.drop_nulls": [[183, "polars-dataframe-drop-nulls"]], "polars.DataFrame.drop": [[181, "polars-dataframe-drop"]], "polars.DataFrame.is_empty": [[208, "polars-dataframe-is-empty"]], "polars.DataFrame.insert_column": [[205, "polars-dataframe-insert-column"]], "polars.DataFrame.clear": [[173, "polars-dataframe-clear"]], "polars.DataFrame.is_duplicated": [[207, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join": [[214, "polars-dataframe-join"]], "polars.DataFrame.limit": [[217, "polars-dataframe-limit"]], "polars.DataFrame.describe": [[179, "polars-dataframe-describe"]], "polars.DataFrame.iter_slices": [[213, "polars-dataframe-iter-slices"]], "polars.DataFrame.collect_schema": [[175, "polars-dataframe-collect-schema"]], "polars.DataFrame.glimpse": [[198, "polars-dataframe-glimpse"]], "polars.DataFrame.map_rows": [[218, "polars-dataframe-map-rows"]], "polars.DataFrame.columns": [[176, "polars-dataframe-columns"]], "polars.DataFrame.gather_every": [[194, "polars-dataframe-gather-every"]], "polars.DataFrame.bottom_k": [[171, "polars-dataframe-bottom-k"]], "polars.DataFrame.dtypes": [[184, "polars-dataframe-dtypes"]], "polars.DataFrame.head": [[202, "polars-dataframe-head"]], "polars.DataFrame.clone": [[174, "polars-dataframe-clone"]], "polars.DataFrame.deserialize": [[180, "polars-dataframe-deserialize"]], "polars.DataFrame.hstack": [[204, "polars-dataframe-hstack"]], "polars.DataFrame.mean": [[221, "polars-dataframe-mean"]], "polars.DataFrame.iter_rows": [[212, "polars-dataframe-iter-rows"]], "polars.DataFrame.explode": [[187, "polars-dataframe-explode"]], "polars.DataFrame.get_column_index": [[196, "polars-dataframe-get-column-index"]], "polars.DataFrame.corr": [[177, "polars-dataframe-corr"]], "polars.DataFrame.extend": [[188, "polars-dataframe-extend"]], "polars.DataFrame.approx_n_unique": [[170, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.item": [[210, "polars-dataframe-item"]], "polars.DataFrame.flags": [[192, "polars-dataframe-flags"]], "polars.DataFrame.count": [[178, "polars-dataframe-count"]], "polars.DataFrame.drop_in_place": [[182, "polars-dataframe-drop-in-place"]], "polars.DataFrame.fill_null": [[190, "polars-dataframe-fill-null"]], "polars.DataFrame.equals": [[185, "polars-dataframe-equals"]], "Aggregation": [[168, "aggregation"], [882, "aggregation"], [783, "aggregation"], [314, "aggregation"]], "polars.DataFrame.__dataframe__": [[169, "polars-dataframe-dataframe"]], "polars.DataFrame.lazy": [[216, "polars-dataframe-lazy"]], "polars.DataFrame.median": [[223, "polars-dataframe-median"]], "polars.DataFrame.filter": [[191, "polars-dataframe-filter"]], "polars.DataFrame.fold": [[193, "polars-dataframe-fold"]], "polars.DataFrame.group_by_dynamic": [[200, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.mean_horizontal": [[222, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.group_by": [[199, "polars-dataframe-group-by"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "Index": [[0, "index"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.concat": [[55, "polars-concat"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1259, "examples"], [1236, "examples"], [881, "examples"], [310, "examples"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.build_info": [[52, "polars-build-info"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.testing.assert_frame_equal": [[151, "polars-testing-assert-frame-equal"]], "polars.show_versions": [[150, "polars-show-versions"]], "polars.testing.parametric.dtypes": [[159, "polars-testing-parametric-dtypes"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_parquet": [[147, "polars-scan-parquet"]], "polars.scan_csv": [[142, "polars-scan-csv"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.read_excel": [[133, "polars-read-excel"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.threadpool_size": [[165, "polars-threadpool-size"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.scan_pyarrow_dataset": [[148, "polars-scan-pyarrow-dataset"]], "polars.set_random_seed": [[149, "polars-set-random-seed"]], "polars.thread_pool_size": [[164, "polars-thread-pool-size"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.read_ipc_stream": [[136, "polars-read-ipc-stream"]], "polars.testing.parametric.set_profile": [[163, "polars-testing-parametric-set-profile"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.using_string_cache": [[166, "polars-using-string-cache"]], "polars.read_csv": [[128, "polars-read-csv"]], "polars.testing.parametric.load_profile": [[161, "polars-testing-parametric-load-profile"]], "polars.read_ipc_schema": [[135, "polars-read-ipc-schema"]], "polars.read_ndjson": [[138, "polars-read-ndjson"]], "Config": [[167, "config"]], "Config options": [[167, "config-options"]], "Config load, save, state": [[167, "config-load-save-state"]], "Use as a context manager": [[167, "use-as-a-context-manager"]], "Use as a decorator": [[167, "use-as-a-decorator"]], "polars.read_avro": [[126, "polars-read-avro"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.read_database": [[130, "polars-read-database"]], "polars.read_database_uri": [[131, "polars-read-database-uri"]], "polars.scan_ipc": [[145, "polars-scan-ipc"]], "polars.testing.assert_series_equal": [[153, "polars-testing-assert-series-equal"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.scan_ndjson": [[146, "polars-scan-ndjson"]], "polars.read_json": [[137, "polars-read-json"]], "polars.read_csv_batched": [[129, "polars-read-csv-batched"]], "polars.testing.parametric.dataframes": [[158, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.lists": [[160, "polars-testing-parametric-lists"]], "polars.read_parquet": [[140, "polars-read-parquet"]], "polars.testing.parametric.columns": [[156, "polars-testing-parametric-columns"]], "polars.read_clipboard": [[127, "polars-read-clipboard"]], "polars.testing.assert_series_not_equal": [[154, "polars-testing-assert-series-not-equal"]], "polars.read_delta": [[132, "polars-read-delta"]], "polars.scan_iceberg": [[144, "polars-scan-iceberg"]], "polars.scan_delta": [[143, "polars-scan-delta"]], "polars.testing.parametric.series": [[162, "polars-testing-parametric-series"]], "polars.from_records": [[122, "polars-from-records"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.testing.assert_frame_not_equal": [[152, "polars-testing-assert-frame-not-equal"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_ipc": [[134, "polars-read-ipc"]], "polars.read_ods": [[139, "polars-read-ods"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.read_parquet_schema": [[141, "polars-read-parquet-schema"]], "polars.testing.parametric.create_list_strategy": [[157, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.column": [[155, "polars-testing-parametric-column"]], "Computation": [[1229, "computation"], [767, "computation"], [303, "computation"]], "polars.Series.struct.unnest": [[1202, "polars-series-struct-unnest"]], "polars.Series.value_counts": [[1221, "polars-series-value-counts"]], "polars.Series.str.starts_with": [[1180, "polars-series-str-starts-with"]], "polars.Series.str.strip_suffix": [[1185, "polars-series-str-strip-suffix"]], "polars.Series.str.to_integer": [[1191, "polars-series-str-to-integer"]], "polars.Series.str.to_uppercase": [[1195, "polars-series-str-to-uppercase"]], "polars.Series.upper_bound": [[1220, "polars-series-upper-bound"]], "polars.Series.struct.field": [[1197, "polars-series-struct-field"]], "polars.Series.str.to_lowercase": [[1192, "polars-series-str-to-lowercase"]], "polars.Series.str.to_datetime": [[1189, "polars-series-str-to-datetime"]], "Boolean": [[1227, "boolean"], [763, "boolean"]], "polars.Series.tail": [[1204, "polars-series-tail"]], "Descriptive": [[1230, "descriptive"], [873, "descriptive"], [304, "descriptive"]], "Binary": [[1226, "binary"], [762, "binary"], [775, "binary"]], "polars.Series.str.tail": [[1187, "polars-series-str-tail"]], "polars.Series.str.split": [[1177, "polars-series-str-split"]], "polars.Series.to_frame": [[1209, "polars-series-to-frame"]], "Array": [[1224, "array"], [1248, "array"], [761, "array"]], "polars.Series.str.to_titlecase": [[1194, "polars-series-str-to-titlecase"]], "polars.Series.str.to_date": [[1188, "polars-series-str-to-date"]], "polars.Series.str.strptime": [[1186, "polars-series-str-strptime"]], "polars.Series.struct.schema": [[1201, "polars-series-struct-schema"]], "Categories": [[1228, "categories"], [764, "categories"]], "polars.Series.to_torch": [[1216, "polars-series-to-torch"]], "polars.Series.str.strip_chars": [[1181, "polars-series-str-strip-chars"]], "polars.Series.to_dummies": [[1208, "polars-series-to-dummies"]], "polars.Series.str.strip_chars_start": [[1183, "polars-series-str-strip-chars-start"]], "polars.Series.str.splitn": [[1179, "polars-series-str-splitn"]], "polars.Series.struct.fields": [[1198, "polars-series-struct-fields"]], "polars.Series.to_jax": [[1211, "polars-series-to-jax"]], "polars.Series.to_pandas": [[1214, "polars-series-to-pandas"]], "polars.Series.str.strip_prefix": [[1184, "polars-series-str-strip-prefix"]], "polars.Series.to_arrow": [[1207, "polars-series-to-arrow"]], "polars.Series.tan": [[1205, "polars-series-tan"]], "Attributes": [[1225, "attributes"], [872, "attributes"], [302, "attributes"]], "polars.Series.str.strip_chars_end": [[1182, "polars-series-str-strip-chars-end"]], "Export": [[1231, "export"], [305, "export"]], "polars.Series.to_numpy": [[1213, "polars-series-to-numpy"]], "polars.Series.top_k": [[1217, "polars-series-top-k"]], "polars.Series.str.zfill": [[1196, "polars-series-str-zfill"]], "polars.Series.str.to_decimal": [[1190, "polars-series-str-to-decimal"]], "polars.Series.str.split_exact": [[1178, "polars-series-str-split-exact"]], "polars.Series.str.slice": [[1176, "polars-series-str-slice"]], "polars.Series.struct.json_encode": [[1199, "polars-series-struct-json-encode"]], "polars.Series.tanh": [[1206, "polars-series-tanh"]], "polars.Series.to_list": [[1212, "polars-series-to-list"]], "polars.Series.unique_counts": [[1219, "polars-series-unique-counts"]], "polars.Series.str.to_time": [[1193, "polars-series-str-to-time"]], "polars.Series.zip_with": [[1223, "polars-series-zip-with"]], "polars.Series.to_init_repr": [[1210, "polars-series-to-init-repr"]], "polars.Series.unique": [[1218, "polars-series-unique"]], "polars.Series.struct.rename_fields": [[1200, "polars-series-struct-rename-fields"]], "polars.Series.to_physical": [[1215, "polars-series-to-physical"]], "polars.Series.sum": [[1203, "polars-series-sum"]], "polars.Series.var": [[1222, "polars-series-var"]], "polars.Series.rle": [[1120, "polars-series-rle"]], "polars.Series.shape": [[1139, "polars-series-shape"]], "polars.Series.str.len_chars": [[1169, "polars-series-str-len-chars"]], "polars.Series.shrink_to_fit": [[1142, "polars-series-shrink-to-fit"]], "polars.Series.rle_id": [[1121, "polars-series-rle-id"]], "polars.Series.str.extract_all": [[1161, "polars-series-str-extract-all"]], "polars.Series.sign": [[1144, "polars-series-sign"]], "polars.Series.str.reverse": [[1175, "polars-series-str-reverse"]], "polars.Series.rolling_map": [[1122, "polars-series-rolling-map"]], "polars.Series.sqrt": [[1150, "polars-series-sqrt"]], "polars.Series.str.head": [[1164, "polars-series-str-head"]], "polars.Series.set": [[1137, "polars-series-set"]], "polars.Series.str.json_path_match": [[1167, "polars-series-str-json-path-match"]], "polars.Series.rolling_std": [[1129, "polars-series-rolling-std"]], "polars.Series.search_sorted": [[1136, "polars-series-search-sorted"]], "polars.Series.rolling_quantile": [[1127, "polars-series-rolling-quantile"]], "polars.Series.round": [[1132, "polars-series-round"]], "polars.Series.rolling_mean": [[1124, "polars-series-rolling-mean"]], "polars.Series.shrink_dtype": [[1141, "polars-series-shrink-dtype"]], "polars.Series.std": [[1151, "polars-series-std"]], "polars.Series.sample": [[1134, "polars-series-sample"]], "polars.Series.scatter": [[1135, "polars-series-scatter"]], "polars.Series.str.contains_any": [[1154, "polars-series-str-contains-any"]], "polars.Series.slice": [[1148, "polars-series-slice"]], "polars.Series.str.extract_groups": [[1162, "polars-series-str-extract-groups"]], "polars.Series.rolling_min": [[1126, "polars-series-rolling-min"]], "polars.Series.str.len_bytes": [[1168, "polars-series-str-len-bytes"]], "polars.Series.rolling_skew": [[1128, "polars-series-rolling-skew"]], "polars.Series.str.contains": [[1153, "polars-series-str-contains"]], "polars.Series.shuffle": [[1143, "polars-series-shuffle"]], "polars.Series.str.extract": [[1160, "polars-series-str-extract"]], "polars.Series.rolling_median": [[1125, "polars-series-rolling-median"]], "polars.Series.sin": [[1145, "polars-series-sin"]], "polars.Series.str.join": [[1165, "polars-series-str-join"]], "polars.Series.set_sorted": [[1138, "polars-series-set-sorted"]], "polars.Series.str.pad_start": [[1171, "polars-series-str-pad-start"]], "polars.Series.str.replace_many": [[1174, "polars-series-str-replace-many"]], "polars.Series.sort": [[1149, "polars-series-sort"]], "polars.Series.str.count_matches": [[1155, "polars-series-str-count-matches"]], "polars.Series.str.concat": [[1152, "polars-series-str-concat"]], "polars.Series.str.replace": [[1172, "polars-series-str-replace"]], "polars.Series.rolling_max": [[1123, "polars-series-rolling-max"]], "polars.Series.str.ends_with": [[1158, "polars-series-str-ends-with"]], "polars.Series.str.json_decode": [[1166, "polars-series-str-json-decode"]], "polars.Series.str.pad_end": [[1170, "polars-series-str-pad-end"]], "polars.Series.rolling_var": [[1131, "polars-series-rolling-var"]], "polars.Series.str.explode": [[1159, "polars-series-str-explode"]], "polars.Series.shift": [[1140, "polars-series-shift"]], "polars.Series.skew": [[1147, "polars-series-skew"]], "polars.Series.round_sig_figs": [[1133, "polars-series-round-sig-figs"]], "polars.Series.str.encode": [[1157, "polars-series-str-encode"]], "polars.Series.str.find": [[1163, "polars-series-str-find"]], "polars.Series.sinh": [[1146, "polars-series-sinh"]], "polars.Series.str.decode": [[1156, "polars-series-str-decode"]], "polars.Series.str.replace_all": [[1173, "polars-series-str-replace-all"]], "polars.Series.rolling_sum": [[1130, "polars-series-rolling-sum"]], "polars.Series.rank": [[1113, "polars-series-rank"]], "polars.Series.product": [[1110, "polars-series-product"]], "polars.Series.list.sort": [[1081, "polars-series-list-sort"]], "polars.Series.lower_bound": [[1092, "polars-series-lower-bound"]], "polars.Series.list.last": [[1066, "polars-series-list-last"]], "polars.Series.list.std": [[1082, "polars-series-list-std"]], "polars.Series.map_elements": [[1093, "polars-series-map-elements"]], "polars.Series.list.set_difference": [[1075, "polars-series-list-set-difference"]], "polars.Series.nan_min": [[1103, "polars-series-nan-min"]], "polars.Series.peak_max": [[1108, "polars-series-peak-max"]], "polars.Series.list.set_symmetric_difference": [[1077, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.sum": [[1083, "polars-series-list-sum"]], "polars.Series.pct_change": [[1107, "polars-series-pct-change"]], "polars.Series.reshape": [[1118, "polars-series-reshape"]], "polars.Series.mode": [[1098, "polars-series-mode"]], "polars.Series.list.set_union": [[1078, "polars-series-list-set-union"]], "polars.Series.list.median": [[1070, "polars-series-list-median"]], "polars.Series.list.set_intersection": [[1076, "polars-series-list-set-intersection"]], "polars.Series.n_chunks": [[1099, "polars-series-n-chunks"]], "polars.Series.null_count": [[1106, "polars-series-null-count"]], "polars.Series.list.min": [[1071, "polars-series-list-min"]], "polars.Series.rechunk": [[1114, "polars-series-rechunk"]], "polars.Series.list.slice": [[1080, "polars-series-list-slice"]], "polars.Series.nan_max": [[1102, "polars-series-nan-max"]], "polars.Series.reverse": [[1119, "polars-series-reverse"]], "polars.Series.list.len": [[1067, "polars-series-list-len"]], "polars.Series.list.max": [[1068, "polars-series-list-max"]], "polars.Series.log1p": [[1091, "polars-series-log1p"]], "polars.Series.list.head": [[1064, "polars-series-list-head"]], "polars.Series.list.n_unique": [[1072, "polars-series-list-n-unique"]], "polars.Series.rename": [[1116, "polars-series-rename"]], "polars.Series.list.unique": [[1087, "polars-series-list-unique"]], "polars.Series.new_from_index": [[1104, "polars-series-new-from-index"]], "polars.Series.list.var": [[1088, "polars-series-list-var"]], "polars.Series.reinterpret": [[1115, "polars-series-reinterpret"]], "polars.Series.replace": [[1117, "polars-series-replace"]], "polars.Series.peak_min": [[1109, "polars-series-peak-min"]], "polars.Series.list.to_array": [[1085, "polars-series-list-to-array"]], "polars.Series.max": [[1094, "polars-series-max"]], "polars.Series.list.to_struct": [[1086, "polars-series-list-to-struct"]], "polars.Series.qcut": [[1111, "polars-series-qcut"]], "polars.Series.list.sample": [[1074, "polars-series-list-sample"]], "polars.Series.n_unique": [[1100, "polars-series-n-unique"]], "polars.Series.name": [[1101, "polars-series-name"]], "polars.Series.quantile": [[1112, "polars-series-quantile"]], "polars.Series.list.mean": [[1069, "polars-series-list-mean"]], "polars.Series.min": [[1097, "polars-series-min"]], "polars.Series.list.join": [[1065, "polars-series-list-join"]], "polars.Series.not_": [[1105, "polars-series-not"]], "polars.Series.mean": [[1095, "polars-series-mean"]], "polars.Series.median": [[1096, "polars-series-median"]], "polars.Series.list.tail": [[1084, "polars-series-list-tail"]], "polars.Series.list.reverse": [[1073, "polars-series-list-reverse"]], "polars.Series.list.shift": [[1079, "polars-series-list-shift"]], "polars.Series.log": [[1089, "polars-series-log"]], "polars.Series.log10": [[1090, "polars-series-log10"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.exceptions.PolarsError": [[101, "polars-exceptions-polarserror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.InvalidAssert": [[92, "polars-exceptions-invalidassert"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.exceptions.PerformanceWarning": [[100, "polars-exceptions-performancewarning"]], "polars.exceptions.ParameterCollisionError": [[99, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PolarsPanicError": [[103, "polars-exceptions-polarspanicerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.exceptions.DuplicateError": [[91, "polars-exceptions-duplicateerror"]], "polars.exceptions.ModuleUpgradeRequired": [[95, "polars-exceptions-moduleupgraderequired"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.PolarsInefficientMapWarning": [[102, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.Series.is_empty": [[1033, "polars-series-is-empty"]], "polars.Series.list.count_matches": [[1055, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1056, "polars-series-list-diff"]], "polars.Series.is_null": [[1042, "polars-series-is-null"]], "polars.Series.list.any": [[1050, "polars-series-list-any"]], "polars.Series.is_finite": [[1034, "polars-series-is-finite"]], "polars.Series.get_chunks": [[1022, "polars-series-get-chunks"]], "polars.Series.len": [[1047, "polars-series-len"]], "polars.Series.list.explode": [[1059, "polars-series-list-explode"]], "polars.Series.is_first_distinct": [[1035, "polars-series-is-first-distinct"]], "polars.Series.fill_null": [[1016, "polars-series-fill-null"]], "polars.Series.head": [[1026, "polars-series-head"]], "polars.Series.list.gather_every": [[1062, "polars-series-list-gather-every"]], "polars.Series.hash": [[1025, "polars-series-hash"]], "polars.Series.is_in": [[1036, "polars-series-is-in"]], "polars.Series.extend": [[1013, "polars-series-extend"]], "polars.Series.interpolate_by": [[1030, "polars-series-interpolate-by"]], "polars.Series.item": [[1045, "polars-series-item"]], "polars.Series.is_duplicated": [[1032, "polars-series-is-duplicated"]], "polars.Series.exp": [[1011, "polars-series-exp"]], "polars.Series.extend_constant": [[1014, "polars-series-extend-constant"]], "polars.Series.interpolate": [[1029, "polars-series-interpolate"]], "polars.Series.gather_every": [[1021, "polars-series-gather-every"]], "polars.Series.list.arg_max": [[1051, "polars-series-list-arg-max"]], "polars.Series.ewm_var": [[1010, "polars-series-ewm-var"]], "polars.Series.flags": [[1018, "polars-series-flags"]], "polars.Series.list.all": [[1049, "polars-series-list-all"]], "polars.Series.has_nulls": [[1023, "polars-series-has-nulls"]], "polars.Series.floor": [[1019, "polars-series-floor"]], "polars.Series.list.contains": [[1054, "polars-series-list-contains"]], "polars.Series.ewm_std": [[1009, "polars-series-ewm-std"]], "polars.Series.hist": [[1027, "polars-series-hist"]], "polars.Series.is_last_distinct": [[1038, "polars-series-is-last-distinct"]], "polars.Series.explode": [[1012, "polars-series-explode"]], "polars.Series.list.arg_min": [[1052, "polars-series-list-arg-min"]], "polars.Series.list.eval": [[1058, "polars-series-list-eval"]], "polars.Series.ewm_mean_by": [[1008, "polars-series-ewm-mean-by"]], "polars.Series.is_between": [[1031, "polars-series-is-between"]], "polars.Series.is_infinite": [[1037, "polars-series-is-infinite"]], "polars.Series.is_not_null": [[1041, "polars-series-is-not-null"]], "polars.Series.limit": [[1048, "polars-series-limit"]], "polars.Series.kurtosis": [[1046, "polars-series-kurtosis"]], "polars.Series.is_not_nan": [[1040, "polars-series-is-not-nan"]], "polars.Series.list.concat": [[1053, "polars-series-list-concat"]], "polars.Series.has_validity": [[1024, "polars-series-has-validity"]], "polars.Series.gather": [[1020, "polars-series-gather"]], "polars.Series.fill_nan": [[1015, "polars-series-fill-nan"]], "polars.Series.filter": [[1017, "polars-series-filter"]], "polars.Series.is_unique": [[1044, "polars-series-is-unique"]], "polars.Series.implode": [[1028, "polars-series-implode"]], "polars.Series.is_nan": [[1039, "polars-series-is-nan"]], "polars.Series.list.gather": [[1061, "polars-series-list-gather"]], "polars.Series.list.first": [[1060, "polars-series-list-first"]], "polars.Series.list.get": [[1063, "polars-series-list-get"]], "polars.Series.is_sorted": [[1043, "polars-series-is-sorted"]], "polars.Series.list.drop_nulls": [[1057, "polars-series-list-drop-nulls"]], "polars.Series.cum_sum": [[947, "polars-series-cum-sum"]], "polars.Series.bin.decode": [[924, "polars-series-bin-decode"]], "polars.Series.arr.shift": [[915, "polars-series-arr-shift"]], "polars.Series.cum_max": [[944, "polars-series-cum-max"]], "polars.Series.arr.arg_min": [[902, "polars-series-arr-arg-min"]], "polars.Series.arg_sort": [[896, "polars-series-arg-sort"]], "polars.Series.arg_true": [[897, "polars-series-arg-true"]], "polars.Series.arr.to_struct": [[920, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[921, "polars-series-arr-unique"]], "polars.Series.arr.min": [[912, "polars-series-arr-min"]], "polars.Series.arr.first": [[906, "polars-series-arr-first"]], "polars.Series.arr.arg_max": [[901, "polars-series-arr-arg-max"]], "polars.Series.cot": [[942, "polars-series-cot"]], "polars.Series.arr.join": [[908, "polars-series-arr-join"]], "polars.Series.cat.is_local": [[931, "polars-series-cat-is-local"]], "polars.Series.arr.reverse": [[914, "polars-series-arr-reverse"]], "polars.Series.arr.last": [[909, "polars-series-arr-last"]], "polars.Series.arr.any": [[900, "polars-series-arr-any"]], "polars.Series.arr.all": [[899, "polars-series-arr-all"]], "polars.Series.arr.explode": [[905, "polars-series-arr-explode"]], "polars.Series.arr.n_unique": [[913, "polars-series-arr-n-unique"]], "polars.Series.cumulative_eval": [[948, "polars-series-cumulative-eval"]], "polars.Series.arg_unique": [[898, "polars-series-arg-unique"]], "polars.Series.arr.var": [[922, "polars-series-arr-var"]], "polars.Series.cum_count": [[943, "polars-series-cum-count"]], "polars.Series.cat.to_local": [[932, "polars-series-cat-to-local"]], "polars.Series.arr.to_list": [[919, "polars-series-arr-to-list"]], "polars.Series.arr.get": [[907, "polars-series-arr-get"]], "polars.Series.bin.starts_with": [[927, "polars-series-bin-starts-with"]], "polars.Series.cum_prod": [[946, "polars-series-cum-prod"]], "polars.Series.ceil": [[935, "polars-series-ceil"]], "polars.Series.diff": [[951, "polars-series-diff"]], "polars.Series.arr.std": [[917, "polars-series-arr-std"]], "polars.Series.arr.count_matches": [[904, "polars-series-arr-count-matches"]], "polars.Series.bin.encode": [[925, "polars-series-bin-encode"]], "polars.Series.clone": [[939, "polars-series-clone"]], "polars.Series.cat.uses_lexical_ordering": [[933, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arr.contains": [[903, "polars-series-arr-contains"]], "polars.Series.cos": [[940, "polars-series-cos"]], "polars.Series.cosh": [[941, "polars-series-cosh"]], "polars.Series.clear": [[937, "polars-series-clear"]], "polars.Series.arr.max": [[910, "polars-series-arr-max"]], "polars.Series.cum_min": [[945, "polars-series-cum-min"]], "polars.Series.arr.sort": [[916, "polars-series-arr-sort"]], "polars.Series.chunk_lengths": [[936, "polars-series-chunk-lengths"]], "polars.Series.cut": [[949, "polars-series-cut"]], "polars.Series.cat.get_categories": [[930, "polars-series-cat-get-categories"]], "polars.Series.describe": [[950, "polars-series-describe"]], "polars.Series.bottom_k": [[928, "polars-series-bottom-k"]], "polars.Series.bin.contains": [[923, "polars-series-bin-contains"]], "polars.Series.arr.median": [[911, "polars-series-arr-median"]], "polars.Series.arr.sum": [[918, "polars-series-arr-sum"]], "polars.Series.bin.ends_with": [[926, "polars-series-bin-ends-with"]], "polars.Series.cast": [[929, "polars-series-cast"]], "polars.Series.clip": [[938, "polars-series-clip"]], "polars.Series.cbrt": [[934, "polars-series-cbrt"]], "polars.Series.dt.offset_by": [[981, "polars-series-dt-offset-by"]], "polars.Series.estimated_size": [[1006, "polars-series-estimated-size"]], "polars.Series.dt.max": [[969, "polars-series-dt-max"]], "polars.Series.dt.iso_year": [[968, "polars-series-dt-iso-year"]], "polars.Series.dt.total_hours": [[992, "polars-series-dt-total-hours"]], "polars.Series.dt.cast_time_unit": [[957, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.total_milliseconds": [[994, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_days": [[991, "polars-series-dt-total-days"]], "polars.Series.dt.datetime": [[962, "polars-series-dt-datetime"]], "polars.Series.dt.week": [[999, "polars-series-dt-week"]], "polars.Series.dt.millennium": [[973, "polars-series-dt-millennium"]], "polars.Series.dt.round": [[985, "polars-series-dt-round"]], "polars.Series.dt.millisecond": [[974, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[975, "polars-series-dt-min"]], "polars.Series.dt.total_microseconds": [[993, "polars-series-dt-total-microseconds"]], "polars.Series.dt.ordinal_day": [[982, "polars-series-dt-ordinal-day"]], "polars.Series.dt.total_nanoseconds": [[996, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.century": [[958, "polars-series-dt-century"]], "polars.Series.dt.is_leap_year": [[967, "polars-series-dt-is-leap-year"]], "polars.Series.dt.timestamp": [[989, "polars-series-dt-timestamp"]], "polars.Series.ewm_mean": [[1007, "polars-series-ewm-mean"]], "polars.Series.dt.strftime": [[987, "polars-series-dt-strftime"]], "polars.Series.dt.combine": [[959, "polars-series-dt-combine"]], "polars.Series.dt.to_string": [[990, "polars-series-dt-to-string"]], "polars.Series.dt.nanosecond": [[980, "polars-series-dt-nanosecond"]], "polars.Series.dt.weekday": [[1000, "polars-series-dt-weekday"]], "polars.Series.dt.date": [[961, "polars-series-dt-date"]], "polars.Series.drop_nans": [[953, "polars-series-drop-nans"]], "polars.Series.dt.convert_time_zone": [[960, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.quarter": [[983, "polars-series-dt-quarter"]], "polars.Series.dt.month_end": [[978, "polars-series-dt-month-end"]], "polars.Series.dt.minute": [[976, "polars-series-dt-minute"]], "polars.Series.drop_nulls": [[954, "polars-series-drop-nulls"]], "polars.Series.equals": [[1005, "polars-series-equals"]], "polars.Series.entropy": [[1004, "polars-series-entropy"]], "polars.Series.dt.with_time_unit": [[1001, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1002, "polars-series-dt-year"]], "polars.Series.dt.month": [[977, "polars-series-dt-month"]], "polars.Series.dt.replace_time_zone": [[984, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.dst_offset": [[964, "polars-series-dt-dst-offset"]], "polars.Series.dt.add_business_days": [[955, "polars-series-dt-add-business-days"]], "polars.Series.dt.median": [[971, "polars-series-dt-median"]], "polars.Series.dt.epoch": [[965, "polars-series-dt-epoch"]], "polars.Series.dt.microsecond": [[972, "polars-series-dt-microsecond"]], "polars.Series.dt.base_utc_offset": [[956, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.month_start": [[979, "polars-series-dt-month-start"]], "polars.Series.dot": [[952, "polars-series-dot"]], "polars.Series.dt.mean": [[970, "polars-series-dt-mean"]], "polars.Series.dt.truncate": [[998, "polars-series-dt-truncate"]], "polars.Series.dt.day": [[963, "polars-series-dt-day"]], "polars.Series.dt.hour": [[966, "polars-series-dt-hour"]], "polars.Series.dt.time": [[988, "polars-series-dt-time"]], "polars.Series.dtype": [[1003, "polars-series-dtype"]], "polars.Series.dt.second": [[986, "polars-series-dt-second"]], "polars.Series.dt.total_seconds": [[997, "polars-series-dt-total-seconds"]], "polars.Series.dt.total_minutes": [[995, "polars-series-dt-total-minutes"]], "polars.LazyFrame.mean": [[820, "polars-lazyframe-mean"]], "polars.LazyFrame.rename": [[829, "polars-lazyframe-rename"]], "polars.LazyFrame.bottom_k": [[785, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.max": [[819, "polars-lazyframe-max"]], "polars.LazyFrame.quantile": [[828, "polars-lazyframe-quantile"]], "polars.LazyFrame.last": [[815, "polars-lazyframe-last"]], "polars.LazyFrame.show_graph": [[838, "polars-lazyframe-show-graph"]], "polars.LazyFrame.limit": [[817, "polars-lazyframe-limit"]], "polars.LazyFrame.clone": [[789, "polars-lazyframe-clone"]], "polars.LazyFrame.pipe": [[826, "polars-lazyframe-pipe"]], "polars.LazyFrame.collect_schema": [[792, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.shift": [[837, "polars-lazyframe-shift"]], "polars.LazyFrame.gather_every": [[807, "polars-lazyframe-gather-every"]], "polars.LazyFrame.min": [[824, "polars-lazyframe-min"]], "polars.LazyFrame.serialize": [[835, "polars-lazyframe-serialize"]], "polars.LazyFrame.slice": [[839, "polars-lazyframe-slice"]], "polars.LazyFrame.collect_async": [[791, "polars-lazyframe-collect-async"]], "polars.LazyFrame.cache": [[786, "polars-lazyframe-cache"]], "polars.LazyFrame.dtypes": [[799, "polars-lazyframe-dtypes"]], "polars.LazyFrame.join_asof": [[814, "polars-lazyframe-join-asof"]], "polars.LazyFrame.group_by_dynamic": [[809, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.clear": [[788, "polars-lazyframe-clear"]], "polars.LazyFrame.rolling": [[831, "polars-lazyframe-rolling"]], "polars.LazyFrame.interpolate": [[812, "polars-lazyframe-interpolate"]], "polars.LazyFrame.select": [[833, "polars-lazyframe-select"]], "polars.LazyFrame.fill_nan": [[803, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.lazy": [[816, "polars-lazyframe-lazy"]], "polars.LazyFrame.reverse": [[830, "polars-lazyframe-reverse"]], "polars.LazyFrame.drop_nulls": [[798, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.group_by": [[808, "polars-lazyframe-group-by"]], "polars.LazyFrame.deserialize": [[796, "polars-lazyframe-deserialize"]], "polars.LazyFrame.fetch": [[802, "polars-lazyframe-fetch"]], "polars.LazyFrame.schema": [[832, "polars-lazyframe-schema"]], "polars.LazyFrame.cast": [[787, "polars-lazyframe-cast"]], "polars.LazyFrame.explain": [[800, "polars-lazyframe-explain"]], "polars.LazyFrame.filter": [[805, "polars-lazyframe-filter"]], "polars.LazyFrame.inspect": [[811, "polars-lazyframe-inspect"]], "polars.LazyFrame.set_sorted": [[836, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.explode": [[801, "polars-lazyframe-explode"]], "polars.LazyFrame.select_seq": [[834, "polars-lazyframe-select-seq"]], "polars.LazyFrame.collect": [[790, "polars-lazyframe-collect"]], "polars.LazyFrame.fill_null": [[804, "polars-lazyframe-fill-null"]], "polars.LazyFrame.join": [[813, "polars-lazyframe-join"]], "polars.LazyFrame.melt": [[822, "polars-lazyframe-melt"]], "polars.LazyFrame.count": [[794, "polars-lazyframe-count"]], "polars.LazyFrame.first": [[806, "polars-lazyframe-first"]], "polars.LazyFrame.columns": [[793, "polars-lazyframe-columns"]], "polars.LazyFrame.profile": [[827, "polars-lazyframe-profile"]], "polars.LazyFrame.map_batches": [[818, "polars-lazyframe-map-batches"]], "polars.LazyFrame.merge_sorted": [[823, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.median": [[821, "polars-lazyframe-median"]], "polars.LazyFrame.describe": [[795, "polars-lazyframe-describe"]], "polars.LazyFrame.null_count": [[825, "polars-lazyframe-null-count"]], "polars.LazyFrame.approx_n_unique": [[784, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.head": [[810, "polars-lazyframe-head"]], "polars.LazyFrame.drop": [[797, "polars-lazyframe-drop"]], "Table Operations": [[1258, "table-operations"]], "CREATE TABLE": [[1258, "create-table"]], "DROP TABLES": [[1258, "drop-tables"]], "EXPLAIN": [[1258, "explain"]], "SHOW TABLES": [[1258, "show-tables"]], "UNNEST": [[1258, "unnest"], [1248, "unnest"]], "TRUNCATE": [[1258, "truncate"]], "List": [[1233, "list"], [770, "list"]], "polars.SQLContext.execute": [[1240, "polars-sqlcontext-execute"]], "Set Operations": [[1257, "set-operations"]], "EXCEPT": [[1257, "except"]], "INTERSECT": [[1257, "intersect"]], "UNION": [[1257, "union"]], "UNION ALL": [[1257, "union-all"]], "UNION BY NAME": [[1257, "union-by-name"]], "polars.SQLContext.unregister": [[1245, "polars-sqlcontext-unregister"]], "SQL Functions": [[1250, "sql-functions"]], "Testing": [[1259, "testing"]], "Asserts": [[1259, "asserts"]], "Parametric testing": [[1259, "parametric-testing"]], "Polars strategies": [[1259, "polars-strategies"]], "Strategy helpers": [[1259, "strategy-helpers"]], "Profiles": [[1259, "profiles"]], "Trigonometry": [[1254, "trigonometry"]], "ACOS": [[1254, "acos"]], "ACOSD": [[1254, "acosd"]], "ASIN": [[1254, "asin"]], "ASIND": [[1254, "asind"]], "ATAN": [[1254, "atan"]], "ATAND": [[1254, "atand"]], "ATAN2": [[1254, "atan2"]], "ATAN2D": [[1254, "atan2d"]], "COT": [[1254, "cot"]], "COTD": [[1254, "cotd"]], "COS": [[1254, "cos"]], "COSD": [[1254, "cosd"]], "DEGREES": [[1254, "degrees"]], "RADIANS": [[1254, "radians"]], "SIN": [[1254, "sin"]], "SIND": [[1254, "sind"]], "TAN": [[1254, "tan"]], "TAND": [[1254, "tand"]], "Math": [[1251, "math"]], "ABS": [[1251, "abs"]], "CBRT": [[1251, "cbrt"]], "CEIL": [[1251, "ceil"]], "DIV": [[1251, "div"]], "EXP": [[1251, "exp"]], "FLOOR": [[1251, "floor"]], "LN": [[1251, "ln"]], "LOG": [[1251, "log"]], "LOG2": [[1251, "log2"]], "LOG10": [[1251, "log10"]], "LOG1P": [[1251, "log1p"]], "MOD": [[1251, "mod"]], "PI": [[1251, "pi"]], "POW": [[1251, "pow"]], "ROUND": [[1251, "round"]], "SIGN": [[1251, "sign"]], "SQRT": [[1251, "sqrt"]], "Struct": [[1238, "struct"], [777, "struct"]], "String": [[1252, "string"], [1237, "string"], [776, "string"], [312, "string"]], "BIT_LENGTH": [[1252, "bit-length"]], "CONCAT": [[1252, "concat"]], "CONCAT_WS": [[1252, "concat-ws"]], "ENDS_WITH": [[1252, "ends-with"]], "INITCAP": [[1252, "initcap"]], "LEFT": [[1252, "left"]], "LENGTH": [[1252, "length"]], "LOWER": [[1252, "lower"]], "LTRIM": [[1252, "ltrim"]], "OCTET_LENGTH": [[1252, "octet-length"]], "REGEXP_LIKE": [[1252, "regexp-like"]], "REPLACE": [[1252, "replace"]], "REVERSE": [[1252, "reverse"]], "RIGHT": [[1252, "right"]], "RTRIM": [[1252, "rtrim"]], "STARTS_WITH": [[1252, "starts-with"]], "STRPOS": [[1252, "strpos"]], "SUBSTRING": [[1252, "substring"]], "UPPER": [[1252, "upper"]], "Series": [[1232, "series"]], "polars.SQLContext.tables": [[1244, "polars-sqlcontext-tables"]], "Temporal": [[1253, "temporal"], [1239, "temporal"], [778, "temporal"], [312, "temporal"]], "DATE": [[1253, "date"]], "DATE_PART": [[1253, "date-part"]], "EXTRACT": [[1253, "extract"]], "Manipulation/selection": [[1235, "manipulation-selection"], [877, "manipulation-selection"], [773, "manipulation-selection"], [309, "manipulation-selection"]], "SQL Clauses": [[1246, "sql-clauses"]], "SELECT": [[1246, "select"]], "FROM": [[1246, "from"]], "JOIN": [[1246, "join"]], "WHERE": [[1246, "where"]], "GROUP BY": [[1246, "group-by"]], "HAVING": [[1246, "having"]], "ORDER BY": [[1246, "order-by"]], "LIMIT": [[1246, "limit"]], "OFFSET": [[1246, "offset"]], "Python API": [[1256, "python-api"]], "SQLContext": [[1256, "sqlcontext"]], "Methods": [[1256, "methods"]], "SQL Interface": [[1255, "sql-interface"]], "polars.SQLContext.register_many": [[1243, "polars-sqlcontext-register-many"]], "Miscellaneous": [[1234, "miscellaneous"], [876, "miscellaneous"], [772, "miscellaneous"], [780, "miscellaneous"], [308, "miscellaneous"]], "ARRAY_AGG": [[1248, "array-agg"]], "ARRAY_CONTAINS": [[1248, "array-contains"]], "ARRAY_GET": [[1248, "array-get"]], "ARRAY_LENGTH": [[1248, "array-length"]], "ARRAY_LOWER": [[1248, "array-lower"]], "ARRAY_MEAN": [[1248, "array-mean"]], "ARRAY_REVERSE": [[1248, "array-reverse"]], "ARRAY_SUM": [[1248, "array-sum"]], "ARRAY_TO_STRING": [[1248, "array-to-string"]], "ARRAY_UNIQUE": [[1248, "array-unique"]], "ARRAY_UPPER": [[1248, "array-upper"]], "polars.SQLContext.register_globals": [[1242, "polars-sqlcontext-register-globals"]], "Plot": [[1236, "plot"], [310, "plot"]], "polars.SQLContext.register": [[1241, "polars-sqlcontext-register"]], "Aggregate": [[1247, "aggregate"]], "AVG": [[1247, "avg"]], "COUNT": [[1247, "count"]], "FIRST": [[1247, "first"]], "LAST": [[1247, "last"]], "MAX": [[1247, "max"]], "MEDIAN": [[1247, "median"]], "MIN": [[1247, "min"]], "STDDEV": [[1247, "stddev"]], "SUM": [[1247, "sum"]], "VARIANCE": [[1247, "variance"]], "Conditional": [[1249, "conditional"]], "COALESCE": [[1249, "coalesce"]], "GREATEST": [[1249, "greatest"]], "IF": [[1249, "if"]], "IFNULL": [[1249, "ifnull"]], "LEAST": [[1249, "least"]], "NULLIF": [[1249, "nullif"]], "polars.datetime_range": [[713, "polars-datetime-range"]], "polars.last": [[727, "polars-last"]], "polars.from_epoch": [[721, "polars-from-epoch"]], "polars.arctan2d": [[694, "polars-arctan2d"]], "polars.duration": [[715, "polars-duration"]], "polars.cum_reduce": [[706, "polars-cum-reduce"]], "polars.format": [[720, "polars-format"]], "polars.count": [[702, "polars-count"]], "polars.any": [[689, "polars-any"]], "polars.arg_sort_by": [[695, "polars-arg-sort-by"]], "polars.Expr.var": [[684, "polars-expr-var"]], "polars.Expr.where": [[685, "polars-expr-where"]], "polars.datetime_ranges": [[714, "polars-datetime-ranges"]], "polars.corr": [[701, "polars-corr"]], "polars.exclude": [[717, "polars-exclude"]], "polars.approx_n_unique": [[691, "polars-approx-n-unique"]], "polars.cum_sum": [[707, "polars-cum-sum"]], "polars.Expr.tanh": [[675, "polars-expr-tanh"]], "polars.element": [[716, "polars-element"]], "polars.first": [[718, "polars-first"]], "polars.Expr.value_counts": [[683, "polars-expr-value-counts"]], "polars.all": [[687, "polars-all"]], "polars.arange": [[692, "polars-arange"]], "polars.Expr.top_k_by": [[678, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[679, "polars-expr-truediv"]], "polars.any_horizontal": [[690, "polars-any-horizontal"]], "polars.date": [[709, "polars-date"]], "polars.int_range": [[725, "polars-int-range"]], "polars.Expr.xor": [[686, "polars-expr-xor"]], "polars.Expr.to_physical": [[676, "polars-expr-to-physical"]], "polars.cum_fold": [[705, "polars-cum-fold"]], "polars.fold": [[719, "polars-fold"]], "polars.business_day_count": [[697, "polars-business-day-count"]], "polars.Expr.tan": [[674, "polars-expr-tan"]], "polars.groups": [[722, "polars-groups"]], "polars.date_ranges": [[711, "polars-date-ranges"]], "polars.implode": [[724, "polars-implode"]], "polars.arg_where": [[696, "polars-arg-where"]], "polars.cum_count": [[704, "polars-cum-count"]], "polars.Expr.unique_counts": [[681, "polars-expr-unique-counts"]], "polars.concat_str": [[700, "polars-concat-str"]], "polars.Expr.top_k": [[677, "polars-expr-top-k"]], "polars.Expr.tail": [[673, "polars-expr-tail"]], "polars.cov": [[703, "polars-cov"]], "polars.date_range": [[710, "polars-date-range"]], "polars.coalesce": [[698, "polars-coalesce"]], "polars.datetime": [[712, "polars-datetime"]], "polars.cum_sum_horizontal": [[708, "polars-cum-sum-horizontal"]], "polars.all_horizontal": [[688, "polars-all-horizontal"]], "polars.Expr.upper_bound": [[682, "polars-expr-upper-bound"]], "polars.head": [[723, "polars-head"]], "polars.concat_list": [[699, "polars-concat-list"]], "polars.Expr.unique": [[680, "polars-expr-unique"]], "polars.int_ranges": [[726, "polars-int-ranges"]], "polars.arctan2": [[693, "polars-arctan2"]], "polars.Expr.sum": [[672, "polars-expr-sum"]], "polars.Expr.std": [[621, "polars-expr-std"]], "polars.Expr.struct.with_fields": [[670, "polars-expr-struct-with-fields"]], "polars.Expr.str.extract_groups": [[632, "polars-expr-str-extract-groups"]], "polars.Expr.str.to_titlecase": [[664, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_datetime": [[659, "polars-expr-str-to-datetime"]], "polars.Expr.str.json_decode": [[636, "polars-expr-str-json-decode"]], "polars.Expr.str.pad_end": [[640, "polars-expr-str-pad-end"]], "polars.Expr.str.to_uppercase": [[665, "polars-expr-str-to-uppercase"]], "polars.Expr.str.concat": [[622, "polars-expr-str-concat"]], "polars.Expr.str.strip_chars": [[651, "polars-expr-str-strip-chars"]], "polars.Expr.str.to_decimal": [[660, "polars-expr-str-to-decimal"]], "polars.Expr.struct.field": [[667, "polars-expr-struct-field"]], "polars.Expr.sub": [[671, "polars-expr-sub"]], "polars.Expr.str.strip_suffix": [[655, "polars-expr-str-strip-suffix"]], "polars.Expr.str.to_time": [[663, "polars-expr-str-to-time"]], "polars.Expr.sort": [[618, "polars-expr-sort"]], "polars.Expr.str.ends_with": [[628, "polars-expr-str-ends-with"]], "polars.Expr.str.replace": [[642, "polars-expr-str-replace"]], "polars.Expr.str.reverse": [[645, "polars-expr-str-reverse"]], "polars.Expr.str.zfill": [[666, "polars-expr-str-zfill"]], "polars.Expr.str.json_path_match": [[637, "polars-expr-str-json-path-match"]], "polars.Expr.str.strptime": [[656, "polars-expr-str-strptime"]], "polars.Expr.str.encode": [[627, "polars-expr-str-encode"]], "polars.Expr.str.split_exact": [[648, "polars-expr-str-split-exact"]], "polars.Expr.sort_by": [[619, "polars-expr-sort-by"]], "polars.Expr.str.to_lowercase": [[662, "polars-expr-str-to-lowercase"]], "polars.Expr.str.head": [[634, "polars-expr-str-head"]], "polars.Expr.struct.rename_fields": [[669, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_chars_start": [[653, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.to_integer": [[661, "polars-expr-str-to-integer"]], "polars.Expr.str.replace_many": [[644, "polars-expr-str-replace-many"]], "polars.Expr.str.strip_prefix": [[654, "polars-expr-str-strip-prefix"]], "polars.Expr.str.split": [[647, "polars-expr-str-split"]], "polars.Expr.str.len_bytes": [[638, "polars-expr-str-len-bytes"]], "polars.Expr.str.pad_start": [[641, "polars-expr-str-pad-start"]], "polars.Expr.str.extract_all": [[631, "polars-expr-str-extract-all"]], "polars.Expr.skew": [[616, "polars-expr-skew"]], "polars.Expr.str.contains_any": [[624, "polars-expr-str-contains-any"]], "polars.Expr.str.replace_all": [[643, "polars-expr-str-replace-all"]], "polars.Expr.str.slice": [[646, "polars-expr-str-slice"]], "polars.Expr.str.to_date": [[658, "polars-expr-str-to-date"]], "polars.Expr.struct.json_encode": [[668, "polars-expr-struct-json-encode"]], "polars.Expr.str.splitn": [[649, "polars-expr-str-splitn"]], "polars.Expr.str.find": [[633, "polars-expr-str-find"]], "polars.Expr.slice": [[617, "polars-expr-slice"]], "polars.Expr.str.decode": [[626, "polars-expr-str-decode"]], "polars.Expr.str.starts_with": [[650, "polars-expr-str-starts-with"]], "polars.Expr.str.extract": [[630, "polars-expr-str-extract"]], "polars.Expr.str.count_matches": [[625, "polars-expr-str-count-matches"]], "polars.Expr.str.join": [[635, "polars-expr-str-join"]], "polars.Expr.str.strip_chars_end": [[652, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.contains": [[623, "polars-expr-str-contains"]], "polars.Expr.str.explode": [[629, "polars-expr-str-explode"]], "polars.Expr.sqrt": [[620, "polars-expr-sqrt"]], "polars.Expr.str.tail": [[657, "polars-expr-str-tail"]], "polars.Expr.str.len_chars": [[639, "polars-expr-str-len-chars"]], "polars.Expr.or_": [[566, "polars-expr-or"]], "polars.Expr.reinterpret": [[579, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[580, "polars-expr-repeat-by"]], "polars.Expr.shift": [[610, "polars-expr-shift"]], "polars.Expr.not_": [[564, "polars-expr-not"]], "polars.Expr.qcut": [[574, "polars-expr-qcut"]], "polars.Expr.rank": [[577, "polars-expr-rank"]], "polars.Expr.rechunk": [[578, "polars-expr-rechunk"]], "polars.Expr.reverse": [[583, "polars-expr-reverse"]], "polars.Expr.round": [[605, "polars-expr-round"]], "polars.Expr.sample": [[607, "polars-expr-sample"]], "polars.Expr.nan_min": [[560, "polars-expr-nan-min"]], "polars.Expr.sin": [[614, "polars-expr-sin"]], "polars.Expr.radians": [[576, "polars-expr-radians"]], "polars.Expr.rolling_sum": [[601, "polars-expr-rolling-sum"]], "polars.Expr.rolling_var_by": [[604, "polars-expr-rolling-var-by"]], "polars.Expr.replace": [[581, "polars-expr-replace"]], "polars.Expr.rolling_max": [[588, "polars-expr-rolling-max"]], "polars.Expr.rolling_var": [[603, "polars-expr-rolling-var"]], "polars.Expr.rolling_min_by": [[595, "polars-expr-rolling-min-by"]], "polars.Expr.round_sig_figs": [[606, "polars-expr-round-sig-figs"]], "polars.Expr.sinh": [[615, "polars-expr-sinh"]], "polars.Expr.rolling_std": [[599, "polars-expr-rolling-std"]], "polars.Expr.ne_missing": [[562, "polars-expr-ne-missing"]], "polars.Expr.search_sorted": [[608, "polars-expr-search-sorted"]], "polars.Expr.null_count": [[565, "polars-expr-null-count"]], "polars.Expr.rolling_quantile_by": [[597, "polars-expr-rolling-quantile-by"]], "polars.Expr.ne": [[561, "polars-expr-ne"]], "polars.Expr.peak_min": [[570, "polars-expr-peak-min"]], "polars.Expr.pct_change": [[568, "polars-expr-pct-change"]], "polars.Expr.rolling_min": [[594, "polars-expr-rolling-min"]], "polars.Expr.sign": [[613, "polars-expr-sign"]], "polars.Expr.neg": [[563, "polars-expr-neg"]], "polars.Expr.rolling_mean_by": [[591, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[592, "polars-expr-rolling-median"]], "polars.Expr.rolling_mean": [[590, "polars-expr-rolling-mean"]], "polars.Expr.rle": [[584, "polars-expr-rle"]], "polars.Expr.pow": [[572, "polars-expr-pow"]], "polars.Expr.pipe": [[571, "polars-expr-pipe"]], "polars.Expr.rolling_max_by": [[589, "polars-expr-rolling-max-by"]], "polars.Expr.shuffle": [[612, "polars-expr-shuffle"]], "polars.Expr.rolling_sum_by": [[602, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_skew": [[598, "polars-expr-rolling-skew"]], "polars.Expr.set_sorted": [[609, "polars-expr-set-sorted"]], "polars.Expr.rle_id": [[585, "polars-expr-rle-id"]], "polars.Expr.over": [[567, "polars-expr-over"]], "polars.Expr.reshape": [[582, "polars-expr-reshape"]], "polars.Expr.product": [[573, "polars-expr-product"]], "polars.Expr.rolling_quantile": [[596, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_map": [[587, "polars-expr-rolling-map"]], "polars.Expr.shrink_dtype": [[611, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_median_by": [[593, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_std_by": [[600, "polars-expr-rolling-std-by"]], "polars.Expr.quantile": [[575, "polars-expr-quantile"]], "polars.Expr.peak_max": [[569, "polars-expr-peak-max"]], "polars.Expr.rolling": [[586, "polars-expr-rolling"]], "polars.Expr.meta.undo_aliases": [[543, "polars-expr-meta-undo-aliases"]], "polars.Expr.max": [[530, "polars-expr-max"]], "polars.Expr.meta.pop": [[539, "polars-expr-meta-pop"]], "polars.Expr.name.prefix_fields": [[554, "polars-expr-name-prefix-fields"]], "polars.Expr.meta.eq": [[533, "polars-expr-meta-eq"]], "polars.Expr.list.sort": [[515, "polars-expr-list-sort"]], "polars.Expr.name.prefix": [[553, "polars-expr-name-prefix"]], "polars.Expr.list.sample": [[508, "polars-expr-list-sample"]], "polars.Expr.mode": [[547, "polars-expr-mode"]], "polars.Expr.log1p": [[525, "polars-expr-log1p"]], "polars.Expr.map_batches": [[528, "polars-expr-map-batches"]], "polars.Expr.name.suffix_fields": [[556, "polars-expr-name-suffix-fields"]], "polars.Expr.name.keep": [[550, "polars-expr-name-keep"]], "polars.Expr.mean": [[531, "polars-expr-mean"]], "polars.Expr.meta.tree_format": [[542, "polars-expr-meta-tree-format"]], "polars.Expr.meta.has_multiple_outputs": [[534, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.median": [[504, "polars-expr-list-median"]], "polars.Expr.list.reverse": [[507, "polars-expr-list-reverse"]], "polars.Expr.list.sum": [[517, "polars-expr-list-sum"]], "polars.Expr.meta.is_column_selection": [[535, "polars-expr-meta-is-column-selection"]], "polars.Expr.list.unique": [[521, "polars-expr-list-unique"]], "polars.Expr.lt": [[527, "polars-expr-lt"]], "polars.Expr.n_unique": [[549, "polars-expr-n-unique"]], "polars.Expr.name.to_uppercase": [[558, "polars-expr-name-to-uppercase"]], "polars.Expr.name.to_lowercase": [[557, "polars-expr-name-to-lowercase"]], "polars.Expr.meta.root_names": [[540, "polars-expr-meta-root-names"]], "polars.Expr.list.shift": [[513, "polars-expr-list-shift"]], "polars.Expr.meta.write_json": [[544, "polars-expr-meta-write-json"]], "polars.Expr.list.set_intersection": [[510, "polars-expr-list-set-intersection"]], "polars.Expr.min": [[545, "polars-expr-min"]], "polars.Expr.list.to_array": [[519, "polars-expr-list-to-array"]], "polars.Expr.list.std": [[516, "polars-expr-list-std"]], "polars.Expr.meta.is_regex_projection": [[536, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.set_union": [[512, "polars-expr-list-set-union"]], "polars.Expr.list.to_struct": [[520, "polars-expr-list-to-struct"]], "polars.Expr.mul": [[548, "polars-expr-mul"]], "polars.Expr.log": [[523, "polars-expr-log"]], "polars.Expr.nan_max": [[559, "polars-expr-nan-max"]], "polars.Expr.list.slice": [[514, "polars-expr-list-slice"]], "polars.Expr.meta.output_name": [[538, "polars-expr-meta-output-name"]], "polars.Expr.list.n_unique": [[506, "polars-expr-list-n-unique"]], "polars.Expr.map_elements": [[529, "polars-expr-map-elements"]], "polars.Expr.meta.serialize": [[541, "polars-expr-meta-serialize"]], "polars.Expr.meta.ne": [[537, "polars-expr-meta-ne"]], "polars.Expr.list.set_difference": [[509, "polars-expr-list-set-difference"]], "polars.Expr.name.suffix": [[555, "polars-expr-name-suffix"]], "polars.Expr.name.map_fields": [[552, "polars-expr-name-map-fields"]], "polars.Expr.log10": [[524, "polars-expr-log10"]], "polars.Expr.median": [[532, "polars-expr-median"]], "polars.Expr.mod": [[546, "polars-expr-mod"]], "polars.Expr.list.var": [[522, "polars-expr-list-var"]], "polars.Expr.lower_bound": [[526, "polars-expr-lower-bound"]], "polars.Expr.list.set_symmetric_difference": [[511, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.tail": [[518, "polars-expr-list-tail"]], "polars.Expr.name.map": [[551, "polars-expr-name-map"]], "polars.Expr.list.min": [[505, "polars-expr-list-min"]], "polars.LazyFrame.with_columns": [[851, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_context": [[853, "polars-lazyframe-with-context"]], "Schema": [[880, "schema"]], "LazyFrame": [[875, "lazyframe"]], "polars.LazyFrame.var": [[849, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[869, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.tail": [[844, "polars-lazyframe-tail"]], "polars.LazyFrame.unnest": [[847, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[865, "polars-lazyframe-group-by-lazygroupby-mean"]], "Plugins": [[879, "plugins"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[857, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arcsinh": [[891, "polars-series-arcsinh"]], "polars.LazyFrame.unique": [[846, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[868, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "Metadata": [[878, "metadata"]], "polars.Series.arccosh": [[889, "polars-series-arccosh"]], "polars.LazyFrame.sort": [[840, "polars-lazyframe-sort"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[862, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.LazyFrame.sql": [[841, "polars-lazyframe-sql"]], "polars.Series.arg_min": [[895, "polars-series-arg-min"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[871, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.all": [[885, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[861, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[866, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arctanh": [[893, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[858, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[860, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.abs": [[883, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[863, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arg_max": [[894, "polars-series-arg-max"]], "polars.LazyFrame.top_k": [[845, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[867, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.append": [[887, "polars-series-append"]], "polars.LazyFrame.with_columns_seq": [[852, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.sum": [[843, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[864, "polars-lazyframe-group-by-lazygroupby-max"]], "Selectors": [[881, "selectors"]], "Importing": [[881, "importing"]], "Set operations": [[881, "set-operations"]], "Functions": [[881, "functions"], [768, "functions"], [780, "functions"]], "polars.LazyFrame.update": [[848, "polars-lazyframe-update"]], "polars.LazyFrame.with_row_count": [[854, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[859, "polars-lazyframe-group-by-lazygroupby-first"]], "GroupBy": [[874, "groupby"], [306, "groupby"]], "polars.Series.any": [[886, "polars-series-any"]], "polars.Series.arctan": [[892, "polars-series-arctan"]], "polars.LazyFrame.std": [[842, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[856, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.alias": [[884, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[870, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arcsin": [[890, "polars-series-arcsin"]], "polars.Series.arccos": [[888, "polars-series-arccos"]], "polars.LazyFrame.width": [[850, "polars-lazyframe-width"]], "Serialization": [[876, "serialization"], [308, "serialization"]], "polars.LazyFrame.with_row_index": [[855, "polars-lazyframe-with-row-index"]], "polars.Expr.is_null": [[476, "polars-expr-is-null"]], "polars.Expr.list.first": [[494, "polars-expr-list-first"]], "polars.Expr.list.any": [[484, "polars-expr-list-any"]], "polars.Expr.from_json": [[452, "polars-expr-from-json"]], "polars.Expr.floor": [[449, "polars-expr-floor"]], "polars.Expr.is_in": [[470, "polars-expr-is-in"]], "polars.Expr.last": [[479, "polars-expr-last"]], "polars.Expr.list.diff": [[490, "polars-expr-list-diff"]], "polars.Expr.list.get": [[497, "polars-expr-list-get"]], "polars.Expr.list.count_matches": [[489, "polars-expr-list-count-matches"]], "polars.Expr.list.all": [[483, "polars-expr-list-all"]], "polars.Expr.floordiv": [[450, "polars-expr-floordiv"]], "polars.Expr.head": [[460, "polars-expr-head"]], "polars.Expr.implode": [[462, "polars-expr-implode"]], "polars.Expr.get": [[456, "polars-expr-get"]], "polars.Expr.is_not_nan": [[474, "polars-expr-is-not-nan"]], "polars.Expr.is_unique": [[477, "polars-expr-is-unique"]], "polars.Expr.is_duplicated": [[467, "polars-expr-is-duplicated"]], "polars.Expr.list.gather_every": [[496, "polars-expr-list-gather-every"]], "polars.Expr.gt": [[457, "polars-expr-gt"]], "polars.Expr.le": [[480, "polars-expr-le"]], "polars.Expr.len": [[481, "polars-expr-len"]], "polars.Expr.is_not_null": [[475, "polars-expr-is-not-null"]], "polars.Expr.is_nan": [[473, "polars-expr-is-nan"]], "polars.Expr.list.eval": [[492, "polars-expr-list-eval"]], "polars.Expr.list.contains": [[488, "polars-expr-list-contains"]], "polars.Expr.list.drop_nulls": [[491, "polars-expr-list-drop-nulls"]], "polars.Expr.list.head": [[498, "polars-expr-list-head"]], "polars.Expr.limit": [[482, "polars-expr-limit"]], "polars.Expr.list.join": [[499, "polars-expr-list-join"]], "polars.Expr.is_finite": [[468, "polars-expr-is-finite"]], "polars.Expr.list.arg_max": [[485, "polars-expr-list-arg-max"]], "polars.Expr.list.concat": [[487, "polars-expr-list-concat"]], "polars.Expr.list.explode": [[493, "polars-expr-list-explode"]], "polars.Expr.gather": [[453, "polars-expr-gather"]], "polars.Expr.list.gather": [[495, "polars-expr-list-gather"]], "polars.Expr.forward_fill": [[451, "polars-expr-forward-fill"]], "polars.Expr.list.arg_min": [[486, "polars-expr-list-arg-min"]], "polars.Expr.inspect": [[463, "polars-expr-inspect"]], "polars.Expr.list.last": [[500, "polars-expr-list-last"]], "polars.Expr.is_first_distinct": [[469, "polars-expr-is-first-distinct"]], "polars.Expr.interpolate_by": [[465, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[466, "polars-expr-is-between"]], "polars.Expr.list.len": [[501, "polars-expr-list-len"]], "polars.Expr.hist": [[461, "polars-expr-hist"]], "polars.Expr.has_nulls": [[458, "polars-expr-has-nulls"]], "polars.Expr.ge": [[455, "polars-expr-ge"]], "polars.Expr.is_infinite": [[471, "polars-expr-is-infinite"]], "polars.Expr.kurtosis": [[478, "polars-expr-kurtosis"]], "polars.Expr.gather_every": [[454, "polars-expr-gather-every"]], "polars.Expr.list.mean": [[503, "polars-expr-list-mean"]], "polars.Expr.is_last_distinct": [[472, "polars-expr-is-last-distinct"]], "polars.Expr.flatten": [[448, "polars-expr-flatten"]], "polars.Expr.list.max": [[502, "polars-expr-list-max"]], "polars.Expr.hash": [[459, "polars-expr-hash"]], "polars.Expr.interpolate": [[464, "polars-expr-interpolate"]], "polars.Expr.dt.round": [[415, "polars-expr-dt-round"]], "polars.Expr.dt.timestamp": [[419, "polars-expr-dt-timestamp"]], "polars.Expr.dt.truncate": [[428, "polars-expr-dt-truncate"]], "polars.Expr.dt.total_nanoseconds": [[426, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.offset_by": [[411, "polars-expr-dt-offset-by"]], "polars.Expr.dt.millennium": [[404, "polars-expr-dt-millennium"]], "polars.Expr.dt.total_hours": [[422, "polars-expr-dt-total-hours"]], "polars.Expr.dt.time": [[418, "polars-expr-dt-time"]], "polars.Expr.dt.iso_year": [[402, "polars-expr-dt-iso-year"]], "polars.Expr.dt.total_milliseconds": [[424, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.week": [[429, "polars-expr-dt-week"]], "polars.Expr.dt.second": [[416, "polars-expr-dt-second"]], "polars.Expr.dt.is_leap_year": [[401, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.millisecond": [[405, "polars-expr-dt-millisecond"]], "polars.Expr.dt.convert_time_zone": [[394, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.weekday": [[430, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[431, "polars-expr-dt-with-time-unit"]], "polars.Expr.eq": [[434, "polars-expr-eq"]], "polars.Expr.fill_null": [[445, "polars-expr-fill-null"]], "polars.Expr.dt.date": [[395, "polars-expr-dt-date"]], "polars.Expr.dt.microsecond": [[403, "polars-expr-dt-microsecond"]], "polars.Expr.extend_constant": [[443, "polars-expr-extend-constant"]], "polars.Expr.dt.datetime": [[396, "polars-expr-dt-datetime"]], "polars.Expr.dt.month_start": [[409, "polars-expr-dt-month-start"]], "polars.Expr.dt.quarter": [[413, "polars-expr-dt-quarter"]], "polars.Expr.exp": [[441, "polars-expr-exp"]], "polars.Expr.dt.day": [[397, "polars-expr-dt-day"]], "polars.Expr.dt.epoch": [[399, "polars-expr-dt-epoch"]], "polars.Expr.entropy": [[433, "polars-expr-entropy"]], "polars.Expr.dt.century": [[392, "polars-expr-dt-century"]], "polars.Expr.dt.month": [[407, "polars-expr-dt-month"]], "polars.Expr.dt.total_days": [[421, "polars-expr-dt-total-days"]], "polars.Expr.first": [[447, "polars-expr-first"]], "polars.Expr.dt.nanosecond": [[410, "polars-expr-dt-nanosecond"]], "polars.Expr.ewm_std": [[438, "polars-expr-ewm-std"]], "polars.Expr.dt.month_end": [[408, "polars-expr-dt-month-end"]], "polars.Expr.dt.ordinal_day": [[412, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.year": [[432, "polars-expr-dt-year"]], "polars.Expr.ewm_mean_by": [[437, "polars-expr-ewm-mean-by"]], "polars.Expr.dt.replace_time_zone": [[414, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.to_string": [[420, "polars-expr-dt-to-string"]], "polars.Expr.filter": [[446, "polars-expr-filter"]], "polars.Expr.dt.strftime": [[417, "polars-expr-dt-strftime"]], "polars.Expr.dt.dst_offset": [[398, "polars-expr-dt-dst-offset"]], "polars.Expr.explode": [[442, "polars-expr-explode"]], "polars.Expr.dt.total_seconds": [[427, "polars-expr-dt-total-seconds"]], "polars.Expr.exclude": [[440, "polars-expr-exclude"]], "polars.Expr.fill_nan": [[444, "polars-expr-fill-nan"]], "polars.Expr.dt.total_microseconds": [[423, "polars-expr-dt-total-microseconds"]], "polars.Expr.ewm_mean": [[436, "polars-expr-ewm-mean"]], "polars.Expr.dt.minute": [[406, "polars-expr-dt-minute"]], "polars.Expr.dt.combine": [[393, "polars-expr-dt-combine"]], "polars.Expr.eq_missing": [[435, "polars-expr-eq-missing"]], "polars.Expr.ewm_var": [[439, "polars-expr-ewm-var"]], "polars.Expr.dt.total_minutes": [[425, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.hour": [[400, "polars-expr-dt-hour"]], "polars.Expr.arr.n_unique": [[349, "polars-expr-arr-n-unique"]], "polars.Expr.clip": [[371, "polars-expr-clip"]], "polars.Expr.bin.decode": [[361, "polars-expr-bin-decode"]], "polars.Expr.arr.first": [[342, "polars-expr-arr-first"]], "polars.Expr.dot": [[386, "polars-expr-dot"]], "polars.Expr.cum_min": [[378, "polars-expr-cum-min"]], "polars.Expr.bin.starts_with": [[364, "polars-expr-bin-starts-with"]], "polars.Expr.cum_sum": [[380, "polars-expr-cum-sum"]], "polars.Expr.backward_fill": [[359, "polars-expr-backward-fill"]], "polars.Expr.cast": [[367, "polars-expr-cast"]], "polars.Expr.cum_max": [[377, "polars-expr-cum-max"]], "polars.Expr.dt.base_utc_offset": [[390, "polars-expr-dt-base-utc-offset"]], "polars.Expr.arr.sum": [[354, "polars-expr-arr-sum"]], "polars.Expr.arr.arg_max": [[337, "polars-expr-arr-arg-max"]], "polars.Expr.deserialize": [[384, "polars-expr-deserialize"]], "polars.Expr.arr.count_matches": [[340, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[341, "polars-expr-arr-explode"]], "polars.Expr.arr.arg_min": [[338, "polars-expr-arr-arg-min"]], "polars.Expr.cut": [[382, "polars-expr-cut"]], "polars.Expr.arr.var": [[358, "polars-expr-arr-var"]], "polars.Expr.arr.median": [[347, "polars-expr-arr-median"]], "polars.Expr.drop_nulls": [[388, "polars-expr-drop-nulls"]], "polars.Expr.cbrt": [[369, "polars-expr-cbrt"]], "polars.Expr.arr.to_list": [[355, "polars-expr-arr-to-list"]], "polars.Expr.cot": [[374, "polars-expr-cot"]], "polars.Expr.ceil": [[370, "polars-expr-ceil"]], "polars.Expr.cumulative_eval": [[381, "polars-expr-cumulative-eval"]], "polars.Expr.arr.to_struct": [[356, "polars-expr-arr-to-struct"]], "polars.Expr.arr.std": [[353, "polars-expr-arr-std"]], "polars.Expr.diff": [[385, "polars-expr-diff"]], "polars.Expr.bin.encode": [[362, "polars-expr-bin-encode"]], "polars.Expr.cum_count": [[376, "polars-expr-cum-count"]], "polars.Expr.arr.any": [[336, "polars-expr-arr-any"]], "polars.Expr.degrees": [[383, "polars-expr-degrees"]], "polars.Expr.bin.ends_with": [[363, "polars-expr-bin-ends-with"]], "polars.Expr.arr.min": [[348, "polars-expr-arr-min"]], "polars.Expr.arr.reverse": [[350, "polars-expr-arr-reverse"]], "polars.Expr.arr.join": [[344, "polars-expr-arr-join"]], "polars.Expr.cosh": [[373, "polars-expr-cosh"]], "polars.Expr.drop_nans": [[387, "polars-expr-drop-nans"]], "polars.Expr.dt.cast_time_unit": [[391, "polars-expr-dt-cast-time-unit"]], "polars.Expr.bottom_k_by": [[366, "polars-expr-bottom-k-by"]], "polars.Expr.arr.contains": [[339, "polars-expr-arr-contains"]], "polars.Expr.cat.get_categories": [[368, "polars-expr-cat-get-categories"]], "polars.Expr.cum_prod": [[379, "polars-expr-cum-prod"]], "polars.Expr.arr.last": [[345, "polars-expr-arr-last"]], "polars.Expr.arr.shift": [[351, "polars-expr-arr-shift"]], "polars.Expr.arr.unique": [[357, "polars-expr-arr-unique"]], "polars.Expr.bottom_k": [[365, "polars-expr-bottom-k"]], "polars.Expr.cos": [[372, "polars-expr-cos"]], "polars.Expr.dt.add_business_days": [[389, "polars-expr-dt-add-business-days"]], "polars.Expr.arr.max": [[346, "polars-expr-arr-max"]], "polars.Expr.arr.get": [[343, "polars-expr-arr-get"]], "polars.Expr.bin.contains": [[360, "polars-expr-bin-contains"]], "polars.Expr.count": [[375, "polars-expr-count"]], "polars.Expr.arr.sort": [[352, "polars-expr-arr-sort"]], "polars.DataFrame.to_series": [[268, "polars-dataframe-to-series"]], "polars.DataFrame.std": [[256, "polars-dataframe-std"]], "polars.DataFrame.quantile": [[235, "polars-dataframe-quantile"]], "polars.DataFrame.rows_by_key": [[243, "polars-dataframe-rows-by-key"]], "polars.DataFrame.transpose": [[272, "polars-dataframe-transpose"]], "polars.DataFrame.shape": [[250, "polars-dataframe-shape"]], "polars.DataFrame.rechunk": [[236, "polars-dataframe-rechunk"]], "polars.DataFrame.select": [[246, "polars-dataframe-select"]], "polars.DataFrame.merge_sorted": [[225, "polars-dataframe-merge-sorted"]], "polars.DataFrame.replace_column": [[238, "polars-dataframe-replace-column"]], "polars.DataFrame.rolling": [[240, "polars-dataframe-rolling"]], "polars.DataFrame.min_horizontal": [[227, "polars-dataframe-min-horizontal"]], "polars.DataFrame.select_seq": [[247, "polars-dataframe-select-seq"]], "polars.DataFrame.sql": [[255, "polars-dataframe-sql"]], "polars.DataFrame.to_arrow": [[260, "polars-dataframe-to-arrow"]], "polars.DataFrame.shift": [[251, "polars-dataframe-shift"]], "polars.DataFrame.to_torch": [[270, "polars-dataframe-to-torch"]], "polars.DataFrame.unstack": [[275, "polars-dataframe-unstack"]], "polars.DataFrame.shrink_to_fit": [[252, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.pipe": [[232, "polars-dataframe-pipe"]], "polars.DataFrame.rows": [[242, "polars-dataframe-rows"]], "polars.DataFrame.sum_horizontal": [[258, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_dummies": [[263, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_pandas": [[267, "polars-dataframe-to-pandas"]], "polars.DataFrame.pivot": [[233, "polars-dataframe-pivot"]], "polars.DataFrame.to_jax": [[265, "polars-dataframe-to-jax"]], "polars.DataFrame.to_struct": [[269, "polars-dataframe-to-struct"]], "polars.DataFrame.sort": [[254, "polars-dataframe-sort"]], "polars.DataFrame.sample": [[244, "polars-dataframe-sample"]], "polars.DataFrame.row": [[241, "polars-dataframe-row"]], "polars.DataFrame.partition_by": [[231, "polars-dataframe-partition-by"]], "polars.DataFrame.serialize": [[248, "polars-dataframe-serialize"]], "polars.DataFrame.top_k": [[271, "polars-dataframe-top-k"]], "polars.DataFrame.n_unique": [[229, "polars-dataframe-n-unique"]], "polars.DataFrame.set_sorted": [[249, "polars-dataframe-set-sorted"]], "polars.DataFrame.upsample": [[277, "polars-dataframe-upsample"]], "polars.DataFrame.min": [[226, "polars-dataframe-min"]], "polars.DataFrame.null_count": [[230, "polars-dataframe-null-count"]], "polars.DataFrame.update": [[276, "polars-dataframe-update"]], "polars.DataFrame.to_dict": [[261, "polars-dataframe-to-dict"]], "polars.DataFrame.var": [[278, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[279, "polars-dataframe-vstack"]], "polars.DataFrame.product": [[234, "polars-dataframe-product"]], "polars.DataFrame.unnest": [[274, "polars-dataframe-unnest"]], "polars.DataFrame.to_init_repr": [[264, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_numpy": [[266, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_dicts": [[262, "polars-dataframe-to-dicts"]], "polars.DataFrame.slice": [[253, "polars-dataframe-slice"]], "polars.DataFrame.rename": [[237, "polars-dataframe-rename"]], "polars.DataFrame.tail": [[259, "polars-dataframe-tail"]], "polars.DataFrame.sum": [[257, "polars-dataframe-sum"]], "polars.DataFrame.schema": [[245, "polars-dataframe-schema"]], "polars.DataFrame.reverse": [[239, "polars-dataframe-reverse"]], "polars.DataFrame.n_chunks": [[228, "polars-dataframe-n-chunks"]], "polars.DataFrame.melt": [[224, "polars-dataframe-melt"]], "polars.DataFrame.unique": [[273, "polars-dataframe-unique"]], "polars.tail": [[754, "polars-tail"]], "polars.when": [[759, "polars-when"]], "polars.n_unique": [[739, "polars-n-unique"]], "polars.struct": [[751, "polars-struct"]], "polars.sum_horizontal": [[753, "polars-sum-horizontal"]], "Expressions": [[769, "expressions"]], "Input/output": [[782, "input-output"]], "Avro": [[782, "avro"]], "Clipboard": [[782, "clipboard"]], "CSV": [[782, "csv"]], "Database": [[782, "database"]], "Delta Lake": [[782, "delta-lake"]], "Excel / ODS": [[782, "excel-ods"]], "Feather / IPC": [[782, "feather-ipc"]], "Iceberg": [[782, "iceberg"]], "JSON": [[782, "json"]], "Parquet": [[782, "parquet"]], "PyArrow Datasets": [[782, "pyarrow-datasets"]], "polars.rolling_cov": [[746, "polars-rolling-cov"]], "polars.sql": [[748, "polars-sql"]], "polars.max": [[732, "polars-max"]], "polars.mean": [[734, "polars-mean"]], "Columns / names": [[766, "columns-names"]], "polars.zeros": [[760, "polars-zeros"]], "polars.col": [[765, "polars-col"]], "polars.min_horizontal": [[738, "polars-min-horizontal"]], "polars.max_horizontal": [[733, "polars-max-horizontal"]], "polars.nth": [[740, "polars-nth"]], "polars.select": [[747, "polars-select"]], "polars.median": [[736, "polars-median"]], "polars.min": [[737, "polars-min"]], "polars.len": [[728, "polars-len"]], "polars.sum": [[752, "polars-sum"]], "polars.time_range": [[756, "polars-time-range"]], "polars.map_batches": [[730, "polars-map-batches"]], "Meta": [[771, "meta"]], "polars.std": [[750, "polars-std"]], "polars.time": [[755, "polars-time"]], "Operators": [[775, "operators"]], "Conjunction": [[775, "conjunction"]], "Comparison": [[775, "comparison"]], "Numeric": [[775, "numeric"], [312, "numeric"]], "polars.mean_horizontal": [[735, "polars-mean-horizontal"]], "polars.quantile": [[742, "polars-quantile"]], "Window": [[779, "window"]], "polars.time_ranges": [[757, "polars-time-ranges"]], "polars.map_groups": [[731, "polars-map-groups"]], "polars.repeat": [[744, "polars-repeat"]], "polars.sql_expr": [[749, "polars-sql-expr"]], "polars.var": [[758, "polars-var"]], "Conversion": [[780, "conversion"]], "Parallelization": [[780, "parallelization"]], "Random": [[780, "random"]], "StringCache": [[780, "stringcache"]], "polars.ones": [[741, "polars-ones"]], "polars.rolling_corr": [[745, "polars-rolling-corr"]], "Name": [[774, "name"]], "Python API reference": [[781, "python-api-reference"]], "polars.reduce": [[743, "polars-reduce"]], "polars.lit": [[729, "polars-lit"]], "polars.dataframe.group_by.GroupBy.max": [[294, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.n_unique": [[298, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.and_": [[320, "polars-expr-and"]], "DataFrame": [[307, "dataframe"]], "polars.Expr.arccos": [[324, "polars-expr-arccos"]], "polars.DataFrame.with_row_index": [[284, "polars-dataframe-with-row-index"]], "polars.dataframe.group_by.GroupBy.head": [[290, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.all": [[287, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.median": [[296, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.append": [[322, "polars-expr-append"]], "polars.Expr.any": [[321, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.count": [[288, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.agg_groups": [[317, "polars-expr-agg-groups"]], "polars.Expr.arg_min": [[331, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[332, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.last": [[291, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.add": [[316, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.min": [[297, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.mean": [[295, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.tail": [[301, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.__iter__": [[285, "polars-dataframe-group-by-groupby-iter"]], "Style": [[311, "style"]], "polars.Expr.arctan": [[328, "polars-expr-arctan"]], "polars.Expr.abs": [[315, "polars-expr-abs"]], "polars.Expr.arcsinh": [[327, "polars-expr-arcsinh"]], "polars.Expr.alias": [[318, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.quantile": [[299, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[300, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arccosh": [[325, "polars-expr-arccosh"]], "Exceptions": [[313, "exceptions"]], "Errors": [[313, "errors"]], "Warnings": [[313, "warnings"]], "polars.dataframe.group_by.GroupBy.agg": [[286, "polars-dataframe-group-by-groupby-agg"]], "polars.Expr.arr.all": [[335, "polars-expr-arr-all"]], "polars.DataFrame.width": [[280, "polars-dataframe-width"]], "polars.DataFrame.with_columns_seq": [[282, "polars-dataframe-with-columns-seq"]], "Data types": [[312, "data-types"]], "DataType": [[312, "datatype"]], "Nested": [[312, "nested"]], "Other": [[312, "other"]], "polars.Expr.all": [[319, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.len": [[292, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.first": [[289, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arctanh": [[329, "polars-expr-arctanh"]], "polars.Expr.arg_true": [[333, "polars-expr-arg-true"]], "polars.Expr.approx_n_unique": [[323, "polars-expr-approx-n-unique"]], "polars.Expr.arg_unique": [[334, "polars-expr-arg-unique"]], "polars.DataFrame.with_columns": [[281, "polars-dataframe-with-columns"]], "polars.dataframe.group_by.GroupBy.map_groups": [[293, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arcsin": [[326, "polars-expr-arcsin"]], "polars.Expr.arg_max": [[330, "polars-expr-arg-max"]], "polars.DataFrame.with_row_count": [[283, "polars-dataframe-with-row-count"]]}, "indexentries": {"load() (polars.config class method)": [[2, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[5, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[30, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[47, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[52, "polars.build_info"]], "collect_all() (in module polars)": [[53, "polars.collect_all"]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async"]], "concat() (in module polars)": [[55, "polars.concat"]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache"]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning"]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning"]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[89, "polars.exceptions.ComputeError"]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning"]], "duplicateerror": [[91, "polars.exceptions.DuplicateError"]], "invalidassert": [[92, "polars.exceptions.InvalidAssert"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning"]], "moduleupgraderequired": [[95, "polars.exceptions.ModuleUpgradeRequired"]], "nodataerror": [[96, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError"]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError"]], "parametercollisionerror": [[99, "polars.exceptions.ParameterCollisionError"]], "performancewarning": [[100, "polars.exceptions.PerformanceWarning"]], "polarserror": [[101, "polars.exceptions.PolarsError"]], "polarsinefficientmapwarning": [[102, "polars.exceptions.PolarsInefficientMapWarning"]], "polarspanicerror": [[103, "polars.exceptions.PolarsPanicError"]], "polarswarning": [[104, "polars.exceptions.PolarsWarning"]], "rowserror": [[105, "polars.exceptions.RowsError"]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError"]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError"]], "schemaerror": [[108, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[110, "polars.exceptions.ShapeError"]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError"]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError"]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning"]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError"]], "from_arrow() (in module polars)": [[116, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe"]], "from_dict() (in module polars)": [[118, "polars.from_dict"]], "from_dicts() (in module polars)": [[119, "polars.from_dicts"]], "from_numpy() (in module polars)": [[120, "polars.from_numpy"]], "from_pandas() (in module polars)": [[121, "polars.from_pandas"]], "from_records() (in module polars)": [[122, "polars.from_records"]], "from_repr() (in module polars)": [[123, "polars.from_repr"]], "get_index_type() (in module polars)": [[124, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[126, "polars.read_avro"]], "read_clipboard() (in module polars)": [[127, "polars.read_clipboard"]], "read_csv() (in module polars)": [[128, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[129, "polars.read_csv_batched"]], "read_database() (in module polars)": [[130, "polars.read_database"]], "read_database_uri() (in module polars)": [[131, "polars.read_database_uri"]], "read_delta() (in module polars)": [[132, "polars.read_delta"]], "read_excel() (in module polars)": [[133, "polars.read_excel"]], "read_ipc() (in module polars)": [[134, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[135, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[136, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[137, "polars.read_json"]], "read_ndjson() (in module polars)": [[138, "polars.read_ndjson"]], "read_ods() (in module polars)": [[139, "polars.read_ods"]], "read_parquet() (in module polars)": [[140, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[141, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[142, "polars.scan_csv"]], "scan_delta() (in module polars)": [[143, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[144, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[145, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[146, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[147, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[148, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[149, "polars.set_random_seed"]], "show_versions() (in module polars)": [[150, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[151, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[153, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[155, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[155, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[156, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[164, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[165, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[166, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[169, "polars.DataFrame.__dataframe__"]], "approx_n_unique() (polars.dataframe method)": [[170, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[171, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[172, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[173, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[174, "polars.DataFrame.clone"]], "collect_schema() (polars.dataframe method)": [[175, "polars.DataFrame.collect_schema"]], "columns (polars.dataframe property)": [[176, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[177, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[178, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[179, "polars.DataFrame.describe"]], "deserialize() (polars.dataframe class method)": [[180, "polars.DataFrame.deserialize"]], "drop() (polars.dataframe method)": [[181, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[182, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[183, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[184, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[185, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[186, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[187, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[188, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[189, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[190, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[191, "polars.DataFrame.filter"]], "flags (polars.dataframe property)": [[192, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[193, "polars.DataFrame.fold"]], "gather_every() (polars.dataframe method)": [[194, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[195, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[196, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[197, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[198, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[199, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[200, "polars.DataFrame.group_by_dynamic"]], "hash_rows() (polars.dataframe method)": [[201, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[202, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[203, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[204, "polars.DataFrame.hstack"]], "insert_column() (polars.dataframe method)": [[205, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[206, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[207, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[208, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[209, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[210, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[211, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[212, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[213, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[214, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[215, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[216, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[217, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[218, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[219, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[221, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[222, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[223, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[224, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[225, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[226, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[227, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[228, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[229, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[230, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[231, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[232, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[233, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[234, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[235, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[236, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[237, "polars.DataFrame.rename"]], "replace_column() (polars.dataframe method)": [[238, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[239, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[240, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[241, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[242, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[243, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[244, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[245, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[246, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[247, "polars.DataFrame.select_seq"]], "serialize() (polars.dataframe method)": [[248, "polars.DataFrame.serialize"]], "set_sorted() (polars.dataframe method)": [[249, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[250, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[251, "polars.DataFrame.shift"]], "shrink_to_fit() (polars.dataframe method)": [[252, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[253, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[254, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[255, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[256, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[257, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[258, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[259, "polars.DataFrame.tail"]], "to_arrow() (polars.dataframe method)": [[260, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[261, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[262, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[263, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[264, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[265, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[266, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[267, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[268, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[269, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[270, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[271, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[272, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[273, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[274, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[275, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[276, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[277, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[278, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[279, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[280, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[281, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[282, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[283, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[284, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.all"]], "count() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.tail"]], "style (polars.dataframe property)": [[311, "polars.DataFrame.style"]], "abs() (polars.expr method)": [[315, "polars.Expr.abs"]], "add() (polars.expr method)": [[316, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[317, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[318, "polars.Expr.alias"]], "all() (polars.expr method)": [[319, "polars.Expr.all"]], "and_() (polars.expr method)": [[320, "polars.Expr.and_"]], "any() (polars.expr method)": [[321, "polars.Expr.any"]], "append() (polars.expr method)": [[322, "polars.Expr.append"]], "approx_n_unique() (polars.expr method)": [[323, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[324, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[325, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[326, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[327, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[328, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[329, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[330, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[331, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[332, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[333, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[334, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[335, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[336, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[337, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[338, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[339, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[340, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[341, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[342, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[343, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[344, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[345, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[346, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[347, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[348, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[349, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[350, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[351, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[352, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[353, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[354, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[355, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[356, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[357, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[358, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[359, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[360, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[361, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[362, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[363, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[364, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[365, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[366, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[367, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[368, "polars.Expr.cat.get_categories"]], "cbrt() (polars.expr method)": [[369, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[370, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[371, "polars.Expr.clip"]], "cos() (polars.expr method)": [[372, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[373, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[374, "polars.Expr.cot"]], "count() (polars.expr method)": [[375, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[376, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[377, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[378, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[379, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[380, "polars.Expr.cum_sum"]], "cumulative_eval() (polars.expr method)": [[381, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[382, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[383, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[384, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[385, "polars.Expr.diff"]], "dot() (polars.expr method)": [[386, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[387, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[388, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[389, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[390, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[391, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[392, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[393, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[394, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[395, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[396, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[397, "polars.Expr.dt.day"]], "dst_offset() (polars.expr.dt method)": [[398, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[399, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[400, "polars.Expr.dt.hour"]], "is_leap_year() (polars.expr.dt method)": [[401, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[402, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[403, "polars.Expr.dt.microsecond"]], "millennium() (polars.expr.dt method)": [[404, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[405, "polars.Expr.dt.millisecond"]], "minute() (polars.expr.dt method)": [[406, "polars.Expr.dt.minute"]], "month() (polars.expr.dt method)": [[407, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[408, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[409, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[410, "polars.Expr.dt.nanosecond"]], "offset_by() (polars.expr.dt method)": [[411, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[412, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[413, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[414, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[415, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[416, "polars.Expr.dt.second"]], "strftime() (polars.expr.dt method)": [[417, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[418, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[419, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[420, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[421, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[422, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[423, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[428, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[429, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[430, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[431, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[432, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[433, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[434, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[435, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[436, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[437, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[438, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[439, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[440, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[441, "polars.Expr.exp"]], "explode() (polars.expr method)": [[442, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[443, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[444, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[445, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[446, "polars.Expr.filter"]], "first() (polars.expr method)": [[447, "polars.Expr.first"]], "flatten() (polars.expr method)": [[448, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[449, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[450, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[451, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[452, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[453, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[454, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[455, "polars.Expr.ge"]], "get() (polars.expr method)": [[456, "polars.Expr.get"]], "gt() (polars.expr method)": [[457, "polars.Expr.gt"]], "has_nulls() (polars.expr method)": [[458, "polars.Expr.has_nulls"]], "hash() (polars.expr method)": [[459, "polars.Expr.hash"]], "head() (polars.expr method)": [[460, "polars.Expr.head"]], "hist() (polars.expr method)": [[461, "polars.Expr.hist"]], "implode() (polars.expr method)": [[462, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[463, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[464, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[465, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[466, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[467, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[468, "polars.Expr.is_finite"]], "is_first_distinct() (polars.expr method)": [[469, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[470, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[471, "polars.Expr.is_infinite"]], "is_last_distinct() (polars.expr method)": [[472, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[473, "polars.Expr.is_nan"]], "is_not_nan() (polars.expr method)": [[474, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[475, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[476, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[477, "polars.Expr.is_unique"]], "kurtosis() (polars.expr method)": [[478, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[479, "polars.Expr.last"]], "le() (polars.expr method)": [[480, "polars.Expr.le"]], "len() (polars.expr method)": [[481, "polars.Expr.len"]], "limit() (polars.expr method)": [[482, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[483, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[484, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[485, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[486, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[487, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[488, "polars.Expr.list.contains"]], "count_matches() (polars.expr.list method)": [[489, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[490, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[491, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[492, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[493, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[494, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[495, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[496, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[497, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[498, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[499, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[500, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[501, "polars.Expr.list.len"]], "max() (polars.expr.list method)": [[502, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[503, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[504, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[505, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[506, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[507, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[508, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[509, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[510, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[511, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[512, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[513, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[514, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[515, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[516, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[517, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[518, "polars.Expr.list.tail"]], "to_array() (polars.expr.list method)": [[519, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[520, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[521, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[522, "polars.Expr.list.var"]], "log() (polars.expr method)": [[523, "polars.Expr.log"]], "log10() (polars.expr method)": [[524, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[525, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[526, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[527, "polars.Expr.lt"]], "map_batches() (polars.expr method)": [[528, "polars.Expr.map_batches"]], "map_elements() (polars.expr method)": [[529, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[530, "polars.Expr.max"]], "mean() (polars.expr method)": [[531, "polars.Expr.mean"]], "median() (polars.expr method)": [[532, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[533, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[534, "polars.Expr.meta.has_multiple_outputs"]], "is_column_selection() (polars.expr.meta method)": [[535, "polars.Expr.meta.is_column_selection"]], "is_regex_projection() (polars.expr.meta method)": [[536, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[537, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[538, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[539, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[540, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[541, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[542, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[543, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[544, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[545, "polars.Expr.min"]], "mod() (polars.expr method)": [[546, "polars.Expr.mod"]], "mode() (polars.expr method)": [[547, "polars.Expr.mode"]], "mul() (polars.expr method)": [[548, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[549, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[550, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[551, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[552, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[553, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[554, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[555, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[556, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[557, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[558, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[559, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[560, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[561, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[562, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[563, "polars.Expr.neg"]], "not_() (polars.expr method)": [[564, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[565, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[566, "polars.Expr.or_"]], "over() (polars.expr method)": [[567, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[568, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[569, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[570, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[571, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[572, "polars.Expr.pow"]], "product() (polars.expr method)": [[573, "polars.Expr.product"]], "qcut() (polars.expr method)": [[574, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[575, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[576, "polars.Expr.radians"]], "rank() (polars.expr method)": [[577, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[578, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[579, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[580, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[581, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[582, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[583, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[584, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[585, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[586, "polars.Expr.rolling"]], "rolling_map() (polars.expr method)": [[587, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[588, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[589, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[590, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[591, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[592, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[593, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[594, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[595, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[596, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[597, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[598, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[599, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[600, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[601, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[602, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[603, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[604, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[605, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[606, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[607, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[608, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[609, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[610, "polars.Expr.shift"]], "shrink_dtype() (polars.expr method)": [[611, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[612, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[613, "polars.Expr.sign"]], "sin() (polars.expr method)": [[614, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[615, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[616, "polars.Expr.skew"]], "slice() (polars.expr method)": [[617, "polars.Expr.slice"]], "sort() (polars.expr method)": [[618, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[619, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[620, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[621, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[622, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[623, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[624, "polars.Expr.str.contains_any"]], "count_matches() (polars.expr.str method)": [[625, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[626, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[627, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[628, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[629, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[630, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[631, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[632, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[633, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[634, "polars.Expr.str.head"]], "join() (polars.expr.str method)": [[635, "polars.Expr.str.join"]], "json_decode() (polars.expr.str method)": [[636, "polars.Expr.str.json_decode"]], "json_path_match() (polars.expr.str method)": [[637, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[638, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[639, "polars.Expr.str.len_chars"]], "pad_end() (polars.expr.str method)": [[640, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[641, "polars.Expr.str.pad_start"]], "replace() (polars.expr.str method)": [[642, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[643, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[644, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[645, "polars.Expr.str.reverse"]], "slice() (polars.expr.str method)": [[646, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[647, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[648, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[649, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[650, "polars.Expr.str.starts_with"]], "strip_chars() (polars.expr.str method)": [[651, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[652, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[653, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[654, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[655, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[656, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[657, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[658, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[659, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[660, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[661, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[662, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[663, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[664, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[665, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[666, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[667, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[668, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[669, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[670, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[671, "polars.Expr.sub"]], "sum() (polars.expr method)": [[672, "polars.Expr.sum"]], "tail() (polars.expr method)": [[673, "polars.Expr.tail"]], "tan() (polars.expr method)": [[674, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[675, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[676, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[677, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[678, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[679, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[680, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[681, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[682, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[683, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[684, "polars.Expr.var"]], "where() (polars.expr method)": [[685, "polars.Expr.where"]], "xor() (polars.expr method)": [[686, "polars.Expr.xor"]], "all() (in module polars)": [[687, "polars.all"]], "all_horizontal() (in module polars)": [[688, "polars.all_horizontal"]], "any() (in module polars)": [[689, "polars.any"]], "any_horizontal() (in module polars)": [[690, "polars.any_horizontal"]], "approx_n_unique() (in module polars)": [[691, "polars.approx_n_unique"]], "arange() (in module polars)": [[692, "polars.arange"]], "arctan2() (in module polars)": [[693, "polars.arctan2"]], "arctan2d() (in module polars)": [[694, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[695, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[696, "polars.arg_where"]], "business_day_count() (in module polars)": [[697, "polars.business_day_count"]], "coalesce() (in module polars)": [[698, "polars.coalesce"]], "concat_list() (in module polars)": [[699, "polars.concat_list"]], "concat_str() (in module polars)": [[700, "polars.concat_str"]], "corr() (in module polars)": [[701, "polars.corr"]], "count() (in module polars)": [[702, "polars.count"]], "cov() (in module polars)": [[703, "polars.cov"]], "cum_count() (in module polars)": [[704, "polars.cum_count"]], "cum_fold() (in module polars)": [[705, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[706, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[707, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[708, "polars.cum_sum_horizontal"]], "date() (in module polars)": [[709, "polars.date"]], "date_range() (in module polars)": [[710, "polars.date_range"]], "date_ranges() (in module polars)": [[711, "polars.date_ranges"]], "datetime() (in module polars)": [[712, "polars.datetime"]], "datetime_range() (in module polars)": [[713, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[714, "polars.datetime_ranges"]], "duration() (in module polars)": [[715, "polars.duration"]], "element() (in module polars)": [[716, "polars.element"]], "exclude() (in module polars)": [[717, "polars.exclude"]], "first() (in module polars)": [[718, "polars.first"]], "fold() (in module polars)": [[719, "polars.fold"]], "format() (in module polars)": [[720, "polars.format"]], "from_epoch() (in module polars)": [[721, "polars.from_epoch"]], "groups() (in module polars)": [[722, "polars.groups"]], "head() (in module polars)": [[723, "polars.head"]], "implode() (in module polars)": [[724, "polars.implode"]], "int_range() (in module polars)": [[725, "polars.int_range"]], "int_ranges() (in module polars)": [[726, "polars.int_ranges"]], "last() (in module polars)": [[727, "polars.last"]], "len() (in module polars)": [[728, "polars.len"]], "lit() (in module polars)": [[729, "polars.lit"]], "map_batches() (in module polars)": [[730, "polars.map_batches"]], "map_groups() (in module polars)": [[731, "polars.map_groups"]], "max() (in module polars)": [[732, "polars.max"]], "max_horizontal() (in module polars)": [[733, "polars.max_horizontal"]], "mean() (in module polars)": [[734, "polars.mean"]], "mean_horizontal() (in module polars)": [[735, "polars.mean_horizontal"]], "median() (in module polars)": [[736, "polars.median"]], "min() (in module polars)": [[737, "polars.min"]], "min_horizontal() (in module polars)": [[738, "polars.min_horizontal"]], "n_unique() (in module polars)": [[739, "polars.n_unique"]], "nth() (in module polars)": [[740, "polars.nth"]], "ones() (in module polars)": [[741, "polars.ones"]], "quantile() (in module polars)": [[742, "polars.quantile"]], "reduce() (in module polars)": [[743, "polars.reduce"]], "repeat() (in module polars)": [[744, "polars.repeat"]], "rolling_corr() (in module polars)": [[745, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[746, "polars.rolling_cov"]], "select() (in module polars)": [[747, "polars.select"]], "sql() (in module polars)": [[748, "polars.sql"]], "sql_expr() (in module polars)": [[749, "polars.sql_expr"]], "std() (in module polars)": [[750, "polars.std"]], "struct() (in module polars)": [[751, "polars.struct"]], "sum() (in module polars)": [[752, "polars.sum"]], "sum_horizontal() (in module polars)": [[753, "polars.sum_horizontal"]], "tail() (in module polars)": [[754, "polars.tail"]], "time() (in module polars)": [[755, "polars.time"]], "time_range() (in module polars)": [[756, "polars.time_range"]], "time_ranges() (in module polars)": [[757, "polars.time_ranges"]], "var() (in module polars)": [[758, "polars.var"]], "when() (in module polars)": [[759, "polars.when"]], "zeros() (in module polars)": [[760, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[784, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[785, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[786, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[787, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[788, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[789, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[790, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[791, "polars.LazyFrame.collect_async"]], "collect_schema() (polars.lazyframe method)": [[792, "polars.LazyFrame.collect_schema"]], "columns (polars.lazyframe property)": [[793, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[794, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[795, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[796, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[797, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[798, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[799, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[800, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[801, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[802, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[803, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[804, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[805, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[806, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[807, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[808, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[809, "polars.LazyFrame.group_by_dynamic"]], "head() (polars.lazyframe method)": [[810, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[811, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[812, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[813, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[814, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[815, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[816, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[817, "polars.LazyFrame.limit"]], "map_batches() (polars.lazyframe method)": [[818, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[819, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[820, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[821, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[822, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[823, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[824, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[825, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[826, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[827, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[828, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[829, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[830, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[831, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[832, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[833, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[834, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[835, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[836, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[837, "polars.LazyFrame.shift"]], "show_graph() (polars.lazyframe method)": [[838, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[839, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[840, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[841, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[842, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[843, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[844, "polars.LazyFrame.tail"]], "top_k() (polars.lazyframe method)": [[845, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[846, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[847, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[848, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[849, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[850, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[851, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[852, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[853, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[854, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[855, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[856, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[857, "polars.lazyframe.group_by.LazyGroupBy.all"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[858, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[859, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[879, "module-polars.plugins"], [881, "module-polars.selectors"]], "polars.plugins": [[879, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[879, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[881, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[881, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[881, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[881, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[881, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[881, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[881, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[881, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[881, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[881, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[881, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[881, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[881, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[881, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[881, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[881, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[881, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[881, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[881, "polars.selectors.first"]], "float() (in module polars.selectors)": [[881, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[881, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[881, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[881, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[881, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[881, "polars.selectors.numeric"]], "polars.selectors": [[881, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[881, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[881, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[881, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[881, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[881, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[881, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[883, "polars.Series.abs"]], "alias() (polars.series method)": [[884, "polars.Series.alias"]], "all() (polars.series method)": [[885, "polars.Series.all"]], "any() (polars.series method)": [[886, "polars.Series.any"]], "append() (polars.series method)": [[887, "polars.Series.append"]], "arccos() (polars.series method)": [[888, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[889, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[890, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[891, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[892, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[893, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[894, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[895, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[896, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[897, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[898, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[899, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[900, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[901, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[902, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[903, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[904, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[905, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[906, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[907, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[908, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[909, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[910, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[911, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[912, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[913, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[914, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[915, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[916, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[917, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[918, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[919, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[920, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[921, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[922, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[923, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[924, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[925, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[926, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[927, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[928, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[929, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[930, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[931, "polars.Series.cat.is_local"]], "to_local() (polars.series.cat method)": [[932, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[933, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[934, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[935, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[936, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[937, "polars.Series.clear"]], "clip() (polars.series method)": [[938, "polars.Series.clip"]], "clone() (polars.series method)": [[939, "polars.Series.clone"]], "cos() (polars.series method)": [[940, "polars.Series.cos"]], "cosh() (polars.series method)": [[941, "polars.Series.cosh"]], "cot() (polars.series method)": [[942, "polars.Series.cot"]], "cum_count() (polars.series method)": [[943, "polars.Series.cum_count"]], "cum_max() (polars.series method)": [[944, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[945, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[946, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[947, "polars.Series.cum_sum"]], "cumulative_eval() (polars.series method)": [[948, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[949, "polars.Series.cut"]], "describe() (polars.series method)": [[950, "polars.Series.describe"]], "diff() (polars.series method)": [[951, "polars.Series.diff"]], "dot() (polars.series method)": [[952, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[953, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[954, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[955, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[956, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[957, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[958, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[959, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[960, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[961, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[962, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[963, "polars.Series.dt.day"]], "dst_offset() (polars.series.dt method)": [[964, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[965, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[966, "polars.Series.dt.hour"]], "is_leap_year() (polars.series.dt method)": [[967, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[968, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[969, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[970, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[971, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[972, "polars.Series.dt.microsecond"]], "millennium() (polars.series.dt method)": [[973, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[974, "polars.Series.dt.millisecond"]], "min() (polars.series.dt method)": [[975, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[976, "polars.Series.dt.minute"]], "month() (polars.series.dt method)": [[977, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[978, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[979, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[980, "polars.Series.dt.nanosecond"]], "offset_by() (polars.series.dt method)": [[981, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[982, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[983, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[984, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[985, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[986, "polars.Series.dt.second"]], "strftime() (polars.series.dt method)": [[987, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[988, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[989, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[990, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[991, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[992, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[993, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[994, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[995, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[996, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[997, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[998, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[999, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1000, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1001, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1002, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1003, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1004, "polars.Series.entropy"]], "equals() (polars.series method)": [[1005, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1006, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1007, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1008, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1009, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1010, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1011, "polars.Series.exp"]], "explode() (polars.series method)": [[1012, "polars.Series.explode"]], "extend() (polars.series method)": [[1013, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1014, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1015, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1016, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1017, "polars.Series.filter"]], "flags (polars.series attribute)": [[1018, "polars.Series.flags"]], "floor() (polars.series method)": [[1019, "polars.Series.floor"]], "gather() (polars.series method)": [[1020, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1021, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1022, "polars.Series.get_chunks"]], "has_nulls() (polars.series method)": [[1023, "polars.Series.has_nulls"]], "has_validity() (polars.series method)": [[1024, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1025, "polars.Series.hash"]], "head() (polars.series method)": [[1026, "polars.Series.head"]], "hist() (polars.series method)": [[1027, "polars.Series.hist"]], "implode() (polars.series method)": [[1028, "polars.Series.implode"]], "interpolate() (polars.series method)": [[1029, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1030, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1031, "polars.Series.is_between"]], "is_duplicated() (polars.series method)": [[1032, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1033, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1034, "polars.Series.is_finite"]], "is_first_distinct() (polars.series method)": [[1035, "polars.Series.is_first_distinct"]], "is_in() (polars.series method)": [[1036, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1037, "polars.Series.is_infinite"]], "is_last_distinct() (polars.series method)": [[1038, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1039, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1040, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1041, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1042, "polars.Series.is_null"]], "is_sorted() (polars.series method)": [[1043, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[1044, "polars.Series.is_unique"]], "item() (polars.series method)": [[1045, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1046, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1047, "polars.Series.len"]], "limit() (polars.series method)": [[1048, "polars.Series.limit"]], "all() (polars.series.list method)": [[1049, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1050, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1051, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1052, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1053, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1054, "polars.Series.list.contains"]], "count_matches() (polars.series.list method)": [[1055, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1056, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1057, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1058, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1059, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1060, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1061, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1062, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1063, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1064, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1065, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1066, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1067, "polars.Series.list.len"]], "max() (polars.series.list method)": [[1068, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1069, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1070, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1071, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1072, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1073, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1074, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1075, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1076, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1077, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1078, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1079, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1080, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1081, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1082, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1083, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1084, "polars.Series.list.tail"]], "to_array() (polars.series.list method)": [[1085, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1086, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1087, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1088, "polars.Series.list.var"]], "log() (polars.series method)": [[1089, "polars.Series.log"]], "log10() (polars.series method)": [[1090, "polars.Series.log10"]], "log1p() (polars.series method)": [[1091, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1092, "polars.Series.lower_bound"]], "map_elements() (polars.series method)": [[1093, "polars.Series.map_elements"]], "max() (polars.series method)": [[1094, "polars.Series.max"]], "mean() (polars.series method)": [[1095, "polars.Series.mean"]], "median() (polars.series method)": [[1096, "polars.Series.median"]], "min() (polars.series method)": [[1097, "polars.Series.min"]], "mode() (polars.series method)": [[1098, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1099, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1100, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1101, "polars.Series.name"]], "nan_max() (polars.series method)": [[1102, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1103, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1104, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1105, "polars.Series.not_"]], "null_count() (polars.series method)": [[1106, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1107, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1108, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1109, "polars.Series.peak_min"]], "product() (polars.series method)": [[1110, "polars.Series.product"]], "qcut() (polars.series method)": [[1111, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1112, "polars.Series.quantile"]], "rank() (polars.series method)": [[1113, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1114, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1115, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1116, "polars.Series.rename"]], "replace() (polars.series method)": [[1117, "polars.Series.replace"]], "reshape() (polars.series method)": [[1118, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1119, "polars.Series.reverse"]], "rle() (polars.series method)": [[1120, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1121, "polars.Series.rle_id"]], "rolling_map() (polars.series method)": [[1122, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1123, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1124, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1125, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1126, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1127, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1128, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1129, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1130, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1131, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1132, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1133, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1134, "polars.Series.sample"]], "scatter() (polars.series method)": [[1135, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1136, "polars.Series.search_sorted"]], "set() (polars.series method)": [[1137, "polars.Series.set"]], "set_sorted() (polars.series method)": [[1138, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1139, "polars.Series.shape"]], "shift() (polars.series method)": [[1140, "polars.Series.shift"]], "shrink_dtype() (polars.series method)": [[1141, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1142, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1143, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1144, "polars.Series.sign"]], "sin() (polars.series method)": [[1145, "polars.Series.sin"]], "sinh() (polars.series method)": [[1146, "polars.Series.sinh"]], "skew() (polars.series method)": [[1147, "polars.Series.skew"]], "slice() (polars.series method)": [[1148, "polars.Series.slice"]], "sort() (polars.series method)": [[1149, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1150, "polars.Series.sqrt"]], "std() (polars.series method)": [[1151, "polars.Series.std"]], "concat() (polars.series.str method)": [[1152, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1153, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1154, "polars.Series.str.contains_any"]], "count_matches() (polars.series.str method)": [[1155, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1156, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1157, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1158, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1159, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1160, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1161, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1162, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1163, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1164, "polars.Series.str.head"]], "join() (polars.series.str method)": [[1165, "polars.Series.str.join"]], "json_decode() (polars.series.str method)": [[1166, "polars.Series.str.json_decode"]], "json_path_match() (polars.series.str method)": [[1167, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1168, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1169, "polars.Series.str.len_chars"]], "pad_end() (polars.series.str method)": [[1170, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1171, "polars.Series.str.pad_start"]], "replace() (polars.series.str method)": [[1172, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1173, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1174, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1175, "polars.Series.str.reverse"]], "slice() (polars.series.str method)": [[1176, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1177, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1178, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1179, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1180, "polars.Series.str.starts_with"]], "strip_chars() (polars.series.str method)": [[1181, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1182, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1183, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1184, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1185, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1186, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1187, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1188, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1189, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1190, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1191, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1192, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1193, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1194, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1195, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1196, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1197, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1198, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1199, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1200, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1201, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1202, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1203, "polars.Series.sum"]], "tail() (polars.series method)": [[1204, "polars.Series.tail"]], "tan() (polars.series method)": [[1205, "polars.Series.tan"]], "tanh() (polars.series method)": [[1206, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1207, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1208, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1209, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1210, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1211, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1212, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1213, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1214, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1215, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1216, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1217, "polars.Series.top_k"]], "unique() (polars.series method)": [[1218, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1219, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1220, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1221, "polars.Series.value_counts"]], "var() (polars.series method)": [[1222, "polars.Series.var"]], "zip_with() (polars.series method)": [[1223, "polars.Series.zip_with"]], "execute() (polars.sqlcontext method)": [[1240, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[1241, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[1242, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[1243, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[1244, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[1245, "polars.SQLContext.unregister"]], "sqlcontext (class in polars)": [[1256, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1256, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1256, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1256, "polars.SQLContext.__init__"]]}})